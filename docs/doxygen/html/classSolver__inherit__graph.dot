digraph "Solver"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Solver\n|# _num_azim\l# _num_groups\l# _num_FSRs\l# _num_mesh_cells\l# _FSR_volumes\l# _FSR_materials\l# _track_generator\l# _geometry\l# _num_materials\l# _quad\land 33 more...\l|+ Solver()\l+ ~Solver()\l+ getGeometry()\l+ getTrackGenerator()\l+ getNumPolarAngles()\l+ getPolarQuadratureType()\l+ getNumIterations()\l+ getTotalTime()\l+ getKeff()\l+ getSourceConvergenceThreshold()\land 18 more...\l# round_to_int()\l# round_to_int()\l# initializePolarQuadrature()\l# initializeFluxArrays()\l# initializeSourceArrays()\l# buildExpInterpTable()\l# initializeFSRs()\l# initializeCmfd()\l# checkTrackSpacing()\l# zeroTrackFluxes()\land 8 more...\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{CPUSolver\n|# _num_threads\l# _FSR_locks\l# _mesh_surface_locks\l# _thread_fsr_flux\l|+ CPUSolver()\l+ ~CPUSolver()\l+ getNumThreads()\l+ getFSRScalarFlux()\l+ getFSRScalarFluxes()\l+ getFSRSource()\l+ getSurfaceCurrents()\l+ setNumThreads()\l+ computeFSRFissionRates()\l# initializeFluxArrays()\l# initializeSourceArrays()\l# initializePolarQuadrature()\l# buildExpInterpTable()\l# initializeFSRs()\l# initializeCmfd()\l# zeroTrackFluxes()\l# flattenFSRFluxes()\l# zeroSurfaceCurrents()\l# flattenFSRSources()\land 8 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCPUSolver.html",tooltip="This a subclass of the Solver class for multi-core CPUs using OpenMP multi-threading."];
  Node2 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{ThreadPrivateSolver\n|# _thread_flux\l# _thread_currents\l|+ ThreadPrivateSolver()\l+ ~ThreadPrivateSolver()\l# initializeFluxArrays()\l# initializeCmfd()\l# flattenFSRFluxes()\l# zeroSurfaceCurrents()\l# scalarFluxTally()\l# reduceThreadScalarFluxes()\l# reduceThreadSurfaceCurrents()\l# transportSweep()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classThreadPrivateSolver.html",tooltip="This is a subclass of the CPUSolver which uses thread private arrays for the FSR scalar fluxes to min..."];
  Node2 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{VectorizedSolver\n|# _num_vector_lengths\l# _thread_taus\l# _thread_exponentials\l|+ VectorizedSolver()\l+ ~VectorizedSolver()\l+ getNumVectorWidths()\l+ setGeometry()\l# buildExpInterpTable()\l# initializeFluxArrays()\l# initializeSourceArrays()\l# normalizeFluxes()\l# computeFSRSources()\l# scalarFluxTally()\l# transferBoundaryFlux()\l# addSourceToScalarFlux()\l# computeKeff()\l# computeExponentials()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classVectorizedSolver.html",tooltip="This is a subclass of the CPUSolver class which uses memory-aligned data structures and Intel&#39;s auto-..."];
  Node4 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{VectorizedPrivateSolver\n||+ VectorizedPrivateSolver()\l+ ~VectorizedPrivateSolver()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classVectorizedPrivateSolver.html",tooltip="This is a subclass of the VectorizedSolver class. This class uses a thread private array for FSR scal..."];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{GPUSolver\n||+ GPUSolver()\l+ ~GPUSolver()\l+ getNumThreadBlocks()\l+ getNumThreadsPerBlock()\l+ getFSRScalarFlux()\l+ getFSRScalarFluxes()\l+ getFSRSource()\l+ setNumThreadBlocks()\l+ setNumThreadsPerBlock()\l+ setGeometry()\l+ setTrackGenerator()\l+ computeScalarTrackIndex()\l+ computeFSRFissionRates()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classGPUSolver.html",tooltip="This a subclass of the Solver class for NVIDIA Graphics Processing Units (GPUs)."];
}
