digraph "VectorizedPrivateSolver"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{VectorizedPrivateSolver\n||+ VectorizedPrivateSolver()\l+ ~VectorizedPrivateSolver()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{VectorizedSolver\n|# _num_vector_lengths\l# _thread_taus\l# _thread_exponentials\l|+ VectorizedSolver()\l+ ~VectorizedSolver()\l+ getNumVectorWidths()\l+ setGeometry()\l# buildExpInterpTable()\l# initializeFluxArrays()\l# initializeSourceArrays()\l# normalizeFluxes()\l# computeFSRSources()\l# scalarFluxTally()\l# transferBoundaryFlux()\l# addSourceToScalarFlux()\l# computeKeff()\l# computeExponentials()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classVectorizedSolver.html",tooltip="This is a subclass of the CPUSolver class which uses memory-aligned data structures and Intel&#39;s auto-..."];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{CPUSolver\n|# _num_threads\l# _FSR_locks\l# _mesh_surface_locks\l# _thread_fsr_flux\l|+ CPUSolver()\l+ ~CPUSolver()\l+ getNumThreads()\l+ getFSRScalarFlux()\l+ getFSRScalarFluxes()\l+ getFSRSource()\l+ getSurfaceCurrents()\l+ setNumThreads()\l+ computeFSRFissionRates()\l# initializeFluxArrays()\l# initializeSourceArrays()\l# initializePolarQuadrature()\l# buildExpInterpTable()\l# initializeFSRs()\l# initializeCmfd()\l# zeroTrackFluxes()\l# flattenFSRFluxes()\l# zeroSurfaceCurrents()\l# flattenFSRSources()\land 8 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCPUSolver.html",tooltip="This a subclass of the Solver class for multi-core CPUs using OpenMP multi-threading."];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{Solver\n|# _num_azim\l# _num_groups\l# _num_FSRs\l# _num_mesh_cells\l# _FSR_volumes\l# _num_materials\l# _num_polar\l# _two_times_num_polar\l# _polar_times_groups\l# _quadrature_type\land 26 more...\l|+ Solver()\l+ ~Solver()\l+ getGeometry()\l+ getTrackGenerator()\l+ getNumPolarAngles()\l+ getPolarQuadratureType()\l+ getNumIterations()\l+ getTotalTime()\l+ getKeff()\l+ getSourceConvergenceThreshold()\land 18 more...\l# round_to_int()\l# round_to_int()\l# initializePolarQuadrature()\l# initializeFluxArrays()\l# initializeSourceArrays()\l# buildExpInterpTable()\l# initializeFSRs()\l# initializeCmfd()\l# checkTrackSpacing()\l# zeroTrackFluxes()\land 8 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classSolver.html",tooltip="This is an abstract base class which different Solver subclasses implement for different architecture..."];
  Node5 -> Node4 [color="grey25",fontsize="10",style="solid",label=" _geometry" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{Geometry\n||+ Geometry()\l+ ~Geometry()\l+ getWidth()\l+ getHeight()\l+ getXMin()\l+ getXMax()\l+ getYMin()\l+ getYMax()\l+ getBCTop()\l+ getBCBottom()\land 42 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classGeometry.html",tooltip="The master class containing references to all geometry-related objects - Surfaces, Cells, Universes and Lattices - and Materials."];
  Node6 -> Node4 [color="grey25",fontsize="10",style="solid",label=" _FSR_materials" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{Material\n||+ Material()\l+ ~Material()\l+ getUid()\l+ getId()\l+ getNumEnergyGroups()\l+ getSigmaT()\l+ getSigmaA()\l+ getSigmaS()\l+ getSigmaF()\l+ getNuSigmaF()\land 34 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMaterial.html",tooltip="The Material class represents a unique material and its relevant nuclear data (i.e., multigroup cross-sections) for neutron transport."];
  Node7 -> Node4 [color="grey25",fontsize="10",style="solid",label=" _cmfd" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{Cmfd\n||+ Cmfd()\l+ ~Cmfd()\l+ constructMatrices()\l+ computeDs()\l+ computeXS()\l+ updateMOCFlux()\l+ computeDiffCorrect()\l+ computeKeff()\l+ initializeFSRs()\l+ rescaleFlux()\land 25 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCmfd.html",tooltip="A class for Coarse Mesh Finite Difference (CMFD) acceleration."];
  Node8 -> Node4 [color="grey25",fontsize="10",style="solid",label=" _tracks" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{Track\n||+ Track()\l+ ~Track()\l+ setValues()\l+ setUid()\l+ setPhi()\l+ setAzimAngleIndex()\l+ setReflIn()\l+ setReflOut()\l+ setBCIn()\l+ setBCOut()\land 28 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classTrack.html",tooltip="A Track represents a characteristic line across the geometry."];
  Node9 -> Node4 [color="grey25",fontsize="10",style="solid",label=" _quad" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{Quadrature\n||+ Quadrature()\l+ ~Quadrature()\l+ getNumPolarAngles()\l+ getType()\l+ getSinTheta()\l+ getWeight()\l+ getMultiple()\l+ getSinThetas()\l+ getWeights()\l+ getMultiples()\l+ toString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQuadrature.html",tooltip="Stores values for a variety of polar quadratures which may be used."];
  Node10 -> Node4 [color="grey25",fontsize="10",style="solid",label=" _track_generator" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{TrackGenerator\n||+ TrackGenerator()\l+ ~TrackGenerator()\l+ getNumAzim()\l+ getTrackSpacing()\l+ getGeometry()\l+ getNumTracks()\l+ getNumTracksArray()\l+ getNumSegments()\l+ getNumSegmentsArray()\l+ getTracks()\land 8 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classTrackGenerator.html",tooltip="The TrackGenerator is dedicated to generating and storing Tracks which cyclically wrap across the Geo..."];
  Node11 -> Node4 [color="grey25",fontsize="10",style="solid",label=" _timer" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{Timer\n||+ Timer()\l+ ~Timer()\l+ startTimer()\l+ stopTimer()\l+ recordSplit()\l+ getTime()\l+ getSplit()\l+ printSplits()\l+ clearSplit()\l+ clearSplits()\l+ Get()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classTimer.html",tooltip="The Timer class is for timing and profiling regions of code."];
}
