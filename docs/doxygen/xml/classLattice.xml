<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="classLattice" kind="class" prot="public">
    <compoundname>Lattice</compoundname>
    <basecompoundref refid="classUniverse" prot="public" virt="non-virtual">Universe</basecompoundref>
    <includes refid="Universe_8h" local="yes">openmoc/src/host/Universe.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classLattice_1a5a3745b6824d33b070737887d37dda98" prot="private" static="no" mutable="no">
        <type>short int</type>
        <definition>short int Lattice::_num_x</definition>
        <argsstring></argsstring>
        <name>_num_x</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The number of lattice cells along the x-axis </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="102" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLattice_1ab72b8f8979991672cd9adb867c09bc7f" prot="private" static="no" mutable="no">
        <type>short int</type>
        <definition>short int Lattice::_num_y</definition>
        <argsstring></argsstring>
        <name>_num_y</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The number of lattice cells along the y-axis </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="104" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLattice_1adea38223bd036a0ebd9677347d042536" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Lattice::_width_x</definition>
        <argsstring></argsstring>
        <name>_width_x</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The width of each lattice cell (cm) along the x-axis </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="106" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLattice_1a83e69376a01731b9e6327944915f4d7b" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Lattice::_width_y</definition>
        <argsstring></argsstring>
        <name>_width_y</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The width of each lattice cell (cm) along the y-axis </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="108" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLattice_1a7c51e10ce48cbd72b4e0fb2b75487629" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; std::pair&lt; short int, <ref refid="classUniverse" kindref="compound">Universe</ref> * &gt; &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; std::pair&lt;short int, Universe*&gt; &gt; &gt; Lattice::_universes</definition>
        <argsstring></argsstring>
        <name>_universes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A container of universes ? </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="110" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLattice_1a897799caf9f2e3f622ec6c7838681580" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; std::pair&lt; int, int &gt; &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; std::pair&lt;int, int&gt; &gt; &gt; Lattice::_region_map</definition>
        <argsstring></argsstring>
        <name>_region_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A container of the number of FSRs in each lattice cell </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="112" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classLattice_1a057db59a2a7b471ca3d9af94b41d4d6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Lattice::Lattice</definition>
        <argsstring>(const short int id, const double width_x, const double width_y)</argsstring>
        <name>Lattice</name>
        <param>
          <type>const short int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>width_x</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>width_y</declname>
        </param>
        <briefdescription>
<para>Constructor sets the user-specified and unique IDs for this lattice. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>the user-specified lattice (universe) ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width_x</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of the lattice cells along x </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width_y</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of the lattice cells along y </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="116" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.cpp" bodystart="300" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classLattice_1a91be54ce9927b6bc53d30a2faf760780" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>Lattice::~Lattice</definition>
        <argsstring>()</argsstring>
        <name>~Lattice</name>
        <briefdescription>
<para>Destructor clears memory for all of universes pointers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="117" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.cpp" bodystart="316" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="classLattice_1aa72ae9812e91b1a4a907dfc1107c0393" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>short int</type>
        <definition>short int Lattice::getNumX</definition>
        <argsstring>() const </argsstring>
        <name>getNumX</name>
        <briefdescription>
<para>Return the number of lattice cells along the x-axis. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of lattice cells along x </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="119" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.cpp" bodystart="330" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="classLattice_1a9f978534c7ac76cc8b98e815e271e978" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>short int</type>
        <definition>short int Lattice::getNumY</definition>
        <argsstring>() const </argsstring>
        <name>getNumY</name>
        <briefdescription>
<para>Return the number of lattice cells along the y-axis. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of lattice cells along y </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="120" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.cpp" bodystart="339" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classLattice_1ac74c38894f48a1f3462178cd07b6c00b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classPoint" kindref="compound">Point</ref> *</type>
        <definition>Point * Lattice::getOrigin</definition>
        <argsstring>()</argsstring>
        <name>getOrigin</name>
        <reimplements refid="classUniverse_1a2925eda0d8d3a5142b57f6a75974fada">getOrigin</reimplements>
        <briefdescription>
<para>Return the origin of the lattice. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a pointer to the origin of the lattice </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="121" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.cpp" bodystart="348" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classLattice_1ae6b84cf43026d5e4ee368bab59910cdb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; std::pair&lt; short int, <ref refid="classUniverse" kindref="compound">Universe</ref> * &gt; &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; std::pair&lt; short int, Universe * &gt; &gt; &gt; Lattice::getUniverses</definition>
        <argsstring>() const </argsstring>
        <name>getUniverses</name>
        <briefdescription>
<para>Return a 2D vector array of the universes in the lattice. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>2D vector of universes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="123" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.cpp" bodystart="358" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="classLattice_1a0b1b5aa06a73064c65d08332c13f973f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classUniverse" kindref="compound">Universe</ref> *</type>
        <definition>Universe * Lattice::getUniverse</definition>
        <argsstring>(short int lattice_x, short int lattice_y) const </argsstring>
        <name>getUniverse</name>
        <param>
          <type>short int</type>
          <declname>lattice_x</declname>
        </param>
        <param>
          <type>short int</type>
          <declname>lattice_y</declname>
        </param>
        <briefdescription>
<para>Returns a pointer to the universe within a specific lattice cell. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lattice_x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x index to the lattice cell </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lattice_y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y index to the lattice cell </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to a universe filling the lattice cell </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="124" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.cpp" bodystart="369" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="classLattice_1acb5c93de94618ab65ef61f18a93e48b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Lattice::getWidthX</definition>
        <argsstring>() const </argsstring>
        <name>getWidthX</name>
        <briefdescription>
<para>Return the width of the lattice along the x-axis. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the width of the lattice cells along x </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="125" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.cpp" bodystart="386" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classLattice_1ad54b31fc59330eaadf4c6b81e034a199" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Lattice::getWidthY</definition>
        <argsstring>() const </argsstring>
        <name>getWidthY</name>
        <briefdescription>
<para>Return the width of the lattice along the y-axis. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the width of the lattice cells along y </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="126" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.cpp" bodystart="395" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="classLattice_1a5c290c37b0e29a22764acf7e7e74ba22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Lattice::getFSR</definition>
        <argsstring>(short int lat_x, short int lat_y)</argsstring>
        <name>getFSR</name>
        <param>
          <type>short int</type>
          <declname>lat_x</declname>
        </param>
        <param>
          <type>short int</type>
          <declname>lat_y</declname>
        </param>
        <briefdescription>
<para>Return the id of a flat source region base index (smallest FSR region id within a specific lattice cell) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lat_x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x index of the lattice cell </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lat_y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y index of the lattice cell </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the base FSR </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="127" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.cpp" bodystart="407" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="classLattice_1a89b07f10fdb35efdbe5701c54cfbd548" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Lattice::setLatticeCells</definition>
        <argsstring>(int num_x, int num_y, short *universes)</argsstring>
        <name>setLatticeCells</name>
        <param>
          <type>int</type>
          <declname>num_x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_y</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>universes</declname>
        </param>
        <briefdescription>
<para>Sets the arrary of universe IDs filling each lattice cell. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>universes</parametername>
</parameternamelist>
<parameterdescription>
<para>the array of universe Ids for each lattice cell </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_x</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of lattice cells along x </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_y</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of lattice cells along y </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="129" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.cpp" bodystart="461" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="classLattice_1a9a59a806e3629135d7ea784669a6c12c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Lattice::setUniversePointer</definition>
        <argsstring>(Universe *universe)</argsstring>
        <name>setUniversePointer</name>
        <param>
          <type><ref refid="classUniverse" kindref="compound">Universe</ref> *</type>
          <declname>universe</declname>
        </param>
        <briefdescription>
<para>Sets the pointer to a universe filling one of this lattice&apos;s lattice cells. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>universe</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the universe </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="130" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.cpp" bodystart="424" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="classLattice_1aaa38ae681b8814661033c99f6410fadd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Lattice::withinBounds</definition>
        <argsstring>(Point *point)</argsstring>
        <name>withinBounds</name>
        <param>
          <type><ref refid="classPoint" kindref="compound">Point</ref> *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Checks if a point is within the bounds of a lattice. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the point of interest </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the point is in the bounds, false if not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="132" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.cpp" bodystart="499" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="classLattice_1a463e4fba851c367d6c46ed777a7de7e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCell" kindref="compound">Cell</ref> *</type>
        <definition>Cell * Lattice::findCell</definition>
        <argsstring>(LocalCoords *coords, std::map&lt; short int, Universe * &gt; universes)</argsstring>
        <name>findCell</name>
        <reimplements refid="classUniverse_1a23c055aef2533f10d524979ee8e9f46b">findCell</reimplements>
        <param>
          <type><ref refid="classLocalCoords" kindref="compound">LocalCoords</ref> *</type>
          <declname>coords</declname>
        </param>
        <param>
          <type>std::map&lt; short int, <ref refid="classUniverse" kindref="compound">Universe</ref> * &gt;</type>
          <declname>universes</declname>
        </param>
        <briefdescription>
<para>Finds the cell within this lattice that a localcoords is in. </para>        </briefdescription>
        <detaileddescription>
<para>This method first find the lattice cell, then searches the universe inside that lattice cell. If localcoords is outside the bounds of the lattice, this method will return NULL. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coords</parametername>
</parameternamelist>
<parameterdescription>
<para>the localcoords of interest </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>universes</parametername>
</parameternamelist>
<parameterdescription>
<para>a map of all universes passed in from the geometry </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the cell this localcoord is in or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="134" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.cpp" bodystart="529" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="classLattice_1af5b9506d18a4ebcd2bf4932c0ab6d86a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCell" kindref="compound">Cell</ref> *</type>
        <definition>Cell * Lattice::findNextLatticeCell</definition>
        <argsstring>(LocalCoords *coords, double angle, std::map&lt; short int, Universe * &gt; universes)</argsstring>
        <name>findNextLatticeCell</name>
        <param>
          <type><ref refid="classLocalCoords" kindref="compound">LocalCoords</ref> *</type>
          <declname>coords</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>std::map&lt; short int, <ref refid="classUniverse" kindref="compound">Universe</ref> * &gt;</type>
          <declname>universes</declname>
        </param>
        <briefdescription>
<para>Finds the next cell for a localcoords object along a trajectory defined by some angle (in radians from 0 to PI). </para>        </briefdescription>
        <detaileddescription>
<para>The method will update the localcoords passed in as an argument to be the one at the boundary of the next cell crossed along the given trajectory. It will do this by recursively building a linked list of localcoords from the localcoords passed in as an argument down to the lowest level cell found. In the process it will set the local coordinates for each localcoords in the linked list for the lattice or universe that it is in. If the localcoords is outside the bounds of the lattice or on the boundaries this method will return NULL; otherwise it will return a pointer to the cell that the localcoords will reach next along its trajectory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coords</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a localcoords object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>the angle of the trajectory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>universes</parametername>
</parameternamelist>
<parameterdescription>
<para>a map of all of the universes passed in by the geometry </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to a cell if found, NULL if no cell found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="136" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.cpp" bodystart="612" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="classLattice_1afc84badb58ce4b9c3946fcc944647c30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Lattice::computeFSRMaps</definition>
        <argsstring>()</argsstring>
        <name>computeFSRMaps</name>
        <reimplements refid="classUniverse_1af76741be6456d3542a302024fd4c52e4">computeFSRMaps</reimplements>
        <briefdescription>
<para>Computes the flat source region base indices for each of the lattice cells within this <ref refid="classLattice" kindref="compound">Lattice</ref> (ie, the minimum id for the flat source regions within each lattice cell). Returns the number of FSRs in the lattice. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of FSRs </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="137" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.cpp" bodystart="803" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="classLattice_1a85eb51407b84e29d55f300e06b29f9b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Lattice::toString</definition>
        <argsstring>()</argsstring>
        <name>toString</name>
        <reimplements refid="classUniverse_1a9bc78841d661eb12afa51ca04ae31368">toString</reimplements>
        <briefdescription>
<para>Converts a lattice&apos;s attributes to a character array representation. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>character array of this lattice&apos;s attributes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="139" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.cpp" bodystart="825" bodyend="841"/>
      </memberdef>
      <memberdef kind="function" id="classLattice_1ac29a8a1d0a21829843ee39eb3778fc85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Lattice::printString</definition>
        <argsstring>()</argsstring>
        <name>printString</name>
        <reimplements refid="classUniverse_1a9d7f74890c13dc3856a694b4f142f985">printString</reimplements>
        <briefdescription>
<para>Prints a string representation of all of the lattice&apos;s objects to the console. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="140" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.cpp" bodystart="848" bodyend="850"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a repeating 2D lattice array of universes. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="49">
        <label>Universe</label>
        <link refid="classUniverse"/>
      </node>
      <node id="48">
        <label>Lattice</label>
        <link refid="classLattice"/>
        <childnode refid="49" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="51">
        <label>Universe</label>
        <link refid="classUniverse"/>
        <childnode refid="52" relation="usage">
          <edgelabel>_origin</edgelabel>
        </childnode>
      </node>
      <node id="52">
        <label>Point</label>
        <link refid="classPoint"/>
      </node>
      <node id="50">
        <label>Lattice</label>
        <link refid="classLattice"/>
        <childnode refid="51" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" line="98" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Universe.h" bodystart="98" bodyend="141"/>
    <listofallmembers>
      <member refid="classUniverse_1aa410d75ac7bfc487dd1194077d7cbfc1" prot="protected" virt="non-virtual"><scope>Lattice</scope><name>_cells</name></member>
      <member refid="classUniverse_1a59625074218444923fc88384f13d51bf" prot="protected" virt="non-virtual"><scope>Lattice</scope><name>_id</name></member>
      <member refid="classUniverse_1ac243fe18b2dda0d635c4e3cb04e00dda" prot="protected" virt="non-virtual"><scope>Lattice</scope><name>_n</name></member>
      <member refid="classLattice_1a5a3745b6824d33b070737887d37dda98" prot="private" virt="non-virtual"><scope>Lattice</scope><name>_num_x</name></member>
      <member refid="classLattice_1ab72b8f8979991672cd9adb867c09bc7f" prot="private" virt="non-virtual"><scope>Lattice</scope><name>_num_y</name></member>
      <member refid="classUniverse_1a1a1a80e5a8cc28b9629317edf03b9765" prot="protected" virt="non-virtual"><scope>Lattice</scope><name>_origin</name></member>
      <member refid="classLattice_1a897799caf9f2e3f622ec6c7838681580" prot="private" virt="non-virtual"><scope>Lattice</scope><name>_region_map</name></member>
      <member refid="classUniverse_1ab982650a751c2aae8ebc26e150b71cd1" prot="protected" virt="non-virtual"><scope>Lattice</scope><name>_type</name></member>
      <member refid="classUniverse_1a737f37373d846ed69fddf2de38473a87" prot="protected" virt="non-virtual"><scope>Lattice</scope><name>_uid</name></member>
      <member refid="classLattice_1a7c51e10ce48cbd72b4e0fb2b75487629" prot="private" virt="non-virtual"><scope>Lattice</scope><name>_universes</name></member>
      <member refid="classLattice_1adea38223bd036a0ebd9677347d042536" prot="private" virt="non-virtual"><scope>Lattice</scope><name>_width_x</name></member>
      <member refid="classLattice_1a83e69376a01731b9e6327944915f4d7b" prot="private" virt="non-virtual"><scope>Lattice</scope><name>_width_y</name></member>
      <member refid="classUniverse_1af045c632c9b336f8d4f7be20c5a510a1" prot="public" virt="non-virtual"><scope>Lattice</scope><name>addCell</name></member>
      <member refid="classLattice_1afc84badb58ce4b9c3946fcc944647c30" prot="public" virt="non-virtual"><scope>Lattice</scope><name>computeFSRMaps</name></member>
      <member refid="classLattice_1a463e4fba851c367d6c46ed777a7de7e8" prot="public" virt="non-virtual"><scope>Lattice</scope><name>findCell</name></member>
      <member refid="classLattice_1af5b9506d18a4ebcd2bf4932c0ab6d86a" prot="public" virt="non-virtual"><scope>Lattice</scope><name>findNextLatticeCell</name></member>
      <member refid="classUniverse_1a2c23d7adc8ea99834f4cdd0e4a26e45a" prot="public" virt="non-virtual"><scope>Lattice</scope><name>getCells</name></member>
      <member refid="classLattice_1a5c290c37b0e29a22764acf7e7e74ba22" prot="public" virt="non-virtual"><scope>Lattice</scope><name>getFSR</name></member>
      <member refid="classUniverse_1ac4223b9975965ff302bd38666782985f" prot="public" virt="non-virtual" ambiguityscope="Universe::"><scope>Lattice</scope><name>getFSR</name></member>
      <member refid="classUniverse_1a4f7c4329c04e78b6a62f8977dfe3d115" prot="public" virt="non-virtual"><scope>Lattice</scope><name>getId</name></member>
      <member refid="classUniverse_1a14d0a5faf027f70526bd87298ff1e45c" prot="public" virt="non-virtual"><scope>Lattice</scope><name>getNumCells</name></member>
      <member refid="classLattice_1aa72ae9812e91b1a4a907dfc1107c0393" prot="public" virt="non-virtual"><scope>Lattice</scope><name>getNumX</name></member>
      <member refid="classLattice_1a9f978534c7ac76cc8b98e815e271e978" prot="public" virt="non-virtual"><scope>Lattice</scope><name>getNumY</name></member>
      <member refid="classLattice_1ac74c38894f48a1f3462178cd07b6c00b" prot="public" virt="non-virtual"><scope>Lattice</scope><name>getOrigin</name></member>
      <member refid="classUniverse_1a6cbde58618cfcec5f72780b2911ab97b" prot="public" virt="non-virtual"><scope>Lattice</scope><name>getType</name></member>
      <member refid="classUniverse_1aa42e60aa9e1b4a8baa1b3b3b865caec4" prot="public" virt="non-virtual"><scope>Lattice</scope><name>getUid</name></member>
      <member refid="classLattice_1a0b1b5aa06a73064c65d08332c13f973f" prot="public" virt="non-virtual"><scope>Lattice</scope><name>getUniverse</name></member>
      <member refid="classLattice_1ae6b84cf43026d5e4ee368bab59910cdb" prot="public" virt="non-virtual"><scope>Lattice</scope><name>getUniverses</name></member>
      <member refid="classLattice_1acb5c93de94618ab65ef61f18a93e48b3" prot="public" virt="non-virtual"><scope>Lattice</scope><name>getWidthX</name></member>
      <member refid="classLattice_1ad54b31fc59330eaadf4c6b81e034a199" prot="public" virt="non-virtual"><scope>Lattice</scope><name>getWidthY</name></member>
      <member refid="classLattice_1a057db59a2a7b471ca3d9af94b41d4d6e" prot="public" virt="non-virtual"><scope>Lattice</scope><name>Lattice</name></member>
      <member refid="classLattice_1ac29a8a1d0a21829843ee39eb3778fc85" prot="public" virt="non-virtual"><scope>Lattice</scope><name>printString</name></member>
      <member refid="classLattice_1a89b07f10fdb35efdbe5701c54cfbd548" prot="public" virt="non-virtual"><scope>Lattice</scope><name>setLatticeCells</name></member>
      <member refid="classUniverse_1a0f832001f75c9a3e9b57ba6834d202af" prot="public" virt="non-virtual"><scope>Lattice</scope><name>setOrigin</name></member>
      <member refid="classUniverse_1a9a2868fbdf186f4842db3c71c1c77373" prot="public" virt="non-virtual"><scope>Lattice</scope><name>setType</name></member>
      <member refid="classLattice_1a9a59a806e3629135d7ea784669a6c12c" prot="public" virt="non-virtual"><scope>Lattice</scope><name>setUniversePointer</name></member>
      <member refid="classUniverse_1ae3952c88390eda788da540d421d0b139" prot="public" virt="non-virtual"><scope>Lattice</scope><name>subdivideCells</name></member>
      <member refid="classLattice_1a85eb51407b84e29d55f300e06b29f9b4" prot="public" virt="non-virtual"><scope>Lattice</scope><name>toString</name></member>
      <member refid="classUniverse_1ad1cbe2dc504fff3eac77c89a20a5fea2" prot="public" virt="non-virtual"><scope>Lattice</scope><name>Universe</name></member>
      <member refid="classLattice_1aaa38ae681b8814661033c99f6410fadd" prot="public" virt="non-virtual"><scope>Lattice</scope><name>withinBounds</name></member>
      <member refid="classLattice_1a91be54ce9927b6bc53d30a2faf760780" prot="public" virt="virtual"><scope>Lattice</scope><name>~Lattice</name></member>
      <member refid="classUniverse_1a7723438c7fa497defb4c82ac975152b2" prot="public" virt="virtual"><scope>Lattice</scope><name>~Universe</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
