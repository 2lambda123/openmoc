<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="VectorizedSolver_8h" kind="file">
    <compoundname>VectorizedSolver.h</compoundname>
    <includedby refid="VectorizedSolver_8cpp" local="yes">/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/VectorizedSolver.cpp</includedby>
    <innerclass refid="classVectorizedSolver" prot="public">VectorizedSolver</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="VectorizedSolver_8h_1a3c1eee3367b6bf3d9a00f66369aba5ed" prot="public" static="no">
        <name>taus</name>
        <param><defname>p</defname></param>
        <param><defname>e</defname></param>
        <initializer>(taus[(p)*_num_groups + (e)])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indexing scheme for the optical length ( <formula id="26">$ l\Sigma_t $</formula>) for a given segment for each polar angle and energy group </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/VectorizedSolver.h" line="23" bodyfile="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/VectorizedSolver.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="VectorizedSolver_8h_1a4d1a5b2de2f5853d926488cdf1dc1e55" prot="public" static="no">
        <name>exponentials</name>
        <param><defname>p</defname></param>
        <param><defname>e</defname></param>
        <initializer>(exponentials[(p)*_num_groups + (e)])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indexing scheme for the exponentials in the neutron transport equation ( <formula id="27">$ 1 - exp(-\frac{l\Sigma_t}{sin(\theta_p)}) $</formula>) for a given segment for each polar angle and energy group </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/VectorizedSolver.h" line="28" bodyfile="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/VectorizedSolver.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classVectorizedSolver" kindref="compound">VectorizedSolver</ref> class. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="date"><para>May 28, 2013 </para></simplesect>
<simplesect kind="author"><para>William Boyd, MIT, Course 22 (<ulink url="mailto:wboyd@mit.edu">wboyd@mit.edu</ulink>) </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="9"><highlight class="preprocessor">#ifndef<sp/>VECTORIZEDSOLVER_H_</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>VECTORIZEDSOLVER_H_</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_USE_MATH_DEFINES</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;omp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mkl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="CPUSolver_8h" kindref="compound" tooltip="The CPUSolver class.">CPUSolver.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="23" refid="VectorizedSolver_8h_1a3c1eee3367b6bf3d9a00f66369aba5ed" refkind="member"><highlight class="preprocessor">#define<sp/>taus(p,e)<sp/>(taus[(p)*_num_groups<sp/>+<sp/>(e)])</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="28" refid="VectorizedSolver_8h_1a4d1a5b2de2f5853d926488cdf1dc1e55" refkind="member"><highlight class="preprocessor">#define<sp/>exponentials(p,e)<sp/>(exponentials[(p)*_num_groups<sp/>+<sp/>(e)])</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="35" refid="classVectorizedSolver" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classVectorizedSolver" kindref="compound" tooltip="This is a subclass of the CPUSolver class which uses memory-aligned data structures and Intel&amp;#39;s auto-...">VectorizedSolver</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classCPUSolver" kindref="compound" tooltip="This a subclass of the Solver class for multi-core CPUs using OpenMP multi-threading.">CPUSolver</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="classVectorizedSolver_1adff1b20b7ea5cb791119fae7ee83fc1f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1adff1b20b7ea5cb791119fae7ee83fc1f" kindref="member">_num_vector_lengths</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="43" refid="classVectorizedSolver_1a0a18af2566bcaee51cec4bd55a70e7e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/><ref refid="classVectorizedSolver_1a0a18af2566bcaee51cec4bd55a70e7e8" kindref="member">_thread_taus</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="classVectorizedSolver_1a5a9623683961869eef3a171c41fb6f81" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/><ref refid="classVectorizedSolver_1a5a9623683961869eef3a171c41fb6f81" kindref="member">_thread_exponentials</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1a1a834bd814813507db91da90de08a0d0" kindref="member" tooltip="Allocates memory for the exponential prefactor table.">precomputePrefactors</ref>();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1a6d5bac107495fe429839826859b7dfa1" kindref="member" tooltip="Allocates memory for track boundary angular fluxes and flat source region scalar fluxes and leakages...">initializeFluxArrays</ref>();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1a7287329d44d695ca91181e9484e32bca" kindref="member" tooltip="Allocates memory for flat source region source arrays.">initializeSourceArrays</ref>();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1a6c428f0706f8c8960a88404606665704" kindref="member" tooltip="Normalizes all flat source region scalar fluxes and track boundary angular fluxes to the total fissio...">normalizeFluxes</ref>();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/><ref refid="classVectorizedSolver_1a14a159d804a2b94f1442e6cb6046e4f0" kindref="member" tooltip="Computes the total source (fission and scattering) in each flat source region.">computeFSRSources</ref>();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1a9f0bec07a295caf895554307c56c2bcb" kindref="member" tooltip="Computes the contribution to the flat source region scalar flux from a single track segment...">scalarFluxTally</ref>(<ref refid="structsegment" kindref="compound" tooltip="A segment represents a line segment within a single flat source region along a track.">segment</ref>*<sp/>curr_segment,<sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/><ref refid="CPUSolver_8h_1a2143506339a36528e1c9d7e27501897f" kindref="member">track_flux</ref>,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/>fsr_flux);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1a8312a8ee4f2b34ae52fc7a21c7085bfd" kindref="member" tooltip="Updates the boundary flux for a track given boundary conditions.">transferBoundaryFlux</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>track_id,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>direction,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/><ref refid="CPUSolver_8h_1a2143506339a36528e1c9d7e27501897f" kindref="member">track_flux</ref>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1ac079f92b22b16a7584662fe36817495b" kindref="member" tooltip="Add the source term contribution in the transport equation to the flat source region scalar flux...">addSourceToScalarFlux</ref>();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1a7ab9f0df852a0afd04876f6e0ec53046" kindref="member" tooltip="Compute  from total fission and absorption rates.">computeKeff</ref>();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1abba9186ad669a2eed70fd8458666eab2" kindref="member" tooltip="Computes an array of the exponentials in the transport equation, , for each energy group and polar an...">computeExponentials</ref>(<ref refid="structsegment" kindref="compound" tooltip="A segment represents a line segment within a single flat source region along a track.">segment</ref>*<sp/>curr_segment,<sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/><ref refid="VectorizedSolver_8h_1a4d1a5b2de2f5853d926488cdf1dc1e55" kindref="member">exponentials</ref>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVectorizedSolver_1a8d24fe816af7f78a7404226c3fb284cd" kindref="member" tooltip="Constructor initializes empty arrays for source, flux, etc.">VectorizedSolver</ref>(<ref refid="classGeometry" kindref="compound" tooltip="The master class containing references to all geometry-related objects (surfaces, cells...">Geometry</ref>*<sp/>geometry=NULL,<sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTrackGenerator" kindref="compound" tooltip="The track generator is dedicated to generating tracks which cyclically wrap across the geometry...">TrackGenerator</ref>*<sp/>track_generator=NULL);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1abcda5ede1c19f0e4c91e042c7d7a110d" kindref="member" tooltip="Destructor deletes arrays of boundary angular flux for all tracks, scalar flux and source for each fl...">~VectorizedSolver</ref>();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1ae95a9f13a157ecf6ddc45da9718f1367" kindref="member" tooltip="Returns the number of vector lengths required to fit the number of energy groups.">getNumVectorWidths</ref>();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1ab4a29f8b4f8cbb4dff38ce2b85a56642" kindref="member" tooltip="Sets the geometry for the solver and aligns all material cross-section data for SIMD vector instructi...">setGeometry</ref>(<ref refid="classGeometry" kindref="compound" tooltip="The master class containing references to all geometry-related objects (surfaces, cells...">Geometry</ref>*<sp/>geometry);</highlight></codeline>
<codeline lineno="82"><highlight class="normal">};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTORIZEDSOLVER_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/VectorizedSolver.h"/>
  </compounddef>
</doxygen>
