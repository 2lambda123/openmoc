<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="plotter_8py" kind="file">
    <compoundname>plotter.py</compoundname>
    <innernamespace refid="namespaceopenmoc_1_1plotter">openmoc::plotter</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespaceopenmoc_1_1plotter" refkind="compound"><highlight class="comment">##</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@file<sp/>plotter.py</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@package<sp/>openmoc.plotter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@brief<sp/>The<sp/>plotter<sp/>module<sp/>provides<sp/>utility<sp/>functions<sp/>to<sp/>plot<sp/>data<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OpenMOCs<sp/>C++<sp/>classes,<sp/>in<sp/>particular,<sp/>the<sp/>geomery,<sp/>including<sp/>material,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cells<sp/>and<sp/>flat<sp/>source<sp/>regions,<sp/>and<sp/>fluxes<sp/>and<sp/>pin<sp/>powers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@author<sp/>William<sp/>Boyd<sp/>(wboyd@mit.edu)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@date<sp/>March<sp/>10,<sp/>2013</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>matplotlib.pyplot<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>plt</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>matplotlib.colors<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>colors</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>matplotlib.cm<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>cmx</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy.random</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>os</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>openmoc<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>log<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">##<sp/>A<sp/>static<sp/>variable<sp/>for<sp/>the<sp/>output<sp/>directory<sp/>in<sp/>which<sp/>to<sp/>save<sp/>plots</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">subdirectory<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/plots/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">##<sp/>The<sp/>number<sp/>of<sp/>colors<sp/>to<sp/>use<sp/>when<sp/>creating<sp/>a<sp/>random<sp/>color<sp/>map<sp/>for<sp/>plots</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">num_colors<sp/>=<sp/>50</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">##<sp/>An<sp/>array<sp/>of<sp/>random<sp/>floats<sp/>that<sp/>represents<sp/>a<sp/>random<sp/>color<sp/>map<sp/>for<sp/>plots</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">color_map<sp/>=<sp/>np.random.random_sample((num_colors,))</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">##</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@brief<sp/>Plots<sp/>the<sp/>characteristic<sp/>tracks<sp/>from<sp/>an<sp/>OpenMOC<sp/>simulation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@details<sp/>This<sp/>method<sp/>requires<sp/>that<sp/>tracks<sp/>have<sp/>been<sp/>generated<sp/>by<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TrackGenerator<sp/>object.<sp/>A<sp/>user<sp/>may<sp/>invoke<sp/>this<sp/>function<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>an<sp/>OpenMOC<sp/>Python<sp/>file<sp/>as<sp/>follows:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openmoc.plotter.plotTracks(my_track_generator)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@endcode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@param<sp/>track_generator<sp/>the<sp/>track<sp/>generator<sp/>which<sp/>has<sp/>generated<sp/>tracks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceopenmoc_1_1plotter_1a8a04957c56320983285e9e56be4144b8" kindref="member" tooltip="Plots the characteristic tracks from an OpenMOC simulation.">plotTracks</ref>(track_generator):</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">global</highlight><highlight class="normal"><sp/>subdirectory</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>directory<sp/>=<sp/>getOutputDirectory()<sp/>+<sp/>subdirectory</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>directory<sp/>if<sp/>it<sp/>does<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>os.path.exists(directory):</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.makedirs(directory)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Error<sp/>checking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;TrackGenerator&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>str(type(track_generator)):</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;ERROR&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Unable<sp/>to<sp/>plot<sp/>tracks<sp/>since<sp/>a<sp/>parameter<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;of<sp/>type<sp/>%s<sp/>was<sp/>input<sp/>rather<sp/>than<sp/>a<sp/>TrackGenerator&apos;</highlight><highlight class="normal">,<sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str(type(track_generator)))<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>track_generator.containsTracks():</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;ERROR&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Unable<sp/>to<sp/>plot<sp/>tracks<sp/>since<sp/>the<sp/>track<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;generator<sp/>has<sp/>not<sp/>yet<sp/>generated<sp/>tracks&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;NORMAL&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Plotting<sp/>the<sp/>tracks...&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Retrieve<sp/>data<sp/>from<sp/>track<sp/>generator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>num_azim<sp/>=<sp/>track_generator.getNumAzim()</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>spacing<sp/>=<sp/>track_generator.getTrackSpacing()</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>num_tracks<sp/>=<sp/>track_generator.getNumTracks()</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>coords<sp/>=<sp/>track_generator.retrieveTrackCoords(num_tracks*4)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Convert<sp/>data<sp/>to<sp/>numpy<sp/>arrays<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>coords<sp/>=<sp/>np.array(coords)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>coords[0::2]</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>coords[1::2]</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>figure<sp/>of<sp/>line<sp/>segments<sp/>for<sp/>each<sp/>track</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>fig<sp/>=<sp/>plt.figure()</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(num_tracks):</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plt.plot([x[i*2],<sp/>x[i*2+1]],<sp/>[y[i*2],<sp/>y[i*2+1]],<sp/></highlight><highlight class="stringliteral">&apos;b-&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>plt.xlim([x.min(),<sp/>x.max()])</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>plt.ylim([y.min(),<sp/>y.max()])</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>title<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;Tracks<sp/>for<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>str(num_azim)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>angles<sp/>and<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>str(spacing)<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;<sp/>cm<sp/>spacing&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>plt.title(title)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>filename<sp/>=<sp/>directory<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;tracks-&apos;</highlight><highlight class="normal"><sp/>+<sp/>str(num_azim)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;-angles-&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str(spacing)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;-spacing.png&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>fig.savefig(filename)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">##</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@brief<sp/>Plots<sp/>the<sp/>characteristic<sp/>track<sp/>segments<sp/>from<sp/>an<sp/>OpenMOC<sp/>simulation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@details<sp/>This<sp/>method<sp/>requires<sp/>that<sp/>tracks<sp/>have<sp/>been<sp/>generated<sp/>by<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TrackGenerator<sp/>object.<sp/>Each<sp/>segment<sp/>is<sp/>colored<sp/>by<sp/>the<sp/>ID<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique<sp/>flat<sp/>flat<sp/>source<sp/>region<sp/>it<sp/>is<sp/>within.<sp/>A<sp/>user<sp/>may<sp/>invoke<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>function<sp/>from<sp/>an<sp/>OpenMOC<sp/>Python<sp/>file<sp/>as<sp/>follows:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openmoc.plotter.plotSegments(my_track_generator)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@endcode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@param<sp/>track_generator<sp/>the<sp/>track<sp/>generator<sp/>which<sp/>has<sp/>generated<sp/>tracks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceopenmoc_1_1plotter_1ab414c4473fb5e278fbd0361d9b1891d4" kindref="member" tooltip="Plots the characteristic track segments from an OpenMOC simulation.">plotSegments</ref>(track_generator):</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">global</highlight><highlight class="normal"><sp/>subdirectory</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>directory<sp/>=<sp/>getOutputDirectory()<sp/>+<sp/>subdirectory</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>directory<sp/>if<sp/>it<sp/>does<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>os.path.exists(directory):</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.makedirs(directory)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Error<sp/>checking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;TrackGenerator&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>str(type(track_generator)):</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;ERROR&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Unable<sp/>to<sp/>plot<sp/>track<sp/>segments<sp/>since<sp/>a<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;parameter<sp/>of<sp/>type<sp/>%s<sp/>was<sp/>input<sp/>rather<sp/>than<sp/>a<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;TrackGenerator&apos;</highlight><highlight class="normal">,<sp/>str(type(track_generator)))<sp/></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>track_generator.containsTracks():</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;ERROR&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Unable<sp/>to<sp/>plot<sp/>track<sp/>segments<sp/>since<sp/>the<sp/>track<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;generator<sp/>has<sp/>not<sp/>yet<sp/>generated<sp/>tracks&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;NORMAL&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Plotting<sp/>the<sp/>segments...&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Retrieve<sp/>data<sp/>from<sp/>track<sp/>generator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>num_azim<sp/>=<sp/>track_generator.getNumAzim()</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>spacing<sp/>=<sp/>track_generator.getTrackSpacing()</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>num_segments<sp/>=<sp/>track_generator.getNumSegments()</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>num_fsrs<sp/>=<sp/>track_generator.getGeometry().getNumFSRs()</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>coords<sp/>=<sp/>track_generator.retrieveSegmentCoords(num_segments*5)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Convert<sp/>data<sp/>to<sp/>numpy<sp/>arrays<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>coords<sp/>=<sp/>np.array(coords)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>numpy.zeros(num_segments*2)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>numpy.zeros(num_segments*2)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>fsrs<sp/>=<sp/>numpy.zeros(num_segments)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(num_segments):</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsrs[i]<sp/>=<sp/>coords[i*5]</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i*2]<sp/>=<sp/>coords[i*5+1]</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[i*2]<sp/>=<sp/>coords[i*5+2]</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i*2+1]<sp/>=<sp/>coords[i*5+3]</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[i*2+1]<sp/>=<sp/>coords[i*5+4]</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>figure<sp/>of<sp/>line<sp/>segments<sp/>for<sp/>each<sp/>track</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>fig<sp/>=<sp/>plt.figure()</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(num_segments):</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Create<sp/>a<sp/>color<sp/>map<sp/>corresponding<sp/>to<sp/>FSR<sp/>IDs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jet<sp/>=<sp/>cm<sp/>=<sp/>plt.get_cmap(</highlight><highlight class="stringliteral">&apos;jet&apos;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cNorm<sp/><sp/>=<sp/>colors.Normalize(vmin=0,<sp/>vmax=max(color_map))</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scalarMap<sp/>=<sp/>cmx.ScalarMappable(norm=cNorm)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>scalarMap.to_rgba(color_map[fsrs[i]<sp/>%<sp/>num_colors])</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plt.plot([x[i*2],<sp/>x[i*2+1]],<sp/>[y[i*2],<sp/>y[i*2+1]],<sp/>c=color)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>plt.xlim([x.min(),<sp/>x.max()])</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>plt.ylim([y.min(),<sp/>y.max()])</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>title<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;Segments<sp/>for<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>str(num_azim)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>angles<sp/>and<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>str(spacing)<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;<sp/>cm<sp/>spacing&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>plt.title(title)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>filename<sp/>=<sp/>directory<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;segments-&apos;</highlight><highlight class="normal"><sp/>+<sp/>str(num_azim)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;-angles-&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str(spacing)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;-spacing.png&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>fig.savefig(filename)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">##</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@brief<sp/>This<sp/>method<sp/>takes<sp/>in<sp/>a<sp/>geometry<sp/>object<sp/>and<sp/>plots<sp/>a<sp/>color-coded<sp/>2D<sp/>surface<sp/>#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot<sp/>representing<sp/>the<sp/>materials<sp/>in<sp/>the<sp/>geometry.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@details<sp/>The<sp/>geometry<sp/>object<sp/>must<sp/>be<sp/>initialized<sp/>with<sp/>materials,<sp/>cells,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>universes<sp/>and<sp/>lattices<sp/>before<sp/>being<sp/>passed<sp/>into<sp/>this<sp/>method.<sp/>A<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>may<sp/>invoke<sp/>this<sp/>function<sp/>from<sp/>an<sp/>OpenMOC<sp/>Python<sp/>file<sp/>as<sp/>follows:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openmoc.plotter.plotMaterials(my_geometry)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@endcode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@param<sp/>geometry<sp/>a<sp/>geometry<sp/>object<sp/>which<sp/>has<sp/>been<sp/>initialized<sp/>with<sp/>materials,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cells,<sp/>universes<sp/>and<sp/>lattices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@param<sp/>gridsize<sp/>an<sp/>optional<sp/>number<sp/>of<sp/>grid<sp/>cells<sp/>for<sp/>the<sp/>plot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceopenmoc_1_1plotter_1ad7120272536f7341576a6ca6b8d4f9dc" kindref="member" tooltip="This method takes in a geometry object and plots a color-coded 2D surface # plot representing the mat...">plotMaterials</ref>(geometry,<sp/>gridsize=250):</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">global</highlight><highlight class="normal"><sp/>subdirectory</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>directory<sp/>=<sp/>getOutputDirectory()<sp/>+<sp/>subdirectory</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>directory<sp/>if<sp/>it<sp/>does<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>os.path.exists(directory):</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.makedirs(directory)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Error<sp/>checking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;Geometry&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>str(type(geometry)):</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;ERROR&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Unable<sp/>to<sp/>plot<sp/>the<sp/>materials<sp/>since<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;input<sp/>was<sp/>not<sp/>a<sp/>geometry<sp/>class<sp/>object&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>isinstance(gridsize,<sp/>int):</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;ERROR&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Unable<sp/>to<sp/>plot<sp/>the<sp/>materials<sp/>since<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;since<sp/>the<sp/>gridsize<sp/>%s<sp/>is<sp/>not<sp/>an<sp/>integer&apos;</highlight><highlight class="normal">,<sp/>str(gridsize))</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>gridsize<sp/>&lt;=<sp/>0:</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;Error&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Unable<sp/>to<sp/>plot<sp/>the<sp/>materials<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;with<sp/>a<sp/>negative<sp/>gridsize<sp/>(%d)&apos;</highlight><highlight class="normal">,<sp/>gridsize)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;NORMAL&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Plotting<sp/>the<sp/>materials...&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Initialize<sp/>a<sp/>numpy<sp/>array<sp/>for<sp/>the<sp/>surface<sp/>colors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>surface<sp/>=<sp/>numpy.zeros((gridsize,<sp/>gridsize))</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Retrieve<sp/>the<sp/>bounding<sp/>box<sp/>for<sp/>the<sp/>geometry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>xmin<sp/>=<sp/>geometry.getXMin()</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>xmax<sp/>=<sp/>geometry.getXMax()</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>ymin<sp/>=<sp/>geometry.getYMin()</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>ymax<sp/>=<sp/>geometry.getYMax()</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Initialize<sp/>numpy<sp/>arrays<sp/>for<sp/>the<sp/>grid<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>xcoords<sp/>=<sp/>np.linspace(xmin,<sp/>xmax,<sp/>gridsize)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>ycoords<sp/>=<sp/>np.linspace(ymin,<sp/>ymax,<sp/>gridsize)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Find<sp/>the<sp/>material<sp/>IDs<sp/>for<sp/>each<sp/>grid<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(gridsize):</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(gridsize):</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>xcoords[i]</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>ycoords[j]</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point<sp/>=<sp/><ref refid="classLocalCoords" kindref="compound" tooltip="The localcoords represents a set of local coordinates on some level of nested universes making up the...">LocalCoords</ref>(x,<sp/>y)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point.setUniverse(0)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry.findCellContainingCoords(point)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsr_id<sp/>=<sp/>geometry.findFSRId(point)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>material_id<sp/>=<sp/>geometry.findCellContainingFSR(fsr_id).getMaterial()</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface[j][i]<sp/>=<sp/>color_map[material_id<sp/>%<sp/>num_colors]</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Plot<sp/>a<sp/>2D<sp/>color<sp/>map<sp/>of<sp/>the<sp/>materials</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>fig<sp/>=<sp/>plt.figure()</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>plt.pcolor(xcoords,<sp/>ycoords,<sp/>surface)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>plt.xlim([xmin,<sp/>xmax])</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>plt.ylim([ymin,<sp/>ymax])</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>plt.title(</highlight><highlight class="stringliteral">&apos;Materials&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>filename<sp/>=<sp/>directory<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;materials.png&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>fig.savefig(filename)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">##</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@brief<sp/>This<sp/>method<sp/>takes<sp/>in<sp/>a<sp/>geometry<sp/>object<sp/>and<sp/>plots<sp/>a<sp/>color-coded<sp/>2D<sp/>surface<sp/>#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot<sp/>representing<sp/>the<sp/>cells<sp/>in<sp/>the<sp/>geometry.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@details<sp/>The<sp/>geometry<sp/>object<sp/>must<sp/>be<sp/>initialized<sp/>with<sp/>materials,<sp/>cells,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>universes<sp/>and<sp/>lattices<sp/>before<sp/>being<sp/>passed<sp/>into<sp/>this<sp/>method.<sp/>A<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>may<sp/>invoke<sp/>this<sp/>function<sp/>from<sp/>an<sp/>OpenMOC<sp/>Python<sp/>file<sp/>as<sp/>follows:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openmoc.plotter.plotCells(my_geometry)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@endcode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@param<sp/>geometry<sp/>a<sp/>geometry<sp/>object<sp/>which<sp/>has<sp/>been<sp/>initialized<sp/>with<sp/>materials,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cells,<sp/>universes<sp/>and<sp/>lattices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@param<sp/>gridsize<sp/>an<sp/>optional<sp/>number<sp/>of<sp/>grid<sp/>cells<sp/>for<sp/>the<sp/>plot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceopenmoc_1_1plotter_1ae06bcd2b75c33dd4b97b4b203e0e5635" kindref="member" tooltip="This method takes in a geometry object and plots a color-coded 2D surface # plot representing the cel...">plotCells</ref>(geometry,<sp/>gridsize=250):</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">global</highlight><highlight class="normal"><sp/>subdirectory</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>directory<sp/>=<sp/>getOutputDirectory()<sp/>+<sp/>subdirectory</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>directory<sp/>if<sp/>it<sp/>does<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>os.path.exists(directory):</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.makedirs(directory)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Error<sp/>checking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;Geometry&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>str(type(geometry)):</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;ERROR&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Unable<sp/>to<sp/>plot<sp/>the<sp/>cells<sp/>since<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;input<sp/>was<sp/>not<sp/>a<sp/>geometry<sp/>class<sp/>object&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>isinstance(gridsize,<sp/>int):</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;ERROR&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Unable<sp/>to<sp/>plot<sp/>the<sp/>cells<sp/>since<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;since<sp/>the<sp/>gridsize<sp/>%s<sp/>is<sp/>not<sp/>an<sp/>integer&apos;</highlight><highlight class="normal">,<sp/>str(gridsize))</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>gridsize<sp/>&lt;=<sp/>0:</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;Error&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Unable<sp/>to<sp/>plot<sp/>the<sp/>cells<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;with<sp/>a<sp/>negative<sp/>gridsize<sp/>(%d)&apos;</highlight><highlight class="normal">,<sp/>gridsize)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;NORMAL&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Plotting<sp/>the<sp/>cells...&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Initialize<sp/>a<sp/>numpy<sp/>array<sp/>for<sp/>the<sp/>surface<sp/>colors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>surface<sp/>=<sp/>np.zeros((gridsize,<sp/>gridsize))</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Retrieve<sp/>the<sp/>bounding<sp/>box<sp/>for<sp/>the<sp/>geometry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>xmin<sp/>=<sp/>geometry.getXMin()</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>xmax<sp/>=<sp/>geometry.getXMax()</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>ymin<sp/>=<sp/>geometry.getYMin()</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>ymax<sp/>=<sp/>geometry.getYMax()</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Initialize<sp/>numpy<sp/>arrays<sp/>for<sp/>the<sp/>grid<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>xcoords<sp/>=<sp/>np.linspace(xmin,<sp/>xmax,<sp/>gridsize)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>ycoords<sp/>=<sp/>np.linspace(ymin,<sp/>ymax,<sp/>gridsize)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Find<sp/>the<sp/>cell<sp/>IDs<sp/>for<sp/>each<sp/>grid<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(gridsize):</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(gridsize):</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>xcoords[i]</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>ycoords[j]</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point<sp/>=<sp/><ref refid="classLocalCoords" kindref="compound" tooltip="The localcoords represents a set of local coordinates on some level of nested universes making up the...">LocalCoords</ref>(x,<sp/>y)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point.setUniverse(0)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry.findCellContainingCoords(point)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsr_id<sp/>=<sp/>geometry.findFSRId(point)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_id<sp/>=<sp/>geometry.findCellContainingFSR(fsr_id).getId()</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface[j][i]<sp/>=<sp/>color_map[cell_id<sp/>%<sp/>num_colors]</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Plot<sp/>a<sp/>2D<sp/>color<sp/>map<sp/>of<sp/>the<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>fig<sp/>=<sp/>plt.figure()</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>plt.pcolor(xcoords,<sp/>ycoords,<sp/>surface)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>plt.xlim([xmin,<sp/>xmax])</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>plt.ylim([ymin,<sp/>ymax])</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>plt.title(</highlight><highlight class="stringliteral">&apos;Cells&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>filename<sp/>=<sp/>directory<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;cells.png&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>fig.savefig(filename)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment">##</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@brief<sp/>This<sp/>method<sp/>takes<sp/>in<sp/>a<sp/>geometry<sp/>object<sp/>and<sp/>plots<sp/>a<sp/>color-coded<sp/>2D<sp/>surface<sp/>#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot<sp/>representing<sp/>the<sp/>flat<sp/>source<sp/>regions<sp/>in<sp/>the<sp/>geometry.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@details<sp/>The<sp/>geometry<sp/>object<sp/>must<sp/>be<sp/>initialized<sp/>with<sp/>materials,<sp/>cells,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>universes<sp/>and<sp/>lattices<sp/>before<sp/>being<sp/>passed<sp/>into<sp/>this<sp/>method.<sp/>A<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>may<sp/>invoke<sp/>this<sp/>function<sp/>from<sp/>an<sp/>OpenMOC<sp/>Python<sp/>file<sp/>as<sp/>follows:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openmoc.plotter.plotFlatSourceRegions(my_geometry)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@endcode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@param<sp/>geometry<sp/>a<sp/>geometry<sp/>object<sp/>which<sp/>has<sp/>been<sp/>initialized<sp/>with<sp/>materials,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cells,<sp/>universes<sp/>and<sp/>lattices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@param<sp/>gridsize<sp/>an<sp/>optional<sp/>number<sp/>of<sp/>grid<sp/>cells<sp/>for<sp/>the<sp/>plot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceopenmoc_1_1plotter_1aae32e62e2988ab7d5db716f2416496f2" kindref="member" tooltip="This method takes in a geometry object and plots a color-coded 2D surface # plot representing the fla...">plotFlatSourceRegions</ref>(geometry,<sp/>gridsize=250):</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">global</highlight><highlight class="normal"><sp/>subdirectory</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>directory<sp/>=<sp/>getOutputDirectory()<sp/>+<sp/>subdirectory</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>directory<sp/>if<sp/>it<sp/>does<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>os.path.exists(directory):</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.makedirs(directory)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Error<sp/>checking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;Geometry&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>str(type(geometry)):</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;ERROR&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Unable<sp/>to<sp/>plot<sp/>the<sp/>flat<sp/>source<sp/>regions<sp/>since<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;input<sp/>was<sp/>not<sp/>a<sp/>geometry<sp/>class<sp/>object&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>isinstance(gridsize,<sp/>int):</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;ERROR&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Unable<sp/>to<sp/>plot<sp/>the<sp/>flat<sp/>source<sp/>regions<sp/>since<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;since<sp/>the<sp/>gridsize<sp/>%s<sp/>is<sp/>not<sp/>an<sp/>integer&apos;</highlight><highlight class="normal">,<sp/>str(gridsize))</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>gridsize<sp/>&lt;=<sp/>0:</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;Error&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Unable<sp/>to<sp/>plot<sp/>the<sp/>flat<sp/>source<sp/>regions<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;with<sp/>a<sp/>negative<sp/>gridsize<sp/>(%d)&apos;</highlight><highlight class="normal">,<sp/>gridsize)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;NORMAL&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Plotting<sp/>the<sp/>flat<sp/>source<sp/>regions...&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Initialize<sp/>a<sp/>numpy<sp/>array<sp/>for<sp/>the<sp/>surface<sp/>colors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>surface<sp/>=<sp/>numpy.zeros((gridsize,<sp/>gridsize))</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Retrieve<sp/>the<sp/>bounding<sp/>box<sp/>for<sp/>the<sp/>geometry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>xmin<sp/>=<sp/>geometry.getXMin()</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>xmax<sp/>=<sp/>geometry.getXMax()</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>ymin<sp/>=<sp/>geometry.getYMin()</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>ymax<sp/>=<sp/>geometry.getYMax()</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Initialize<sp/>numpy<sp/>arrays<sp/>for<sp/>the<sp/>grid<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>xcoords<sp/>=<sp/>np.linspace(xmin,<sp/>xmax,<sp/>gridsize)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>ycoords<sp/>=<sp/>np.linspace(ymin,<sp/>ymax,<sp/>gridsize)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Find<sp/>the<sp/>flat<sp/>source<sp/>region<sp/>IDs<sp/>for<sp/>each<sp/>grid<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(gridsize):</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(gridsize):</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>xcoords[i]</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>ycoords[j]</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point<sp/>=<sp/><ref refid="classLocalCoords" kindref="compound" tooltip="The localcoords represents a set of local coordinates on some level of nested universes making up the...">LocalCoords</ref>(x,<sp/>y)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point.setUniverse(0)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry.findCellContainingCoords(point)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsr_id<sp/>=<sp/>geometry.findFSRId(point)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface[j][i]<sp/>=<sp/>color_map[fsr_id<sp/>%<sp/>num_colors]</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Plot<sp/>a<sp/>2D<sp/>color<sp/>map<sp/>of<sp/>the<sp/>flat<sp/>source<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>fig<sp/>=<sp/>plt.figure()</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>plt.pcolor(xcoords,<sp/>ycoords,<sp/>surface)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>plt.xlim([xmin,<sp/>xmax])</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>plt.ylim([ymin,<sp/>ymax])</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>plt.title(</highlight><highlight class="stringliteral">&apos;Flat<sp/>Source<sp/>Regions&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>filename<sp/>=<sp/>directory<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;flat-source-regions.png&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>fig.savefig(filename)</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">##</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@brief<sp/>This<sp/>method<sp/>takes<sp/>in<sp/>a<sp/>geometry<sp/>object<sp/>and<sp/>plots<sp/>a<sp/>color-coded<sp/>2D<sp/>surface<sp/>#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot<sp/>representing<sp/>the<sp/>flat<sp/>source<sp/>regions<sp/>in<sp/>the<sp/>geometry.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@details<sp/>The<sp/>geometry<sp/>object<sp/>must<sp/>be<sp/>initialized<sp/>with<sp/>materials,<sp/>cells,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>universes<sp/>and<sp/>lattices<sp/>before<sp/>being<sp/>passed<sp/>into<sp/>this<sp/>method.<sp/>A<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>may<sp/>invoke<sp/>this<sp/>function<sp/>from<sp/>an<sp/>OpenMOC<sp/>Python<sp/>file<sp/>as<sp/>follows:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openmoc.plotter.plotFlatSourceRegions(my_geometry)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@endcode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@param<sp/>geometry<sp/>a<sp/>geometry<sp/>object<sp/>which<sp/>has<sp/>been<sp/>initialized<sp/>with<sp/>materials,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cells,<sp/>universes<sp/>and<sp/>lattices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">#<sp/>@param<sp/>gridsize<sp/>an<sp/>optional<sp/>number<sp/>of<sp/>grid<sp/>cells<sp/>for<sp/>the<sp/>plot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceopenmoc_1_1plotter_1ac3fcbc9e21c9fa061f4b424c691c2216" kindref="member" tooltip="This method takes in a geometry object and plots a color-coded 2D surface # plot representing the fla...">plotFluxes</ref>(geometry,<sp/>solver,<sp/>energy_groups=[0],<sp/>gridsize=250):</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">global</highlight><highlight class="normal"><sp/>subdirectory</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>directory<sp/>=<sp/>getOutputDirectory()<sp/>+<sp/>subdirectory</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>directory<sp/>if<sp/>it<sp/>does<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>os.path.exists(directory):</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.makedirs(directory)</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Error<sp/>checking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;Geometry&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>str(type(geometry)):</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;ERROR&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Unable<sp/>to<sp/>plot<sp/>the<sp/>flat<sp/>source<sp/>region<sp/>scalar<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;flux<sp/>since<sp/>input<sp/>did<sp/>not<sp/>contain<sp/>a<sp/>geometry<sp/>class<sp/>object&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;Solver&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>str(type(solver)):</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;ERROR&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Unable<sp/>to<sp/>plot<sp/>the<sp/>flat<sp/>source<sp/>region<sp/>scalar<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;flux<sp/>since<sp/>input<sp/>did<sp/>not<sp/>contain<sp/>a<sp/>solver<sp/>class<sp/>object&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(energy_groups,<sp/>list):</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>group<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>energy_groups:</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>isinstance(group,<sp/>int):</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_print(</highlight><highlight class="stringliteral">&apos;ERROR&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Unable<sp/>to<sp/>plot<sp/>the<sp/>flat<sp/>source<sp/>region<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;scalar<sp/>flux<sp/>since<sp/>the<sp/>energy_groups<sp/>list<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;contains<sp/>%s<sp/>which<sp/>is<sp/>not<sp/>an<sp/>int&apos;</highlight><highlight class="normal">,<sp/>str(group))</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>group<sp/>&lt;=<sp/>0:</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_print(</highlight><highlight class="stringliteral">&apos;ERROR&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Unable<sp/>to<sp/>plot<sp/>the<sp/>flat<sp/>source<sp/>region<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;scalar<sp/>flux<sp/>since<sp/>the<sp/>energy_groups<sp/>list<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;contains<sp/>%d<sp/>which<sp/>is<sp/>less<sp/>than<sp/>the<sp/>index<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;for<sp/>all<sp/>energy<sp/>groups&apos;</highlight><highlight class="normal">,<sp/>str(group))</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>group<sp/>&gt;<sp/>geometry.getNumEnergyGroups():</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;ERROR&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Unable<sp/>to<sp/>plot<sp/>the<sp/>flat<sp/>source<sp/>region<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;scalar<sp/>flux<sp/>since<sp/>the<sp/>energy_groups<sp/>list<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;contains<sp/>%d<sp/>which<sp/>is<sp/>greater<sp/>than<sp/>the<sp/>index<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;for<sp/>all<sp/>energy<sp/>groups&apos;</highlight><highlight class="normal">,<sp/>str(group))</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>isinstance(energy_groups,<sp/>int):</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>energy_groups<sp/>&lt;=<sp/>0:</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_print(</highlight><highlight class="stringliteral">&apos;ERROR&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Unable<sp/>to<sp/>plot<sp/>the<sp/>flat<sp/>source<sp/>region<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;scalar<sp/>flux<sp/>since<sp/>the<sp/>energy_groups<sp/>argument<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;contains<sp/>%d<sp/>which<sp/>is<sp/>less<sp/>than<sp/>the<sp/>index<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;for<sp/>all<sp/>energy<sp/>groups&apos;</highlight><highlight class="normal">,<sp/>str(energy_groups))</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>energy_groups<sp/>&gt;<sp/>geometry.getNumEnergyGroups():</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;ERROR&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Unable<sp/>to<sp/>plot<sp/>the<sp/>flat<sp/>source<sp/>region<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;scalar<sp/>flux<sp/>since<sp/>the<sp/>energy_groups<sp/>argument<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;contains<sp/>%d<sp/>which<sp/>is<sp/>greater<sp/>than<sp/>the<sp/>index<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;for<sp/>all<sp/>energy<sp/>groups&apos;</highlight><highlight class="normal">,<sp/>str(energy_groups))</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;ERROR&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Unable<sp/>to<sp/>plot<sp/>the<sp/>flat<sp/>source<sp/>region<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;scalar<sp/>flux<sp/>since<sp/>the<sp/>energy_groups<sp/>argument<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;is<sp/>%s<sp/>which<sp/>is<sp/>not<sp/>an<sp/>energy<sp/>group<sp/>index<sp/>or<sp/>a<sp/>list<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;of<sp/>energy<sp/>group<sp/>indices&apos;</highlight><highlight class="normal">,<sp/>str(energy_groups))</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>isinstance(gridsize,<sp/>int):</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;ERROR&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Unable<sp/>to<sp/>plot<sp/>the<sp/>flat<sp/>source<sp/>region<sp/>scalar<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;flux<sp/>since<sp/>since<sp/>the<sp/>gridsize<sp/>%s<sp/>is<sp/>not<sp/>an<sp/>integer&apos;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str(gridsize))</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>isinstance(energy_groups,<sp/>(int,<sp/>list)):</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;ERROR&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Unable<sp/>to<sp/>plot<sp/>the<sp/>flat<sp/>source<sp/>region<sp/>scalar<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;flux<sp/>since<sp/>the<sp/>energy_groups<sp/>is<sp/>not<sp/>an<sp/>int<sp/>or<sp/>a<sp/>list&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>gridsize<sp/>&lt;=<sp/>0:</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;Error&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Unable<sp/>to<sp/>plot<sp/>the<sp/>flat<sp/>source<sp/>regions<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>\</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;with<sp/>a<sp/>negative<sp/>gridsize<sp/>(%d)&apos;</highlight><highlight class="normal">,<sp/>gridsize)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopenmoc_1_1log_1a0bfafaa584b4e7156cce255cb70943e5" kindref="member" tooltip="Function to print a log message to the screen.">py_printf</ref>(</highlight><highlight class="stringliteral">&apos;NORMAL&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Plotting<sp/>the<sp/>flat<sp/>source<sp/>region<sp/>scalar<sp/>fluxes...&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>isinstance(energy_groups,<sp/>list):</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>energy_groups<sp/>=<sp/>[energy_groups]</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Initialize<sp/>a<sp/>numpy<sp/>array<sp/>for<sp/>the<sp/>surface<sp/>colors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>fluxes<sp/>=<sp/>numpy.zeros((gridsize,<sp/>gridsize))</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Retrieve<sp/>the<sp/>bounding<sp/>box<sp/>for<sp/>the<sp/>geometry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>xmin<sp/>=<sp/>geometry.getXMin()</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>xmax<sp/>=<sp/>geometry.getXMax()</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>ymin<sp/>=<sp/>geometry.getYMin()</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>ymax<sp/>=<sp/>geometry.getYMax()</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Initialize<sp/>numpy<sp/>arrays<sp/>for<sp/>the<sp/>grid<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>xcoords<sp/>=<sp/>np.linspace(xmin,<sp/>xmax,<sp/>gridsize)</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>ycoords<sp/>=<sp/>np.linspace(ymin,<sp/>ymax,<sp/>gridsize)</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>group<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>energy_groups:</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Find<sp/>the<sp/>flat<sp/>source<sp/>region<sp/>IDs<sp/>for<sp/>each<sp/>grid<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(gridsize):</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(gridsize):</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>xcoords[i]</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>ycoords[j]</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point<sp/>=<sp/><ref refid="classLocalCoords" kindref="compound" tooltip="The localcoords represents a set of local coordinates on some level of nested universes making up the...">LocalCoords</ref>(x,<sp/>y)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point.setUniverse(0)</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry.findCellContainingCoords(point)</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsr_id<sp/>=<sp/>geometry.findFSRId(point)</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flux<sp/>=<sp/>solver.getFSRScalarFlux(fsr_id,<sp/>group)</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fluxes[j][i]<sp/>=<sp/>flux</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Plot<sp/>a<sp/>2D<sp/>color<sp/>map<sp/>of<sp/>the<sp/>flat<sp/>source<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fig<sp/>=<sp/>plt.figure()</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plt.pcolor(xcoords,<sp/>ycoords,<sp/>fluxes)</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plt.colorbar()</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plt.xlim([xmin,<sp/>xmax])</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plt.ylim([ymin,<sp/>ymax])</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plt.title(</highlight><highlight class="stringliteral">&apos;Flat<sp/>Source<sp/>Region<sp/>Scalar<sp/>Flux<sp/>in<sp/>Group<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>str(group))</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename<sp/>=<sp/>directory<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;fsr-flux-group-&apos;</highlight><highlight class="normal"><sp/>+<sp/>str(group)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;-.png&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fig.savefig(filename)</highlight></codeline>
    </programlisting>
    <location file="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/openmoc/plotter.py"/>
  </compounddef>
</doxygen>
