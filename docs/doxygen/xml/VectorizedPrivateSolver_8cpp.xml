<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="VectorizedPrivateSolver_8cpp" kind="file">
    <compoundname>VectorizedPrivateSolver.cpp</compoundname>
    <includes refid="VectorizedPrivateSolver_8h" local="yes">VectorizedPrivateSolver.h</includes>
    <incdepgraph>
      <node id="127">
        <label>VectorizedPrivateSolver.h</label>
        <link refid="VectorizedPrivateSolver_8h"/>
      </node>
      <node id="126">
        <label>/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/VectorizedPrivateSolver.cpp</label>
        <link refid="VectorizedPrivateSolver.cpp"/>
        <childnode refid="127" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="VectorizedPrivateSolver_8h" kindref="compound" tooltip="The VectorizedPrivateSolver class.">VectorizedPrivateSolver.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><ref refid="classVectorizedPrivateSolver_1a1de9e8c8035a2a241e76942937d09428" kindref="member" tooltip="Constructor initializes empty arrays for source, flux, etc.">VectorizedPrivateSolver::VectorizedPrivateSolver</ref>(<ref refid="classGeometry" kindref="compound" tooltip="The master class containing references to all geometry-related objects (surfaces, cells...">Geometry</ref>*<sp/>geometry,<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTrackGenerator" kindref="compound" tooltip="The track generator is dedicated to generating tracks which cyclically wrap across the geometry...">TrackGenerator</ref>*<sp/>track_generator)<sp/>:</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVectorizedSolver" kindref="compound" tooltip="This is a subclass of the CPUSolver class which uses memory-aligned data structures and Intel&amp;#39;s auto-...">VectorizedSolver</ref>(geometry,<sp/>track_generator)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ThreadPrivateSolver_8h_1a96098a8f0ada349f6b315d7b1c45472f" kindref="member">_thread_flux</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><ref refid="classVectorizedPrivateSolver_1a50b87b272a9188c0de0d5a09472d7c51" kindref="member" tooltip="Destructor deletes arrays of boundary angular flux for all tracks, scalar flux and source for each fl...">VectorizedPrivateSolver::~VectorizedPrivateSolver</ref>()<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_thread_flux<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(_thread_flux);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>_thread_flux<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VectorizedPrivateSolver::flattenFSRFluxes(FP_PRECISION<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCPUSolver_1a154cbd82754abdadb2ca57068ec12102" kindref="member" tooltip="Set the scalar flux for each energy group inside each flat source region to a constant value...">CPUSolver::flattenFSRFluxes</ref>(value);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Flatten<sp/>the<sp/>thread<sp/>private<sp/>flat<sp/>source<sp/>region<sp/>scalar<sp/>flux<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>schedule(guided)</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid=0;<sp/>tid<sp/>&lt;<sp/><ref refid="classCPUSolver_1aae4771f6912d3ea1a3a10537a791b28e" kindref="member">_num_threads</ref>;<sp/>tid++)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r=0;<sp/>r<sp/>&lt;<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=0;<sp/>e<sp/>&lt;<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;<sp/>e++)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_thread_flux(tid,r,e)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VectorizedPrivateSolver::initializeFluxArrays()<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVectorizedSolver_1a6d5bac107495fe429839826859b7dfa1" kindref="member" tooltip="Allocates memory for track boundary angular fluxes and flat source region scalar fluxes and leakages...">VectorizedSolver::initializeFluxArrays</ref>();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Delete<sp/>old<sp/>flux<sp/>arrays<sp/>if<sp/>they<sp/>exist<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_thread_flux<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(_thread_flux);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>aligned<sp/>memory<sp/>for<sp/>all<sp/>flux<sp/>arrays<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>_num_threads<sp/>*<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref><sp/>*<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(FP_PRECISION);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>_thread_flux<sp/>=<sp/>(FP_PRECISION*)_mm_malloc(size,<sp/>VEC_ALIGNMENT);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::exception<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>memory<sp/>for<sp/>the<sp/>solver&apos;s<sp/>fluxes.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Backtrace:%s&quot;</highlight><highlight class="normal">,<sp/>e.what());</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VectorizedPrivateSolver::scalarFluxTally(<ref refid="structsegment" kindref="compound" tooltip="A segment represents a line segment within a single flat source region along a track.">segment</ref>*<sp/>curr_segment,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/><ref refid="CPUSolver_8h_1a2143506339a36528e1c9d7e27501897f" kindref="member">track_flux</ref>,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/>fsr_flux){</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/>omp_get_thread_num();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fsr_id<sp/>=<sp/>curr_segment-&gt;<ref refid="structsegment_1ad4185c78e4df6c12a07392dfee367706" kindref="member">_region_id</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>length<sp/>=<sp/>curr_segment-&gt;<ref refid="structsegment_1a50c5a635c531d34ad3435ebcc3b6f593" kindref="member">_length</ref>;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>sigma_t<sp/>=<sp/>curr_segment-&gt;<ref refid="structsegment_1a0f8836fedfacd554b9fd650e7e89a4c0" kindref="member">_material</ref>-&gt;<ref refid="classMaterial_1a79a0abbbfb65002dd7e59e6e1d871faa" kindref="member" tooltip="Return the array of the material&amp;#39;s total cross-sections.">getSigmaT</ref>();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>average<sp/>flux<sp/>along<sp/>this<sp/>segment<sp/>in<sp/>the<sp/>flat<sp/>source<sp/>region<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>psibar;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/><ref refid="VectorizedSolver_8h_1a4d1a5b2de2f5853d926488cdf1dc1e55" kindref="member">exponentials</ref><sp/>=<sp/>&amp;<ref refid="classVectorizedSolver_1a5a9623683961869eef3a171c41fb6f81" kindref="member">_thread_exponentials</ref>[tid*<ref refid="classSolver_1a84ce3dbf9e3c4a86773161e7c92b1da1" kindref="member">_polar_times_groups</ref>];</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVectorizedSolver_1abba9186ad669a2eed70fd8458666eab2" kindref="member" tooltip="Computes an array of the exponentials in the transport equation, , for each energy group and polar an...">computeExponentials</ref>(curr_segment,<sp/>exponentials);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Tally<sp/>the<sp/>flux<sp/>contribution<sp/>from<sp/>segment<sp/>to<sp/>FSR&apos;s<sp/>scalar<sp/>flux<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>polar<sp/>angles<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0;<sp/>p<sp/>&lt;<sp/><ref refid="classSolver_1a49cc179a9f47c5ca5f6d19c954d680ad" kindref="member">_num_polar</ref>;<sp/>p++){</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>each<sp/>energy<sp/>group<sp/>vector<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v=0;<sp/>v<sp/>&lt;<sp/><ref refid="classVectorizedSolver_1adff1b20b7ea5cb791119fae7ee83fc1f" kindref="member">_num_vector_lengths</ref>;<sp/>v++)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>energy<sp/>groups<sp/>within<sp/>this<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd<sp/>vectorlength(VEC_LENGTH)<sp/>private(psibar)</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=v*VEC_LENGTH;<sp/>e<sp/>&lt;<sp/>(v+1)*VEC_LENGTH;<sp/>e++)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psibar<sp/>=<sp/>(<ref refid="CPUSolver_8h_1a2143506339a36528e1c9d7e27501897f" kindref="member">track_flux</ref>(p,e)<sp/>-<sp/><ref refid="classSolver_1aff69bb3f354f5c598e1117e2a3515f1b" kindref="member">_reduced_source</ref>(fsr_id,e))<sp/>*<sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="VectorizedSolver_8h_1a4d1a5b2de2f5853d926488cdf1dc1e55" kindref="member">exponentials</ref>(p,e);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsr_flux[e]<sp/>+=<sp/>psibar<sp/>*<sp/><ref refid="classSolver_1a8407ebcfee31a54a67e6d5ca2e3d4e6b" kindref="member">_polar_weights</ref>[p];</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CPUSolver_8h_1a2143506339a36528e1c9d7e27501897f" kindref="member">track_flux</ref>(p,e)<sp/>-=<sp/>psibar;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VectorizedPrivateSolver::transportSweep()<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fsr_id;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTrack" kindref="compound" tooltip="A track represents a characteristic line across the geometry.">Track</ref>*<sp/>curr_track;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_segments;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsegment" kindref="compound" tooltip="A segment represents a line segment within a single flat source region along a track.">segment</ref>*<sp/>curr_segment;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsegment" kindref="compound" tooltip="A segment represents a line segment within a single flat source region along a track.">segment</ref>*<sp/>segments;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/><ref refid="CPUSolver_8h_1a2143506339a36528e1c9d7e27501897f" kindref="member">track_flux</ref>;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a0593585da9181e972974c1274d8f2b4f" kindref="member">DEBUG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Transport<sp/>sweep<sp/>with<sp/>%d<sp/>OpenMP<sp/>threads&quot;</highlight><highlight class="normal">,<sp/>_num_threads);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>flux<sp/>in<sp/>each<sp/>region<sp/>to<sp/>zero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>flattenFSRFluxes(0.0);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>azimuthal<sp/>angle<sp/>halfspaces<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>2;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>minimum<sp/>and<sp/>maximum<sp/>track<sp/>IDs<sp/>corresponding<sp/>to<sp/></highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>this<sp/>azimuthal<sp/>angular<sp/>halfspace<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min<sp/>=<sp/>i<sp/>*<sp/>(<ref refid="classSolver_1a817518832fb051823de9e8855319f02e" kindref="member">_tot_num_tracks</ref><sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>(i<sp/>+<sp/>1)<sp/>*<sp/>(<ref refid="classSolver_1a817518832fb051823de9e8855319f02e" kindref="member">_tot_num_tracks</ref><sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>each<sp/>thread<sp/>within<sp/>this<sp/>azimuthal<sp/>angle<sp/>halfspace<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>private(tid,<sp/>fsr_id,<sp/>curr_track,<sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>num_segments,<sp/>segments,<sp/>curr_segment,<sp/>track_flux)<sp/>schedule(guided)</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>track_id=min;<sp/>track_id<sp/>&lt;<sp/>max;<sp/>track_id++)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tid<sp/>=<sp/>omp_get_thread_num();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>local<sp/>pointers<sp/>to<sp/>important<sp/>data<sp/>structures<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_track<sp/>=<sp/><ref refid="classSolver_1a775ed41fc1268312c8fb25ec994e1351" kindref="member">_tracks</ref>[track_id];</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_segments<sp/>=<sp/>curr_track-&gt;<ref refid="classTrack_1a034893295ac06eed35aac0c7ed172419" kindref="member" tooltip="Return the number of segments along this track.">getNumSegments</ref>();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segments<sp/>=<sp/>curr_track-&gt;<ref refid="classTrack_1a796efa8dc12ef0f1073ba264f4074380" kindref="member" tooltip="Returns a vector of pointers to the track&amp;#39;s segments.">getSegments</ref>();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>track_flux<sp/>=<sp/>&amp;<ref refid="classSolver_1adcfcfe1758affc74780907584fc7beaf" kindref="member">_boundary_flux</ref>(track_id,0,0,0);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>each<sp/>segment<sp/>in<sp/>forward<sp/>direction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s=0;<sp/>s<sp/>&lt;<sp/>num_segments;<sp/>s++)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_segment<sp/>=<sp/>&amp;segments[s];</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsr_id<sp/>=<sp/>curr_segment-&gt;<ref refid="structsegment_1ad4185c78e4df6c12a07392dfee367706" kindref="member">_region_id</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scalarFluxTally(curr_segment,<sp/>track_flux,<sp/></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;_thread_flux(tid,fsr_id,0));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Transfer<sp/>flux<sp/>to<sp/>outgoing<sp/>track<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classVectorizedSolver_1a8312a8ee4f2b34ae52fc7a21c7085bfd" kindref="member" tooltip="Updates the boundary flux for a track given boundary conditions.">transferBoundaryFlux</ref>(track_id,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>track_flux);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>each<sp/>segment<sp/>in<sp/>reverse<sp/>direction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>track_flux<sp/>+=<sp/><ref refid="classSolver_1a84ce3dbf9e3c4a86773161e7c92b1da1" kindref="member">_polar_times_groups</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s=num_segments-1;<sp/>s<sp/>&gt;<sp/>-1;<sp/>s--)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_segment<sp/>=<sp/>&amp;segments[s];</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsr_id<sp/>=<sp/>curr_segment-&gt;<ref refid="structsegment_1ad4185c78e4df6c12a07392dfee367706" kindref="member">_region_id</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scalarFluxTally(curr_segment,<sp/>track_flux,<sp/></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;_thread_flux(tid,fsr_id,0));</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Transfer<sp/>flux<sp/>to<sp/>outgoing<sp/>track<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classVectorizedSolver_1a8312a8ee4f2b34ae52fc7a21c7085bfd" kindref="member" tooltip="Updates the boundary flux for a track given boundary conditions.">transferBoundaryFlux</ref>(track_id,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>track_flux);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>reduceThreadScalarFluxes();</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VectorizedPrivateSolver::reduceThreadScalarFluxes()<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid=0;<sp/>tid<sp/>&lt;<sp/><ref refid="classCPUSolver_1aae4771f6912d3ea1a3a10537a791b28e" kindref="member">_num_threads</ref>;<sp/>tid++)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r=0;<sp/>r<sp/>&lt;<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=0;<sp/>e<sp/>&lt;<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;<sp/>e++)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(r,e)<sp/>+=<sp/>_thread_flux(tid,r,e);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/VectorizedPrivateSolver.cpp"/>
  </compounddef>
</doxygen>
