<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="Surface_8cpp" kind="file">
    <compoundname>Surface.cpp</compoundname>
    <includes refid="Surface_8h" local="yes">Surface.h</includes>
    <incdepgraph>
      <node id="96">
        <label>/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/Surface.cpp</label>
        <link refid="Surface.cpp"/>
        <childnode refid="97" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>Surface.h</label>
        <link refid="Surface_8h"/>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="Surface_8cpp_1a11044d85abecefe501d482ef2d7265af" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int auto_id</definition>
        <argsstring></argsstring>
        <name>auto_id</name>
        <initializer> 10000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/Surface.cpp" line="5" bodyfile="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/Surface.cpp" bodystart="5" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="Surface_8cpp_1aa0ccb834fb6c557e9713707f95ee10f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int surf_id</definition>
        <argsstring>()</argsstring>
        <name>surf_id</name>
        <briefdescription>
<para>Returns an auto-generated unique surface ID. </para>        </briefdescription>
        <detaileddescription>
<para>This method is intended as a utility mehtod for user&apos;s writing OpenMOC input files. The method makes use of a static surface ID which is incremented each time the method is called to enable unique generation of monotonically increasing IDs. The method&apos;s first ID begins at 10000. Hence, user-defined surface IDs greater than or equal to 10000 is prohibited. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/Surface.cpp" line="16" bodyfile="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/Surface.cpp" bodystart="16" bodyend="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Surface_8h" kindref="compound">Surface.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classSurface_1a259bc52e2a2788727593176a8896754e" kindref="member">Surface::_n</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>auto_id<sp/>=<sp/>10000;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>surf_id()<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>auto_id;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>auto_id++;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><ref refid="classSurface_1ad29d02e18bad0fe49e5a18d9f0cab7a2" kindref="member" tooltip="Constructor assigns unique ID and user-defined ID for a surface.">Surface::Surface</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>user<sp/>did<sp/>not<sp/>define<sp/>an<sp/>optional<sp/>ID,<sp/>create<sp/>one<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSurface_1a4c1bcbdba5c4e1e8772b4d4b28f95e39" kindref="member">_id</ref><sp/>=<sp/>surf_id();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;=<sp/>surf_id())</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>set<sp/>the<sp/>ID<sp/>of<sp/>a<sp/>surface<sp/>to<sp/>%d<sp/>since<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;surface<sp/>IDs<sp/>greater<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>10000<sp/>is<sp/>probibited<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;by<sp/>OpenMOC.&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>the<sp/>user-defined<sp/>ID<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSurface_1a4c1bcbdba5c4e1e8772b4d4b28f95e39" kindref="member">_id</ref><sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSurface_1a8995d86060c1a792988c707abbb56ea8" kindref="member">_uid</ref><sp/>=<sp/><ref refid="classSurface_1a259bc52e2a2788727593176a8896754e" kindref="member">_n</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSurface_1a259bc52e2a2788727593176a8896754e" kindref="member">_n</ref>++;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSurface_1a73ff438f865a0694735877998dce0d91" kindref="member">_boundary_type</ref><sp/>=<sp/><ref refid="Surface_8h_1a94f2bdaf8e1769faec72dbd9e7486341a0a567d852cec14885cd940816395a13d" kindref="member">BOUNDARY_NONE</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="classSurface_1a89de75c95cb550d432f3ea4ed1429db0" kindref="member" tooltip="Destructor.">Surface::~Surface</ref>()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classSurface_1a1b8e7a0a79ee5b21ad5006ec7a1380a5" kindref="member" tooltip="Return the surface&amp;#39;s unique ID.">Surface::getUid</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSurface_1a8995d86060c1a792988c707abbb56ea8" kindref="member">_uid</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classSurface_1a77ba5d7532f411134107c777861d23b2" kindref="member" tooltip="Return the surface&amp;#39;s user-defined id.">Surface::getId</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSurface_1a4c1bcbdba5c4e1e8772b4d4b28f95e39" kindref="member">_id</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><ref refid="Surface_8h_1a669341e8f044e9051db22e680c1b81df" kindref="member" tooltip="The types of surfaces supported by OpenMOC.">surfaceType</ref><sp/><ref refid="classSurface_1a0e9228606069f0540ba43960ca192327" kindref="member" tooltip="Return the type of surface (ie, XPLANE, CIRCLE, etc).">Surface::getSurfaceType</ref>()<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSurface_1a2b8655eb5a953ea4b45abe5fab7831d0" kindref="member">_surface_type</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><ref refid="Surface_8h_1a94f2bdaf8e1769faec72dbd9e7486341" kindref="member" tooltip="The types of boundary conditions supported by OpenMOC for surfaces.">boundaryType</ref><sp/><ref refid="classSurface_1afa3ef1b6a8b18d04240ee1a3bc908780" kindref="member" tooltip="Returns the type of boundary conditions for this surface (REFLECTIVE, VACUUM or BOUNDARY_NONE)">Surface::getBoundaryType</ref>(){</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSurface_1a73ff438f865a0694735877998dce0d91" kindref="member">_boundary_type</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classSurface_1af8921636e9779854a377f412817c3a32" kindref="member" tooltip="Sets the boundary condition type (ie, VACUUM or REFLECTIVE) for this surface.">Surface::setBoundaryType</ref>(<ref refid="Surface_8h_1a94f2bdaf8e1769faec72dbd9e7486341" kindref="member" tooltip="The types of boundary conditions supported by OpenMOC for surfaces.">boundaryType</ref><sp/>boundary_type)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSurface_1a73ff438f865a0694735877998dce0d91" kindref="member">_boundary_type</ref><sp/>=<sp/>boundary_type;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classSurface_1ad996b11e3af07e6dea8081cb11ccfe0c" kindref="member" tooltip="Return true or false if a point is on or off of a surface.">Surface::isPointOnSurface</ref>(<ref refid="classPoint" kindref="compound" tooltip="Class to represent a 2D point in space.">Point</ref>*<sp/>point)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Uses<sp/>a<sp/>threshold<sp/>to<sp/>determine<sp/>whether<sp/>the<sp/>point<sp/>is<sp/>on<sp/>the<sp/>surface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(<ref refid="classSurface_1a2e0aaef635a7392806d27fb4999a9168" kindref="member" tooltip="Evaluate a point using the plane&amp;#39;s surface&amp;#39;s potential equation.">evaluate</ref>(point))<sp/>&lt;<sp/><ref refid="Surface_8h_1a5ff2a7fbf6ba25f47f298c79f39dc4f8" kindref="member">ON_SURFACE_THRESH</ref>)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classSurface_1a1263b1b61154ed6f75e7079a5832d853" kindref="member" tooltip="Return true or false if a localcoord is on or off of a surface.">Surface::isCoordOnSurface</ref>(<ref refid="classLocalCoords" kindref="compound" tooltip="The localcoords represents a set of local coordinates on some level of nested universes making up the...">LocalCoords</ref>*<sp/>coord)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSurface_1ad996b11e3af07e6dea8081cb11ccfe0c" kindref="member" tooltip="Return true or false if a point is on or off of a surface.">isPointOnSurface</ref>(coord-&gt;<ref refid="classLocalCoords_1aff39b0f4a6cd5de5347ab154000d349b" kindref="member" tooltip="Returns a pointer to the point containing the coordinates for this localcoord.">getPoint</ref>());</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><ref refid="classPlane_1aa3494ba48672b175bb780ef18339d7f7" kindref="member" tooltip="Constructor.">Plane::Plane</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C,<sp/></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">):<sp/></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSurface" kindref="compound" tooltip="Represents a general surface in the 2D xy-plane.">Surface</ref>(id)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_surface_type<sp/>=<sp/><ref refid="Surface_8h_1a669341e8f044e9051db22e680c1b81dfa67572d1492c84d8d417b61e864f13f24" kindref="member">PLANE</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_A<sp/>=<sp/>A;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_B<sp/>=<sp/>B;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_C<sp/>=<sp/>C;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classPlane_1a39fb25d54b2b752f1598c20e2e889679" kindref="member" tooltip="Returns the minimum x value of -INFINITY on this surface.">Plane::getXMin</ref>(){</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Plane::getXMin()<sp/>not<sp/>yet<sp/>implemented&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classPlane_1a32318a4525e6e9224602be52c89972f1" kindref="member" tooltip="Returns the maximum x value of INFINITY on this surface.">Plane::getXMax</ref>(){</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Plane::getXMax()<sp/>not<sp/>yet<sp/>implemented&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classPlane_1a70c9986c329d96eeaf6f2f0239f54706" kindref="member" tooltip="Returns the minimum y value of -INFINITY on this surface.">Plane::getYMin</ref>(){</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Plane::getYMin<sp/>not<sp/>yet<sp/>implemented&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classPlane_1a79d802de37e2b43b689c69dd05b721ff" kindref="member" tooltip="Returns the maximum y value of INFINITY on this surface.">Plane::getYMax</ref>(){</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Plane::getYMax<sp/>not<sp/>yet<sp/>implemented&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classPlane_1a6e1b304a38f0c6d6f7dc985d548e0304" kindref="member" tooltip="Finds the intersection point with this plane from a given point and trajectory defined by an angle...">Plane::intersection</ref>(<ref refid="classPoint" kindref="compound" tooltip="Class to represent a 2D point in space.">Point</ref>*<sp/>point,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle,<sp/><ref refid="classPoint" kindref="compound" tooltip="Class to represent a 2D point in space.">Point</ref>*<sp/>points)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0<sp/>=<sp/>point-&gt;<ref refid="classPoint_1af52a20a376f8f31e87658837565d3812" kindref="member" tooltip="Returns this point&amp;#39;s x-coordinate.">getX</ref>();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y0<sp/>=<sp/>point-&gt;<ref refid="classPoint_1aac5008459bf0e0053ce744a69187bae7" kindref="member" tooltip="Returns this point&amp;#39;s y-coordinate.">getY</ref>();</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>intersections<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xcurr,<sp/>ycurr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>coordinates<sp/>of<sp/>current<sp/>intersection<sp/>point<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>track<sp/>is<sp/>vertical<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fabs(angle<sp/>-<sp/>(M_PI<sp/>/<sp/>2)))<sp/>&lt;<sp/>1.0e-10)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>plane<sp/>is<sp/>also<sp/>vertical<sp/>=&gt;<sp/>no<sp/>intersections<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classPlane_1a2aac5aa1b6e726918a1afc87269e51f4" kindref="member">_B</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>plane<sp/>is<sp/>not<sp/>vertical<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xcurr<sp/>=<sp/>x0;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ycurr<sp/>=<sp/>(-<ref refid="classPlane_1afd0aae8ff683f84d286e975e856df3ef" kindref="member">_A</ref><sp/>*<sp/>x0<sp/>-<sp/><ref refid="classPlane_1a4797228fd9249fbe9f353a15e110b06c" kindref="member">_C</ref>)<sp/>/<sp/><ref refid="classPlane_1a2aac5aa1b6e726918a1afc87269e51f4" kindref="member">_B</ref>;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points-&gt;<ref refid="classPoint_1a21046f7efa6623eb78ae1ffc46b1820a" kindref="member" tooltip="Initializes a point with two-dimensional coordinates.">setCoords</ref>(xcurr,<sp/>ycurr);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>that<sp/>point<sp/>is<sp/>in<sp/>same<sp/>direction<sp/>as<sp/>angle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(angle<sp/>&lt;<sp/>M_PI<sp/>&amp;&amp;<sp/>ycurr<sp/>&gt;<sp/>y0)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num++;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(angle<sp/>&gt;<sp/>M_PI<sp/>&amp;&amp;<sp/>ycurr<sp/>&lt;<sp/>y0)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num++;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>track<sp/>isn&apos;t<sp/>vertical<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>sin(angle)<sp/>/<sp/>cos(angle);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>plane<sp/>and<sp/>track<sp/>are<sp/>parallel,<sp/>no<sp/>intersections<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(-<ref refid="classPlane_1afd0aae8ff683f84d286e975e856df3ef" kindref="member">_A</ref>/<ref refid="classPlane_1a2aac5aa1b6e726918a1afc87269e51f4" kindref="member">_B</ref><sp/>-<sp/>m)<sp/>&lt;<sp/>1e-11<sp/>&amp;&amp;<sp/><ref refid="classPlane_1a2aac5aa1b6e726918a1afc87269e51f4" kindref="member">_B</ref><sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xcurr<sp/>=<sp/>-(<ref refid="classPlane_1a2aac5aa1b6e726918a1afc87269e51f4" kindref="member">_B</ref><sp/>*<sp/>(y0<sp/>-<sp/>m<sp/>*<sp/>x0)<sp/>+<sp/><ref refid="classPlane_1a4797228fd9249fbe9f353a15e110b06c" kindref="member">_C</ref>)<sp/>/<sp/>(<ref refid="classPlane_1afd0aae8ff683f84d286e975e856df3ef" kindref="member">_A</ref><sp/>+<sp/><ref refid="classPlane_1a2aac5aa1b6e726918a1afc87269e51f4" kindref="member">_B</ref><sp/>*<sp/>m);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ycurr<sp/>=<sp/>y0<sp/>+<sp/>m<sp/>*<sp/>(xcurr<sp/>-<sp/>x0);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points-&gt;<ref refid="classPoint_1a21046f7efa6623eb78ae1ffc46b1820a" kindref="member" tooltip="Initializes a point with two-dimensional coordinates.">setCoords</ref>(xcurr,<sp/>ycurr);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(angle<sp/>&lt;<sp/>M_PI<sp/>&amp;&amp;<sp/>ycurr<sp/>&gt;<sp/>y0)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num++;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(angle<sp/>&gt;<sp/>M_PI<sp/>&amp;&amp;<sp/>ycurr<sp/>&lt;<sp/>y0)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num++;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">std::string<sp/><ref refid="classPlane_1ae953389291ab7fff7a1745c86977a3ae" kindref="member" tooltip="Converts this plane&amp;#39;s attributes to a character array.">Plane::toString</ref>()<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>string;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Surface<sp/>id<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classSurface_1a4c1bcbdba5c4e1e8772b4d4b28f95e39" kindref="member">_id</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>type<sp/>=<sp/>PLANE<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>A<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="classPlane_1afd0aae8ff683f84d286e975e856df3ef" kindref="member">_A</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>B<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classPlane_1a2aac5aa1b6e726918a1afc87269e51f4" kindref="member">_B</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>C<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classPlane_1a4797228fd9249fbe9f353a15e110b06c" kindref="member">_C</ref>;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.str();</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classPlane_1a1979f3908ae8fa3dd780f0f583591da3" kindref="member" tooltip="Prints a string representation of all of the plane&amp;#39;s objects to the console.">Plane::printString</ref>()<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a7186ecefe792fdae9fec0a42f105ad6b" kindref="member">RESULT</ref>,<sp/><ref refid="classPlane_1ae953389291ab7fff7a1745c86977a3ae" kindref="member" tooltip="Converts this plane&amp;#39;s attributes to a character array.">toString</ref>().c_str());</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><ref refid="classXPlane_1a8891db3af5be7da71e10561753f076c9" kindref="member" tooltip="Constructor for a plane perpendicular to the x-axis.">XPlane::XPlane</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">):<sp/></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPlane" kindref="compound" tooltip="Represents a plane perpendicular to the xy-plane.">Plane</ref>(0,<sp/>1,<sp/>-x,<sp/>id)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_surface_type<sp/>=<sp/><ref refid="Surface_8h_1a669341e8f044e9051db22e680c1b81dfa1c21ef9ff004b3e547f19918ab7e7a80" kindref="member">XPLANE</ref>;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_x<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classXPlane_1a1ce1e78120d2595813087a286410d984" kindref="member" tooltip="Set the location of this xplane on the x-axis.">XPlane::setX</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>_x<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classXPlane_1ae9e8cc70716f5ef26297de6ee0df00d9" kindref="member" tooltip="Returns the location of the xplane on the x-axis.">XPlane::getX</ref>()<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_x;</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classXPlane_1a44355c96a333d8061ac0281d4f3a1aa7" kindref="member" tooltip="Returns the minimum x value on the xplane.">XPlane::getXMin</ref>(){</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_x;</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classXPlane_1ab6fadaf822a0f13c24b04eb234981f84" kindref="member" tooltip="Returns the maximum x value on the xplane.">XPlane::getXMax</ref>(){</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_x;</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classXPlane_1a827dd3ffd7ee05c3110e0c25ff3efcfb" kindref="member" tooltip="Returns the minimum y value of -INFINITY on the xplane.">XPlane::getYMin</ref>(){</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classXPlane_1a12b3bab6d337755116c2a8d50b8c5810" kindref="member">XPlane::getYMax</ref>(){</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal">std::string<sp/><ref refid="classXPlane_1a8f02479cb1ca1dc6e4d79d4fe1d26543" kindref="member" tooltip="Converts this xplane&amp;#39;s attributes to a character array.">XPlane::toString</ref>()<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>string;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Surface<sp/>id<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classSurface_1a4c1bcbdba5c4e1e8772b4d4b28f95e39" kindref="member">_id</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>type<sp/>=<sp/>XPLANE<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>A<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="classPlane_1afd0aae8ff683f84d286e975e856df3ef" kindref="member">_A</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>B<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classPlane_1a2aac5aa1b6e726918a1afc87269e51f4" kindref="member">_B</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>C<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>_C<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>x<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>_x;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.str();</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><ref refid="classYPlane_1a9e04f6233f8a1ea659ad5fee27ee54c2" kindref="member" tooltip="Constructor for a plane perpendicular to the y-axis.">YPlane::YPlane</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">):<sp/></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPlane" kindref="compound" tooltip="Represents a plane perpendicular to the xy-plane.">Plane</ref>(1,<sp/>0,<sp/>-y,<sp/>id)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_surface_type<sp/>=<sp/><ref refid="Surface_8h_1a669341e8f044e9051db22e680c1b81dfa02382f3d36c22c4fdd1544a55ac87d4a" kindref="member">YPLANE</ref>;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_y<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classYPlane_1a899cafc6a3533efd3fa32dd1fdfdc3ba" kindref="member" tooltip="Set the location of this yplane on the y-axis.">YPlane::setY</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>_y<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classYPlane_1a238909f9532b3b06bae42903a47b9f67" kindref="member" tooltip="Returns the location of the yplane on the y-axis.">YPlane::getY</ref>()<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_y;</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classYPlane_1ac3516c324a84328918483ba4fb9ed3b0" kindref="member" tooltip="Returns the minimum x value of -INFINITY on this yplane.">YPlane::getXMin</ref>(){</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classYPlane_1a826121aa104801c8de740bdf35b8719b" kindref="member" tooltip="Returns the maximum x value of INFINITY on this yplane.">YPlane::getXMax</ref>(){</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classYPlane_1ad31d977334c0839649588b2382c6d316" kindref="member" tooltip="Returns the minimum y value on this yplane.">YPlane::getYMin</ref>(){</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_y;</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classYPlane_1a68f1585c4575003ef500e95bd21475f1" kindref="member" tooltip="Returns the maximum y value on this yplane.">YPlane::getYMax</ref>(){</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_y;</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal">std::string<sp/><ref refid="classYPlane_1a90e984e54368bc0508c82e86b05de286" kindref="member" tooltip="Converts this yplane&amp;#39;s attributes to a character array.">YPlane::toString</ref>()<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>string;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Surface<sp/>id<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classSurface_1a4c1bcbdba5c4e1e8772b4d4b28f95e39" kindref="member">_id</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>type<sp/>=<sp/>YPLANE<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>A<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="classPlane_1afd0aae8ff683f84d286e975e856df3ef" kindref="member">_A</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>B<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classPlane_1a2aac5aa1b6e726918a1afc87269e51f4" kindref="member">_B</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>C<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>_C<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>y<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>_y;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.str();</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classYPlane_1a0be4dfa4623eaf137fdd0324bfe1e7ea" kindref="member" tooltip="Prints a string representation of all of the yplane&amp;#39;s objects to the console.">YPlane::printString</ref>()<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a7186ecefe792fdae9fec0a42f105ad6b" kindref="member">RESULT</ref>,<sp/><ref refid="classYPlane_1a90e984e54368bc0508c82e86b05de286" kindref="member" tooltip="Converts this yplane&amp;#39;s attributes to a character array.">toString</ref>().c_str());</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><ref refid="classZPlane_1adf8686299f24561e55dbbbdd1fd16c1d" kindref="member" tooltip="Constructor for a plane perpendicular to the z-axis.">ZPlane::ZPlane</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">):<sp/></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPlane" kindref="compound" tooltip="Represents a plane perpendicular to the xy-plane.">Plane</ref>(0,<sp/>0,<sp/>-z,<sp/>id)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_surface_type<sp/>=<sp/><ref refid="Surface_8h_1a669341e8f044e9051db22e680c1b81dfab8a67003c4c98688a7ae46205a6731d4" kindref="member">ZPLANE</ref>;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_z<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classZPlane_1a96d7d97847aefd832bad4d78a0ba5bd0" kindref="member" tooltip="Set the location of this zplane on the z-axis.">ZPlane::setZ</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>_z<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classZPlane_1abd5aa541a5803dfb52af8d156c06cb6d" kindref="member" tooltip="Returns the location of the zplane on the z-axis.">ZPlane::getZ</ref>()<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_z;</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classZPlane_1a88cf39a1b45475ca33b9c6c490a2be32" kindref="member" tooltip="Returns the minimum x value of -INFINITY on this zplane.">ZPlane::getXMin</ref>(){</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classZPlane_1a8a5210e90bdfb46876935dbef37193ff" kindref="member" tooltip="Returns the maximum x value of INFINITY on this zplane.">ZPlane::getXMax</ref>(){</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classZPlane_1ac8c77d7807045ce074dc76a69b93d5b6" kindref="member" tooltip="Returns the minimum y value of -INFINITY on this zplane.">ZPlane::getYMin</ref>(){</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classZPlane_1a3c76cfa8b383fbf962589b35364ab8cf" kindref="member" tooltip="Returns the maximum y value on this zplane.">ZPlane::getYMax</ref>(){</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal">std::string<sp/><ref refid="classZPlane_1a7a55a5e5c3d7d1279844263e77010c40" kindref="member" tooltip="Converts this zplane&amp;#39;s attributes to a character array.">ZPlane::toString</ref>()<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>string;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Surface<sp/>id<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classSurface_1a4c1bcbdba5c4e1e8772b4d4b28f95e39" kindref="member">_id</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>type<sp/>=<sp/>ZPLANE<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>A<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="classPlane_1afd0aae8ff683f84d286e975e856df3ef" kindref="member">_A</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>B<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classPlane_1a2aac5aa1b6e726918a1afc87269e51f4" kindref="member">_B</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>C<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>_C<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>z<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>_z;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.str();</highlight></codeline>
<codeline lineno="528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classZPlane_1a979069fb189a567b298114bf5b24ff4a" kindref="member" tooltip="Prints a string representation of all of the zplane&amp;#39;s objects to the console.">ZPlane::printString</ref>()<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a7186ecefe792fdae9fec0a42f105ad6b" kindref="member">RESULT</ref>,<sp/><ref refid="classZPlane_1a7a55a5e5c3d7d1279844263e77010c40" kindref="member" tooltip="Converts this zplane&amp;#39;s attributes to a character array.">toString</ref>().c_str());</highlight></codeline>
<codeline lineno="537"><highlight class="normal">}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><ref refid="classCircle_1a2e16fb81ce028fc541fe3a7666cd166a" kindref="member" tooltip="constructor.">Circle::Circle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radius,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">):<sp/></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSurface" kindref="compound" tooltip="Represents a general surface in the 2D xy-plane.">Surface</ref>(id)<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_surface_type<sp/>=<sp/><ref refid="Surface_8h_1a669341e8f044e9051db22e680c1b81dfaa79c827759ea48f0735386c4b1188911" kindref="member">CIRCLE</ref>;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_A<sp/>=<sp/>1.;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_B<sp/>=<sp/>1.;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_C<sp/>=<sp/>-2.*x;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_D<sp/>=<sp/>-2.*y;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_E<sp/>=<sp/>x*x<sp/>+<sp/>y*y<sp/>-<sp/>radius*radius;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_radius<sp/>=<sp/>radius;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_center.setX(x);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_center.setY(y);</highlight></codeline>
<codeline lineno="559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classCircle_1ad4e43556962fd45f3f45d4e2d378c7bf" kindref="member" tooltip="Return the x-coordinate of the circle&amp;#39;s center point.">Circle::getX0</ref>()<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_center.<ref refid="classPoint_1af52a20a376f8f31e87658837565d3812" kindref="member" tooltip="Returns this point&amp;#39;s x-coordinate.">getX</ref>();</highlight></codeline>
<codeline lineno="568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classCircle_1ad186209f266b47ad1136a736c8fa75fc" kindref="member" tooltip="Return the y-coordinate of the circle&amp;#39;s center point.">Circle::getY0</ref>()<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_center.<ref refid="classPoint_1aac5008459bf0e0053ce744a69187bae7" kindref="member" tooltip="Returns this point&amp;#39;s y-coordinate.">getY</ref>();</highlight></codeline>
<codeline lineno="577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classCircle_1a49e3967db73a8f068dbe6302a84370f6" kindref="member" tooltip="Finds the intersection point with this circle from a given point and trajectory defined by an angle (...">Circle::intersection</ref>(<ref refid="classPoint" kindref="compound" tooltip="Class to represent a 2D point in space.">Point</ref>*<sp/>point,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle,<sp/><ref refid="classPoint" kindref="compound" tooltip="Class to represent a 2D point in space.">Point</ref>*<sp/>points)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0<sp/>=<sp/>point-&gt;<ref refid="classPoint_1af52a20a376f8f31e87658837565d3812" kindref="member" tooltip="Returns this point&amp;#39;s x-coordinate.">getX</ref>();</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y0<sp/>=<sp/>point-&gt;<ref refid="classPoint_1aac5008459bf0e0053ce744a69187bae7" kindref="member" tooltip="Returns this point&amp;#39;s y-coordinate.">getY</ref>();</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xcurr,<sp/>ycurr;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>intersection<sp/>points<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/>b,<sp/>c,<sp/>q,<sp/>discr;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>track<sp/>is<sp/>vertical<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fabs(angle<sp/>-<sp/>(M_PI<sp/>/<sp/>2)))<sp/>&lt;<sp/>1.0e-10)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Solve<sp/>for<sp/>where<sp/>the<sp/>line<sp/>x<sp/>=<sp/>x0<sp/>and<sp/>the<sp/>surface<sp/>F(x,y)<sp/>intersect</highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Find<sp/>the<sp/>y<sp/>where<sp/>F(x0,<sp/>y)<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Substitute<sp/>x0<sp/>into<sp/>F(x,y)<sp/>and<sp/>rearrange<sp/>to<sp/>put<sp/>in</highlight></codeline>
<codeline lineno="602"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>form<sp/>of<sp/>the<sp/>quadratic<sp/>formula:<sp/>ay^2<sp/>+<sp/>by<sp/>+<sp/>c<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>_B<sp/>*<sp/>_B;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>_D;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>_A<sp/>*<sp/>x0<sp/>*<sp/>x0<sp/>+<sp/>_C<sp/>*<sp/>x0<sp/>+<sp/>_E;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>discr<sp/>=<sp/>b*b<sp/>-<sp/>4*a*c;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>are<sp/>no<sp/>intersections<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(discr<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>is<sp/>one<sp/>intersection<sp/>(ie<sp/>on<sp/>the<sp/>surface)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(discr<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xcurr<sp/>=<sp/>x0;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ycurr<sp/>=<sp/>-b<sp/>/<sp/>(2*a);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points[num].<ref refid="classPoint_1a21046f7efa6623eb78ae1ffc46b1820a" kindref="member" tooltip="Initializes a point with two-dimensional coordinates.">setCoords</ref>(xcurr,<sp/>ycurr);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(angle<sp/>&lt;<sp/>M_PI<sp/>&amp;&amp;<sp/>ycurr<sp/>&gt;<sp/>y0)</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num++;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(angle<sp/>&gt;<sp/>M_PI<sp/>&amp;&amp;<sp/>ycurr<sp/>&lt;<sp/>y0)</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num++;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>are<sp/>two<sp/>intersections<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xcurr<sp/>=<sp/>x0;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ycurr<sp/>=<sp/>(-b<sp/>+<sp/>sqrt(discr))<sp/>/<sp/>(2<sp/>*<sp/>a);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points[num].<ref refid="classPoint_1a21046f7efa6623eb78ae1ffc46b1820a" kindref="member" tooltip="Initializes a point with two-dimensional coordinates.">setCoords</ref>(xcurr,<sp/>ycurr);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(angle<sp/>&lt;<sp/>M_PI<sp/>&amp;&amp;<sp/>ycurr<sp/>&gt;<sp/>y0)</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num++;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(angle<sp/>&gt;<sp/>M_PI<sp/>&amp;&amp;<sp/>ycurr<sp/>&lt;<sp/>y0)</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num++;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xcurr<sp/>=<sp/>x0;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ycurr<sp/>=<sp/>(-b<sp/>-<sp/>sqrt(discr))<sp/>/<sp/>(2<sp/>*<sp/>a);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points[num].<ref refid="classPoint_1a21046f7efa6623eb78ae1ffc46b1820a" kindref="member" tooltip="Initializes a point with two-dimensional coordinates.">setCoords</ref>(xcurr,<sp/>ycurr);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(angle<sp/>&lt;<sp/>M_PI<sp/>&amp;&amp;<sp/>ycurr<sp/>&gt;<sp/>y0)</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num++;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(angle<sp/>&gt;<sp/>M_PI<sp/>&amp;&amp;<sp/>ycurr<sp/>&lt;<sp/>y0)</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num++;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>track<sp/>isn&apos;t<sp/>vertical<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Solve<sp/>for<sp/>where<sp/>the<sp/>line<sp/>y-y0<sp/>=<sp/>m*(x-x0)<sp/>and<sp/>the<sp/>surface<sp/>F(x,y)<sp/></highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>intersect.<sp/>Find<sp/>the<sp/>(x,y)<sp/>where<sp/>F(x,<sp/>y0<sp/>+<sp/>m*(x-x0))<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Substitute<sp/>the<sp/>point-slope<sp/>formula<sp/>for<sp/>y<sp/>into<sp/>F(x,y)<sp/>and<sp/></highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>rearrange<sp/>to<sp/>put<sp/>in<sp/>the<sp/>form<sp/>of<sp/>the<sp/>quadratic<sp/>formula:<sp/></highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>ax^2<sp/>+<sp/>bx<sp/>+<sp/>c<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="654"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>sin(angle)<sp/>/<sp/>cos(angle);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>y0<sp/>-<sp/>m<sp/>*<sp/>x0;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>_A<sp/>+<sp/>_B<sp/>*<sp/>_B<sp/>*<sp/>m<sp/>*<sp/>m;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>2<sp/>*<sp/>_B<sp/>*<sp/>m<sp/>*<sp/>q<sp/>+<sp/>_C<sp/>+<sp/>_D<sp/>*<sp/>m;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>_B<sp/>*<sp/>q<sp/>*<sp/>q<sp/>+<sp/>_D<sp/>*<sp/>q<sp/>+<sp/>_E;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>discr<sp/>=<sp/>b*b<sp/>-<sp/>4*a*c;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>are<sp/>no<sp/>intersections<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(discr<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>is<sp/>one<sp/>intersection<sp/>(ie<sp/>on<sp/>the<sp/>surface)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(discr<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xcurr<sp/>=<sp/>-b<sp/>/<sp/>(2*a);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ycurr<sp/>=<sp/>y0<sp/>+<sp/>m<sp/>*<sp/>(points[0].<ref refid="classPoint_1af52a20a376f8f31e87658837565d3812" kindref="member" tooltip="Returns this point&amp;#39;s x-coordinate.">getX</ref>()<sp/>-<sp/>x0);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points[num].<ref refid="classPoint_1a21046f7efa6623eb78ae1ffc46b1820a" kindref="member" tooltip="Initializes a point with two-dimensional coordinates.">setCoords</ref>(xcurr,<sp/>ycurr);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(angle<sp/>&lt;<sp/>M_PI<sp/>&amp;&amp;<sp/>ycurr<sp/>&gt;<sp/>y0)</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num++;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(angle<sp/>&gt;<sp/>M_PI<sp/>&amp;&amp;<sp/>ycurr<sp/>&lt;<sp/>y0)</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num++;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>are<sp/>two<sp/>intersections<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xcurr<sp/>=<sp/>(-b<sp/>+<sp/>sqrt(discr))<sp/>/<sp/>(2*a);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ycurr<sp/>=<sp/>y0<sp/>+<sp/>m<sp/>*<sp/>(xcurr<sp/>-<sp/>x0);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points[num].<ref refid="classPoint_1a21046f7efa6623eb78ae1ffc46b1820a" kindref="member" tooltip="Initializes a point with two-dimensional coordinates.">setCoords</ref>(xcurr,<sp/>ycurr);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(angle<sp/>&lt;<sp/>M_PI<sp/>&amp;&amp;<sp/>ycurr<sp/>&gt;<sp/>y0)<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num++;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(angle<sp/>&gt;<sp/>M_PI<sp/>&amp;&amp;<sp/>ycurr<sp/>&lt;<sp/>y0)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num++;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xcurr<sp/>=<sp/>(-b<sp/>-<sp/>sqrt(discr))<sp/>/<sp/>(2*a);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ycurr<sp/>=<sp/>y0<sp/>+<sp/>m<sp/>*<sp/>(xcurr<sp/>-<sp/>x0);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points[num].<ref refid="classPoint_1a21046f7efa6623eb78ae1ffc46b1820a" kindref="member" tooltip="Initializes a point with two-dimensional coordinates.">setCoords</ref>(xcurr,<sp/>ycurr);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(angle<sp/>&lt;<sp/>M_PI<sp/>&amp;&amp;<sp/>ycurr<sp/>&gt;<sp/>y0)<sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num++;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(angle<sp/>&gt;<sp/>M_PI<sp/>&amp;&amp;<sp/>ycurr<sp/>&lt;<sp/>y0)<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num++;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal">std::string<sp/><ref refid="classCircle_1aea2207f792f532c1a92bfba37adcee5e" kindref="member" tooltip="Converts this circle&amp;#39;s attributes to a character array.">Circle::toString</ref>()<sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>string;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Surface<sp/>id<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classSurface_1a4c1bcbdba5c4e1e8772b4d4b28f95e39" kindref="member">_id</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>type<sp/>=<sp/>CIRCLE<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>A<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>_A<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>B<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>_B<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>C<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>_C<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>D<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>_D</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>E<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>_E<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>x0<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>_center.<ref refid="classPoint_1af52a20a376f8f31e87658837565d3812" kindref="member" tooltip="Returns this point&amp;#39;s x-coordinate.">getX</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>y0<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>_center.<ref refid="classPoint_1aac5008459bf0e0053ce744a69187bae7" kindref="member" tooltip="Returns this point&amp;#39;s y-coordinate.">getY</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>radius<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>_radius;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.str();</highlight></codeline>
<codeline lineno="723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCircle_1a194de784b65de551eb4a05ff6bfd443b" kindref="member" tooltip="Prints a string representation of all of the circle&amp;#39;s objects to the console.">Circle::printString</ref>()<sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a7186ecefe792fdae9fec0a42f105ad6b" kindref="member">RESULT</ref>,<sp/><ref refid="classCircle_1aea2207f792f532c1a92bfba37adcee5e" kindref="member" tooltip="Converts this circle&amp;#39;s attributes to a character array.">toString</ref>().c_str());</highlight></codeline>
<codeline lineno="732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classCircle_1a237978476592c9e3a51408e1b9983175" kindref="member" tooltip="Returns the minimum x value on this circle.">Circle::getXMin</ref>(){</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_center.<ref refid="classPoint_1af52a20a376f8f31e87658837565d3812" kindref="member" tooltip="Returns this point&amp;#39;s x-coordinate.">getX</ref>()<sp/>-<sp/>_radius;</highlight></codeline>
<codeline lineno="741"><highlight class="normal">}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classCircle_1a85c4fc93fe17f6ec4b5255c07315400c" kindref="member" tooltip="Returns the maximum x value on this circle.">Circle::getXMax</ref>(){</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_center.<ref refid="classPoint_1af52a20a376f8f31e87658837565d3812" kindref="member" tooltip="Returns this point&amp;#39;s x-coordinate.">getX</ref>()<sp/>+<sp/>_radius;</highlight></codeline>
<codeline lineno="750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classCircle_1a15a934ccb615ddf1e3b87d80a65d14c8" kindref="member" tooltip="Returns the minimum y value on this circle.">Circle::getYMin</ref>(){</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_center.<ref refid="classPoint_1aac5008459bf0e0053ce744a69187bae7" kindref="member" tooltip="Returns this point&amp;#39;s y-coordinate.">getY</ref>()<sp/>-<sp/>_radius;</highlight></codeline>
<codeline lineno="758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classCircle_1ac468c428499a1e10ace7c16260060da9" kindref="member" tooltip="Returns ths maximum y value on this circle.">Circle::getYMax</ref>(){</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_center.<ref refid="classPoint_1aac5008459bf0e0053ce744a69187bae7" kindref="member" tooltip="Returns this point&amp;#39;s y-coordinate.">getY</ref>()<sp/>+<sp/>_radius;</highlight></codeline>
<codeline lineno="767"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/Surface.cpp"/>
  </compounddef>
</doxygen>
