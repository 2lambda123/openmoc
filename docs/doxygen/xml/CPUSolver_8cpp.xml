<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="CPUSolver_8cpp" kind="file">
    <compoundname>CPUSolver.cpp</compoundname>
    <includes refid="CPUSolver_8h" local="yes">CPUSolver.h</includes>
    <incdepgraph>
      <node id="14">
        <label>CPUSolver.h</label>
        <link refid="CPUSolver_8h"/>
      </node>
      <node id="13">
        <label>/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/CPUSolver.cpp</label>
        <link refid="CPUSolver.cpp"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="CPUSolver_8h" kindref="compound" tooltip="The CPUSolver class.">CPUSolver.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><ref refid="classCPUSolver_1a7a3a562bc1ec3f99ce834e6ee7f54fef" kindref="member" tooltip="Constructor initializes array pointers for tracks and materials.">CPUSolver::CPUSolver</ref>(<ref refid="classGeometry" kindref="compound" tooltip="The master class containing references to all geometry-related objects (surfaces, cells...">Geometry</ref>*<sp/>geometry,<sp/><ref refid="classTrackGenerator" kindref="compound" tooltip="The track generator is dedicated to generating tracks which cyclically wrap across the geometry...">TrackGenerator</ref>*<sp/>track_generator)<sp/>:</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver" kindref="compound" tooltip="This is an abstract base class from which different types of Solvers subclass for different architect...">Solver</ref>(geometry,<sp/>track_generator)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>setNumThreads(1);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>_FSR_locks<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="CPUSolver_8h_1a85f67017ac5e1b0b02a37affc36380c4" kindref="member">_thread_fsr_flux</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><ref refid="classCPUSolver_1a6573957b7c5ea0b6c41b773081fd49cd" kindref="member" tooltip="Destructor deletes array for OpenMP atomic locks for scalar flux updates, and calls Solver subclass d...">CPUSolver::~CPUSolver</ref>()<sp/>{<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classCPUSolver_1aa5e0750911999b1c6b5bb76228798195" kindref="member">_FSR_locks</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/><ref refid="classCPUSolver_1aa5e0750911999b1c6b5bb76228798195" kindref="member">_FSR_locks</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classCPUSolver_1a719d0a4dcd9de62e0fe1985953ce44ca" kindref="member">_thread_fsr_flux</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/><ref refid="classCPUSolver_1a719d0a4dcd9de62e0fe1985953ce44ca" kindref="member">_thread_fsr_flux</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classCPUSolver_1af890494e4e5353fa81f41f80d6e52cb4" kindref="member" tooltip="Returns the number of shared memory OpenMP threads in use.">CPUSolver::getNumThreads</ref>()<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classCPUSolver_1aae4771f6912d3ea1a3a10537a791b28e" kindref="member">_num_threads</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">FP_PRECISION<sp/><ref refid="classCPUSolver_1ac0c9152a81ce1bd13f42aeb20ee9402c" kindref="member" tooltip="Returns the scalar flux for some energy group for a flat source region.">CPUSolver::getFSRScalarFlux</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fsr_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>energy_group)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Error<sp/>checking<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsr_id<sp/>&gt;=<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>return<sp/>a<sp/>scalar<sp/>flux<sp/>for<sp/>FSR<sp/>id<sp/>=<sp/>%d<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>enery<sp/>group<sp/>%d<sp/>since<sp/>the<sp/>solver<sp/>only<sp/>contains<sp/>FSR<sp/>with<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;IDs<sp/>greater<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsr_id,<sp/>energy_group,<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>-1);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsr_id<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>return<sp/>a<sp/>scalar<sp/>flux<sp/>for<sp/>FSR<sp/>id<sp/>=<sp/>%d<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>energy<sp/>group<sp/>%d<sp/>since<sp/>FSRs<sp/>do<sp/>not<sp/>have<sp/>negative<sp/>IDs&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsr_id,<sp/>energy_group);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(energy_group-1<sp/>&gt;=<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>return<sp/>a<sp/>scalar<sp/>flux<sp/>for<sp/>FSR<sp/>id<sp/>=<sp/>%d<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>energy<sp/>group<sp/>%d<sp/>since<sp/>the<sp/>solver<sp/>only<sp/>has<sp/>%d<sp/>energy<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;groups&quot;</highlight><highlight class="normal">,<sp/>fsr_id,<sp/>energy_group,<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(energy_group<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>return<sp/>a<sp/>scalar<sp/>flux<sp/>for<sp/>FSR<sp/>id<sp/>=<sp/>%d<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>energy<sp/>group<sp/>%d<sp/>since<sp/>energy<sp/>groups<sp/>are<sp/>greater<sp/>than<sp/>1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsr_id,<sp/>energy_group);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(fsr_id,energy_group);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">FP_PRECISION*<sp/><ref refid="classCPUSolver_1a281e593c8d4e75fd44a6acb8e7bf91ee" kindref="member" tooltip="Return an array indexed by flat source region IDs and energy groups which contains the corresponding ...">CPUSolver::getFSRScalarFluxes</ref>()<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>returns<sp/>the<sp/>Solver&apos;s<sp/>scalar<sp/>flux<sp/>array<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;since<sp/>it<sp/>has<sp/>not<sp/>yet<sp/>been<sp/>allocated<sp/>in<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">FP_PRECISION*<sp/><ref refid="classCPUSolver_1a90dc1357f3ec10f9a85ae31cefd0bd49" kindref="member" tooltip="Return an array indexed by flat source region IDs with the corresponding flat source region power...">CPUSolver::getFSRPowers</ref>()<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1ac6de9ad9091dae955848d83a91b0f3b5" kindref="member">_FSRs_to_powers</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>returns<sp/>the<sp/>Solver&apos;s<sp/>FSR<sp/>power<sp/>array<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;since<sp/>it<sp/>has<sp/>not<sp/>yet<sp/>been<sp/>allocated<sp/>in<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSolver_1ac6de9ad9091dae955848d83a91b0f3b5" kindref="member">_FSRs_to_powers</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">FP_PRECISION*<sp/><ref refid="classCPUSolver_1a57ef6e1450abb4e7ba67f582228d6241" kindref="member" tooltip="Return an array indexed by flat source region IDs with the corresponding pin cell power...">CPUSolver::getFSRPinPowers</ref>()<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1a2ae997684ddbc16e2c8575cb6dcad788" kindref="member">_FSRs_to_pin_powers</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>returns<sp/>the<sp/>Solver&apos;s<sp/>FSR<sp/>pin<sp/>power<sp/>array<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;since<sp/>it<sp/>has<sp/>not<sp/>yet<sp/>been<sp/>allocated<sp/>in<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSolver_1a2ae997684ddbc16e2c8575cb6dcad788" kindref="member">_FSRs_to_pin_powers</ref>;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCPUSolver_1a2407bc2c3829aff938c34a990d8fbe65" kindref="member" tooltip="Sets the number of shared memory OpenMP threads to use (&amp;gt;0).">CPUSolver::setNumThreads</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_threads)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_threads<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>set<sp/>the<sp/>number<sp/>of<sp/>threads<sp/>for<sp/>the<sp/>Solver<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;to<sp/>%d<sp/>since<sp/>it<sp/>is<sp/>less<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>0&quot;</highlight><highlight class="normal">,<sp/>num_threads);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCPUSolver_1aae4771f6912d3ea1a3a10537a791b28e" kindref="member">_num_threads</ref><sp/>=<sp/>num_threads;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>number<sp/>of<sp/>threads<sp/>for<sp/>OpenMP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>omp_set_num_threads(<ref refid="classCPUSolver_1aae4771f6912d3ea1a3a10537a791b28e" kindref="member">_num_threads</ref>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCPUSolver_1a8eac5804397c5e5f95d73b19a6e4cbfd" kindref="member" tooltip="Allocates memory for track boundary angular fluxes and leakages flat source region scalar fluxes...">CPUSolver::initializeFluxArrays</ref>()<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Delete<sp/>old<sp/>flux<sp/>arrays<sp/>if<sp/>they<sp/>exist<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1adcfcfe1758affc74780907584fc7beaf" kindref="member">_boundary_flux</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/><ref refid="classSolver_1adcfcfe1758affc74780907584fc7beaf" kindref="member">_boundary_flux</ref>;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1ace3972879027f76a99f24fd01618d123" kindref="member">_boundary_leakage</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/><ref refid="classSolver_1ace3972879027f76a99f24fd01618d123" kindref="member">_boundary_leakage</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/><ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classCPUSolver_1a719d0a4dcd9de62e0fe1985953ce44ca" kindref="member">_thread_fsr_flux</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/><ref refid="classCPUSolver_1a719d0a4dcd9de62e0fe1985953ce44ca" kindref="member">_thread_fsr_flux</ref>;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>memory<sp/>for<sp/>the<sp/>flux<sp/>and<sp/>leakage<sp/>arrays<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>2<sp/>*<sp/><ref refid="classSolver_1a817518832fb051823de9e8855319f02e" kindref="member">_tot_num_tracks</ref><sp/>*<sp/><ref refid="classSolver_1a84ce3dbf9e3c4a86773161e7c92b1da1" kindref="member">_polar_times_groups</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1adcfcfe1758affc74780907584fc7beaf" kindref="member">_boundary_flux</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FP_PRECISION[size];</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1ace3972879027f76a99f24fd01618d123" kindref="member">_boundary_leakage</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FP_PRECISION[size];</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>an<sp/>array<sp/>for<sp/>the<sp/>scalar<sp/>flux<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref><sp/>*<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FP_PRECISION[size];</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>a<sp/>thread<sp/>local<sp/>local<sp/>memory<sp/>buffer<sp/>for<sp/>FSR<sp/>scalar<sp/>flux<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>_num_groups<sp/>*<sp/><ref refid="classCPUSolver_1aae4771f6912d3ea1a3a10537a791b28e" kindref="member">_num_threads</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(FP_PRECISION);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCPUSolver_1a719d0a4dcd9de62e0fe1985953ce44ca" kindref="member">_thread_fsr_flux</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FP_PRECISION[size];</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::exception<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>memory<sp/>for<sp/>the<sp/>solver&apos;s<sp/>fluxes.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Backtrace:%s&quot;</highlight><highlight class="normal">,<sp/>e.what());</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCPUSolver_1a51419d540c7eea9d29c3df963cc80784" kindref="member" tooltip="Allocates memory for flat source region source arrays.">CPUSolver::initializeSourceArrays</ref>()<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Delete<sp/>old<sp/>sources<sp/>arrays<sp/>if<sp/>they<sp/>exist<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1a63b1f8d78d02dc5a0f2dc392597cc5af" kindref="member">_fission_sources</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/><ref refid="classSolver_1a63b1f8d78d02dc5a0f2dc392597cc5af" kindref="member">_fission_sources</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1a524973fbca3ad3ace58b122c01b404f0" kindref="member">_scatter_sources</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/><ref refid="classSolver_1a524973fbca3ad3ace58b122c01b404f0" kindref="member">_scatter_sources</ref>;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1a935ab1926ea3d625d0c549c5f8595c07" kindref="member">_source</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/><ref refid="classSolver_1a935ab1926ea3d625d0c549c5f8595c07" kindref="member">_source</ref>;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1ad7d3233142b6798f9aea7330b221754c" kindref="member">_old_source</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/><ref refid="classSolver_1ad7d3233142b6798f9aea7330b221754c" kindref="member">_old_source</ref>;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1aff69bb3f354f5c598e1117e2a3515f1b" kindref="member">_reduced_source</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/><ref refid="classSolver_1aff69bb3f354f5c598e1117e2a3515f1b" kindref="member">_reduced_source</ref>;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1af2285a2a6361ea1d351e3b8c55858c92" kindref="member">_source_residuals</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/><ref refid="classSolver_1af2285a2a6361ea1d351e3b8c55858c92" kindref="member">_source_residuals</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>memory<sp/>for<sp/>all<sp/>source<sp/>arrays<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref><sp/>*<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a63b1f8d78d02dc5a0f2dc392597cc5af" kindref="member">_fission_sources</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FP_PRECISION[size];</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a524973fbca3ad3ace58b122c01b404f0" kindref="member">_scatter_sources</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FP_PRECISION[size];</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a935ab1926ea3d625d0c549c5f8595c07" kindref="member">_source</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FP_PRECISION[size];</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1ad7d3233142b6798f9aea7330b221754c" kindref="member">_old_source</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FP_PRECISION[size];</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1aff69bb3f354f5c598e1117e2a3515f1b" kindref="member">_reduced_source</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FP_PRECISION[size];</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1af2285a2a6361ea1d351e3b8c55858c92" kindref="member">_source_residuals</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FP_PRECISION[size];</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::exception<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>memory<sp/>for<sp/>the<sp/>solver&apos;s<sp/>flat<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;source<sp/>region<sp/>sources<sp/>array.<sp/>Backtrace:%s&quot;</highlight><highlight class="normal">,<sp/>e.what());</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCPUSolver_1aea001e3d177ce6eec0d650025ec821bc" kindref="member" tooltip="Allocates memory for flat source region power arrays.">CPUSolver::initializePowerArrays</ref>()<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Delete<sp/>old<sp/>power<sp/>arrays<sp/>if<sp/>they<sp/>exist<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1ac6de9ad9091dae955848d83a91b0f3b5" kindref="member">_FSRs_to_powers</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/><ref refid="classSolver_1ac6de9ad9091dae955848d83a91b0f3b5" kindref="member">_FSRs_to_powers</ref>;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1a2ae997684ddbc16e2c8575cb6dcad788" kindref="member">_FSRs_to_pin_powers</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/><ref refid="classSolver_1a2ae997684ddbc16e2c8575cb6dcad788" kindref="member">_FSRs_to_pin_powers</ref>;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>memory<sp/>for<sp/>FSR<sp/>power<sp/>and<sp/>pin<sp/>power<sp/>arrays<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1ac6de9ad9091dae955848d83a91b0f3b5" kindref="member">_FSRs_to_powers</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FP_PRECISION[<ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>];</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a2ae997684ddbc16e2c8575cb6dcad788" kindref="member">_FSRs_to_pin_powers</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FP_PRECISION[<ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>];</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::exception<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>memory<sp/>for<sp/>the<sp/>solver&apos;s<sp/>FSR<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;power<sp/>arrays.<sp/>Backtrace:%s&quot;</highlight><highlight class="normal">,<sp/>e.what());</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCPUSolver_1a061a09ddde28c55cda28a8734eac4c1a" kindref="member" tooltip="Creates a polar quadrature object for the solver.">CPUSolver::initializePolarQuadrature</ref>()<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Deletes<sp/>the<sp/>old<sp/>quadrature<sp/>if<sp/>one<sp/>existed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1a4cf19c17278e367f44c6e735e437103d" kindref="member">_quad</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="classSolver_1a4cf19c17278e367f44c6e735e437103d" kindref="member">_quad</ref>;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a4cf19c17278e367f44c6e735e437103d" kindref="member">_quad</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classQuadrature" kindref="compound" tooltip="Stores values for a variety of polar quadratures which may be used.">Quadrature</ref>(<ref refid="classSolver_1a3c8910d870254066e9ba89c75c3a1003" kindref="member">_quadrature_type</ref>,<sp/><ref refid="classSolver_1a49cc179a9f47c5ca5f6d19c954d680ad" kindref="member">_num_polar</ref>);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a84ce3dbf9e3c4a86773161e7c92b1da1" kindref="member">_polar_times_groups</ref><sp/>=<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref><sp/>*<sp/><ref refid="classSolver_1a49cc179a9f47c5ca5f6d19c954d680ad" kindref="member">_num_polar</ref>;</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="280"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCPUSolver_1ad7622d98f9b5664bcfdef86762b32f86" kindref="member" tooltip="Pre-computes exponential pre-factors for each segment of each track for each polar angle...">CPUSolver::precomputePrefactors</ref>()<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Build<sp/>exponential<sp/>prefactor<sp/>array<sp/>based<sp/>on<sp/>table<sp/>look<sp/>up<sp/>with<sp/>linear<sp/></highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>interpolation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a748005382152808a72b1a9177d9dc806" kindref="member">INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Building<sp/>exponential<sp/>prefactor<sp/>hashtable...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>azim_weight;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a8407ebcfee31a54a67e6d5ca2e3d4e6b" kindref="member">_polar_weights</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FP_PRECISION[<ref refid="classSolver_1a9f0fd3a842870803f27c47ed51a83039" kindref="member">_num_azim</ref>*<ref refid="classSolver_1a49cc179a9f47c5ca5f6d19c954d680ad" kindref="member">_num_polar</ref>];</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Precompute<sp/>the<sp/>total<sp/>azimuthal<sp/>weight<sp/>for<sp/>tracks<sp/>at<sp/>each<sp/>polar<sp/>angle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>private(azim_weight)<sp/>schedule(guided)</highlight></codeline>
<codeline lineno="292"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/><ref refid="classSolver_1a9f0fd3a842870803f27c47ed51a83039" kindref="member">_num_azim</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>azim_weight<sp/>=<sp/><ref refid="classSolver_1a02f013a25d984fa74aabc4c34f829960" kindref="member">_azim_weights</ref>[i];</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0;<sp/>p<sp/>&lt;<sp/><ref refid="classSolver_1a49cc179a9f47c5ca5f6d19c954d680ad" kindref="member">_num_polar</ref>;<sp/>p++)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a8407ebcfee31a54a67e6d5ca2e3d4e6b" kindref="member">_polar_weights</ref>(i,p)<sp/>=<sp/>azim_weight*<ref refid="classSolver_1a4cf19c17278e367f44c6e735e437103d" kindref="member">_quad</ref>-&gt;<ref refid="classQuadrature_1a3f19d76860a2d1ec8406366188449a6d" kindref="member" tooltip="Returns the multiple value for a particular polar angle. (the sine of a polar angle multiplied by its...">getMultiple</ref>(p)*<ref refid="GPUSolver_8h_1ac6b39b7a27b735f3a62be33f38041985" kindref="member">FOUR_PI</ref>;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>size<sp/>of<sp/>prefactor<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_array_values<sp/>=<sp/>10<sp/>*<sp/>sqrt(1.<sp/>/<sp/>(8.<sp/>*<sp/><ref refid="classSolver_1a4aa4d18f980bbb098f839835e5e2f35d" kindref="member">_source_convergence_thresh</ref>));</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a354a2964b53e89ffb03d256eaccdeb47" kindref="member">_prefactor_spacing</ref><sp/>=<sp/>10.<sp/>/<sp/>num_array_values;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a43ee296db0a4d4cc695be82fea2e2ee5" kindref="member">_prefactor_array_size</ref><sp/>=<sp/><ref refid="classSolver_1a5f9e45e5d2a93bc3b18ca2659b95ac6a" kindref="member">_two_times_num_polar</ref><sp/>*<sp/>num_array_values;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a1a18b47465922034d8669238fedbe176" kindref="member">_prefactor_max_index</ref><sp/>=<sp/><ref refid="classSolver_1a43ee296db0a4d4cc695be82fea2e2ee5" kindref="member">_prefactor_array_size</ref><sp/>-<sp/><ref refid="classSolver_1a5f9e45e5d2a93bc3b18ca2659b95ac6a" kindref="member">_two_times_num_polar</ref><sp/>-<sp/>1.;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a0593585da9181e972974c1274d8f2b4f" kindref="member">DEBUG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Prefactor<sp/>array<sp/>size:<sp/>%i,<sp/>max<sp/>index:<sp/>%i&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a43ee296db0a4d4cc695be82fea2e2ee5" kindref="member">_prefactor_array_size</ref>,<sp/><ref refid="classSolver_1a1a18b47465922034d8669238fedbe176" kindref="member">_prefactor_max_index</ref>);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>arrays<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a64ce3d9a61c55fa470b91b68497dd9d6" kindref="member">_prefactor_array</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FP_PRECISION[<ref refid="classSolver_1a43ee296db0a4d4cc695be82fea2e2ee5" kindref="member">_prefactor_array_size</ref>];</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>expon;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>intercept;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>slope;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>prefactor<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>num_array_values;<sp/>i<sp/>++){</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0;<sp/>p<sp/>&lt;<sp/><ref refid="classSolver_1a49cc179a9f47c5ca5f6d19c954d680ad" kindref="member">_num_polar</ref>;<sp/>p++){</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expon<sp/>=<sp/>exp(-<sp/>(i<sp/>*<sp/><ref refid="classSolver_1a354a2964b53e89ffb03d256eaccdeb47" kindref="member">_prefactor_spacing</ref>)<sp/>/<sp/><ref refid="classSolver_1a4cf19c17278e367f44c6e735e437103d" kindref="member">_quad</ref>-&gt;<ref refid="classQuadrature_1a891c96ac4127b45461832bd72cbaf364" kindref="member" tooltip="Returns the  value for a particular polar angle.">getSinTheta</ref>(p));</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slope<sp/>=<sp/>-<sp/>expon<sp/>/<sp/><ref refid="classSolver_1a4cf19c17278e367f44c6e735e437103d" kindref="member">_quad</ref>-&gt;<ref refid="classQuadrature_1a891c96ac4127b45461832bd72cbaf364" kindref="member" tooltip="Returns the  value for a particular polar angle.">getSinTheta</ref>(p);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intercept<sp/>=<sp/>expon<sp/>*<sp/>(1<sp/>+<sp/>(i<sp/>*<sp/><ref refid="classSolver_1a354a2964b53e89ffb03d256eaccdeb47" kindref="member">_prefactor_spacing</ref>)<sp/>/</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a4cf19c17278e367f44c6e735e437103d" kindref="member">_quad</ref>-&gt;<ref refid="classQuadrature_1a891c96ac4127b45461832bd72cbaf364" kindref="member" tooltip="Returns the  value for a particular polar angle.">getSinTheta</ref>(p));</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a64ce3d9a61c55fa470b91b68497dd9d6" kindref="member">_prefactor_array</ref>[<ref refid="classSolver_1a5f9e45e5d2a93bc3b18ca2659b95ac6a" kindref="member">_two_times_num_polar</ref><sp/>*<sp/>i<sp/>+<sp/>2<sp/>*<sp/>p]<sp/>=<sp/>slope;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_prefactor_array[<ref refid="classSolver_1a5f9e45e5d2a93bc3b18ca2659b95ac6a" kindref="member">_two_times_num_polar</ref><sp/>*<sp/>i<sp/>+<sp/>2<sp/>*<sp/>p<sp/>+<sp/>1]<sp/>=<sp/>intercept;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>reciprocal<sp/>of<sp/>the<sp/>prefactor<sp/>spacing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a4ed58ea28163beec97a5efe1c1874c02" kindref="member">_inverse_prefactor_spacing</ref><sp/>=<sp/>1.0<sp/>/<sp/><ref refid="classSolver_1a354a2964b53e89ffb03d256eaccdeb47" kindref="member">_prefactor_spacing</ref>;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCPUSolver_1aafc9bf9eb416a12cbe21ddde4b5f9f1c" kindref="member" tooltip="Initializes the volumes and material arrays for each flat source region.">CPUSolver::initializeFSRs</ref>()<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a748005382152808a72b1a9177d9dc806" kindref="member">INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Initializing<sp/>flat<sp/>source<sp/>regions...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Delete<sp/>old<sp/>FSR<sp/>arrayS<sp/>if<sp/>they<sp/>exist<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1a84372339d7c2b5da3f07bc8b0822f42f" kindref="member">_FSR_volumes</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/><ref refid="classSolver_1a84372339d7c2b5da3f07bc8b0822f42f" kindref="member">_FSR_volumes</ref>;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1a9c124fee8429fc5e44649fbb22f930b4" kindref="member">_FSR_materials</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/><ref refid="classSolver_1a9c124fee8429fc5e44649fbb22f930b4" kindref="member">_FSR_materials</ref>;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a84372339d7c2b5da3f07bc8b0822f42f" kindref="member">_FSR_volumes</ref><sp/>=<sp/>(FP_PRECISION*)calloc(<ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(FP_PRECISION));</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a9c124fee8429fc5e44649fbb22f930b4" kindref="member">_FSR_materials</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classMaterial" kindref="compound" tooltip="The material class represents a unique material and its relevant nuclear data (ie, multigroup cross-sections) for neutron transport.">Material</ref>*[<ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>];</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCPUSolver_1aa5e0750911999b1c6b5bb76228798195" kindref="member">_FSR_locks</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>omp_lock_t[<ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>];</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_segments;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsegment" kindref="compound" tooltip="A segment represents a line segment within a single flat source region along a track.">segment</ref>*<sp/>curr_segment;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsegment" kindref="compound" tooltip="A segment represents a line segment within a single flat source region along a track.">segment</ref>*<sp/>segments;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>volume;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCellBasic" kindref="compound" tooltip="Represents a cell filled with a material.">CellBasic</ref>*<sp/>cell;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMaterial" kindref="compound" tooltip="The material class represents a unique material and its relevant nuclear data (ie, multigroup cross-sections) for neutron transport.">Material</ref>*<sp/>material;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classUniverse" kindref="compound" tooltip="A universe represents an unbounded space in the 2D xy-plane.">Universe</ref>*<sp/>univ_zero<sp/>=<sp/><ref refid="classSolver_1ae323198b6be6ddc402c53784c5a89b7f" kindref="member">_geometry</ref>-&gt;<ref refid="classGeometry_1a5b689d61e1a4b807b3d95bfbac3b8068" kindref="member" tooltip="Return a pointer to a universe from the geometry.">getUniverse</ref>(0);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>each<sp/>FSR&apos;s<sp/>&quot;volume&quot;<sp/>by<sp/>accumulating<sp/>the<sp/>total<sp/>length<sp/>of<sp/>all<sp/>tracks</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>inside<sp/>the<sp/>FSR.<sp/>Loop<sp/>over<sp/>azimuthal<sp/>angle,<sp/>track<sp/>and<sp/>segment.<sp/></highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Note:<sp/>this<sp/>code<sp/>region<sp/>cannot<sp/>be<sp/>parallelized<sp/>without<sp/>a<sp/>mutex<sp/>lock</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>on<sp/>FSR<sp/>volume<sp/>due<sp/>to<sp/>race<sp/>conditions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/><ref refid="classSolver_1a817518832fb051823de9e8855319f02e" kindref="member">_tot_num_tracks</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>azim_index<sp/>=<sp/><ref refid="classSolver_1a775ed41fc1268312c8fb25ec994e1351" kindref="member">_tracks</ref>[i]-&gt;<ref refid="classTrack_1ad200ad729b952101b48a99b695c81a1b" kindref="member" tooltip="Return the index for the track&amp;#39;s azimuthal angle (with respect to the x-axis).">getAzimAngleIndex</ref>();</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>num_segments<sp/>=<sp/><ref refid="classSolver_1a775ed41fc1268312c8fb25ec994e1351" kindref="member">_tracks</ref>[i]-&gt;<ref refid="classTrack_1a034893295ac06eed35aac0c7ed172419" kindref="member" tooltip="Return the number of segments along this track.">getNumSegments</ref>();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>segments<sp/>=<sp/><ref refid="classSolver_1a775ed41fc1268312c8fb25ec994e1351" kindref="member">_tracks</ref>[i]-&gt;<ref refid="classTrack_1a796efa8dc12ef0f1073ba264f4074380" kindref="member" tooltip="Returns a vector of pointers to the track&amp;#39;s segments.">getSegments</ref>();</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s=0;<sp/>s<sp/>&lt;<sp/>num_segments;<sp/>s++)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_segment<sp/>=<sp/>&amp;segments[s];</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>volume<sp/>=<sp/>curr_segment-&gt;<ref refid="structsegment_1a50c5a635c531d34ad3435ebcc3b6f593" kindref="member">_length</ref><sp/>*<sp/><ref refid="classSolver_1a02f013a25d984fa74aabc4c34f829960" kindref="member">_azim_weights</ref>[azim_index];</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a84372339d7c2b5da3f07bc8b0822f42f" kindref="member">_FSR_volumes</ref>[curr_segment-&gt;<ref refid="structsegment_1ad4185c78e4df6c12a07392dfee367706" kindref="member">_region_id</ref>]<sp/>+=<sp/>volume;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>all<sp/>FSRs<sp/>to<sp/>extract<sp/>FSR<sp/>material<sp/>pointers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>private(cell,<sp/>material)<sp/>schedule(guided)</highlight></codeline>
<codeline lineno="385"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r=0;<sp/>r<sp/>&lt;<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>cell<sp/>corresponding<sp/>to<sp/>this<sp/>FSR<sp/>from<sp/>the<sp/>geometry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classCellBasic" kindref="compound" tooltip="Represents a cell filled with a material.">CellBasic</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classSolver_1ae323198b6be6ddc402c53784c5a89b7f" kindref="member">_geometry</ref>-&gt;<ref refid="classGeometry_1acd933591916fa3f4f9d26ffca1ecd56a" kindref="member" tooltip="Find the cell for an fsr_id at a certain universe level.">findCell</ref>(univ_zero,<sp/>r));</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>cell&apos;s<sp/>material<sp/>and<sp/>assign<sp/>it<sp/>to<sp/>the<sp/>FSR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>material<sp/>=<sp/><ref refid="classSolver_1ae323198b6be6ddc402c53784c5a89b7f" kindref="member">_geometry</ref>-&gt;<ref refid="classGeometry_1adb4ac26586b662e0bf1c5a78e52b5d1c" kindref="member" tooltip="Return a pointer to a material in the geometry.">getMaterial</ref>(cell-&gt;<ref refid="classCellBasic_1a72c5170a7a99499874bf96eea3da4148" kindref="member" tooltip="Return the ID of the material filling the cellbasic.">getMaterial</ref>());</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a9c124fee8429fc5e44649fbb22f930b4" kindref="member">_FSR_materials</ref>[r]<sp/>=<sp/>material;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a0593585da9181e972974c1274d8f2b4f" kindref="member">DEBUG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;FSR<sp/>id<sp/>=<sp/>%d<sp/>has<sp/>cell<sp/>id<sp/>=<sp/>%d<sp/>and<sp/>material<sp/>id<sp/>=<sp/>%d<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>volume<sp/>=<sp/>%f&quot;</highlight><highlight class="normal">,<sp/>r,<sp/>cell-&gt;<ref refid="classCell_1a5ee7d2b6a1ed18804d207f937e3defaf" kindref="member" tooltip="Return the cell&amp;#39;s user-specified ID.">getId</ref>(),<sp/></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a9c124fee8429fc5e44649fbb22f930b4" kindref="member">_FSR_materials</ref>[r]-&gt;<ref refid="classMaterial_1a95de130b248a20f9237793ab92e494a3" kindref="member" tooltip="Return the material&amp;#39;s unique ID.">getUid</ref>(),<sp/><ref refid="classSolver_1a84372339d7c2b5da3f07bc8b0822f42f" kindref="member">_FSR_volumes</ref>[r]);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>all<sp/>FSRs<sp/>to<sp/>initialize<sp/>OpenMP<sp/>locks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>schedule(guided)</highlight></codeline>
<codeline lineno="401"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r=0;<sp/>r<sp/>&lt;<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>;<sp/>r++)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>omp_init_lock(&amp;<ref refid="classCPUSolver_1aa5e0750911999b1c6b5bb76228798195" kindref="member">_FSR_locks</ref>[r]);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCPUSolver_1a003f1ec12b683d237d62a23c7364dd5c" kindref="member" tooltip="Zero each track&amp;#39;s boundary fluxes for each energy group and polar angle in the &amp;quot;forward&amp;quot; and &amp;quot;reverse...">CPUSolver::zeroTrackFluxes</ref>()<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>schedule(guided)</highlight></codeline>
<codeline lineno="415"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t=0;<sp/>t<sp/>&lt;<sp/><ref refid="classSolver_1a817518832fb051823de9e8855319f02e" kindref="member">_tot_num_tracks</ref>;<sp/>t++)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d=0;<sp/>d<sp/>&lt;<sp/>2;<sp/>d++)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0;<sp/>p<sp/>&lt;<sp/><ref refid="classSolver_1a49cc179a9f47c5ca5f6d19c954d680ad" kindref="member">_num_polar</ref>;<sp/>p++)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=0;<sp/>e<sp/>&lt;<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;<sp/>e++)<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1adcfcfe1758affc74780907584fc7beaf" kindref="member">_boundary_flux</ref>(t,d,p,e)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCPUSolver_1a154cbd82754abdadb2ca57068ec12102" kindref="member" tooltip="Set the scalar flux for each energy group inside each flat source region to a constant value...">CPUSolver::flattenFSRFluxes</ref>(FP_PRECISION<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>schedule(guided)</highlight></codeline>
<codeline lineno="437"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r=0;<sp/>r<sp/>&lt;<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=0;<sp/>e<sp/>&lt;<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;<sp/>e++)</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(r,e)<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCPUSolver_1a50b87bcfca1e6e3399ad75a8c9fd6337" kindref="member" tooltip="Set the source for each energy group inside each flat source region to a constant value...">CPUSolver::flattenFSRSources</ref>(FP_PRECISION<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>schedule(guided)</highlight></codeline>
<codeline lineno="454"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r=0;<sp/>r<sp/>&lt;<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=0;<sp/>e<sp/>&lt;<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;<sp/>e++)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a935ab1926ea3d625d0c549c5f8595c07" kindref="member">_source</ref>(r,e)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1ad7d3233142b6798f9aea7330b221754c" kindref="member">_old_source</ref>(r,e)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCPUSolver_1aadf42a3cc81fc4641d259aee546e48c3" kindref="member" tooltip="Normalizes all flat source region scalar fluxes and track boundary angular fluxes to the total fissio...">CPUSolver::normalizeFluxes</ref>()<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>nu_sigma_f;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>volume;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>tot_fission_source;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>norm_factor;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>total<sp/>fission<sp/>source<sp/>for<sp/>each<sp/>region,<sp/>energy<sp/>group<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>private(volume,<sp/>nu_sigma_f)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="478"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>reduction(+:tot_fission_source)<sp/>schedule(guided)</highlight></codeline>
<codeline lineno="479"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r=0;<sp/>r<sp/>&lt;<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>pointers<sp/>to<sp/>important<sp/>data<sp/>structures<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>nu_sigma_f<sp/>=<sp/><ref refid="classSolver_1a9c124fee8429fc5e44649fbb22f930b4" kindref="member">_FSR_materials</ref>[r]-&gt;<ref refid="classMaterial_1ab9dfbf1074438717d8699601f5bb1339" kindref="member" tooltip="Return the array of the material&amp;#39;s fission cross-sections multiplied by nu .">getNuSigmaF</ref>();</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>volume<sp/>=<sp/><ref refid="classSolver_1a84372339d7c2b5da3f07bc8b0822f42f" kindref="member">_FSR_volumes</ref>[r];</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=0;<sp/>e<sp/>&lt;<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;<sp/>e++)</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a63b1f8d78d02dc5a0f2dc392597cc5af" kindref="member">_fission_sources</ref>(r,e)<sp/>=<sp/>nu_sigma_f[e]<sp/>*<sp/><ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(r,e)<sp/>*<sp/>volume;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>total<sp/>fission<sp/>source<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>tot_fission_source<sp/>=<sp/>pairwise_sum&lt;FP_PRECISION&gt;(<ref refid="classSolver_1a63b1f8d78d02dc5a0f2dc392597cc5af" kindref="member">_fission_sources</ref>,<sp/></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_num_FSRs*<ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Normalize<sp/>scalar<sp/>fluxes<sp/>in<sp/>each<sp/>region<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>norm_factor<sp/>=<sp/>1.0<sp/>/<sp/>tot_fission_source;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a0593585da9181e972974c1274d8f2b4f" kindref="member">DEBUG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;tot<sp/>fiss<sp/>src<sp/>=<sp/>%f,<sp/>Normalization<sp/>factor<sp/>=<sp/>%f&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tot_fission_source,<sp/>norm_factor);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>schedule(guided)</highlight></codeline>
<codeline lineno="500"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r=0;<sp/>r<sp/>&lt;<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=0;<sp/>e<sp/>&lt;<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;<sp/>e++)</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(r,e)<sp/>*=<sp/>norm_factor;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Normalize<sp/>angular<sp/>boundary<sp/>fluxes<sp/>for<sp/>each<sp/>track<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>schedule(guided)</highlight></codeline>
<codeline lineno="507"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/><ref refid="classSolver_1a817518832fb051823de9e8855319f02e" kindref="member">_tot_num_tracks</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j<sp/>&lt;<sp/>2;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0;<sp/>p<sp/>&lt;<sp/><ref refid="classSolver_1a49cc179a9f47c5ca5f6d19c954d680ad" kindref="member">_num_polar</ref>;<sp/>p++)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=0;<sp/>e<sp/>&lt;<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;<sp/>e++)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1adcfcfe1758affc74780907584fc7beaf" kindref="member">_boundary_flux</ref>(i,j,p,e)<sp/>*=<sp/>norm_factor;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal">FP_PRECISION<sp/><ref refid="classCPUSolver_1add777a473fdeaf1bf2928c5d05168c85" kindref="member" tooltip="Computes the total source (fission and scattering) in each flat source region.">CPUSolver::computeFSRSources</ref>()<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>scatter_source;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>fission_source;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>nu_sigma_f;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>sigma_s;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>sigma_t;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>chi;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMaterial" kindref="compound" tooltip="The material class represents a unique material and its relevant nuclear data (ie, multigroup cross-sections) for neutron transport.">Material</ref>*<sp/>material;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>source_residual<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>all<sp/>regions,<sp/>find<sp/>the<sp/>source<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>private(material,<sp/>nu_sigma_f,<sp/>chi,<sp/>\</highlight></codeline>
<codeline lineno="549"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>sigma_s,<sp/>sigma_t,<sp/>fission_source,<sp/>scatter_source)<sp/>schedule(guided)</highlight></codeline>
<codeline lineno="550"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r=0;<sp/>r<sp/>&lt;<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tid<sp/>=<sp/>omp_get_thread_num();</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>material<sp/>=<sp/><ref refid="classSolver_1a9c124fee8429fc5e44649fbb22f930b4" kindref="member">_FSR_materials</ref>[r];</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>nu_sigma_f<sp/>=<sp/>material-&gt;<ref refid="classMaterial_1ab9dfbf1074438717d8699601f5bb1339" kindref="member" tooltip="Return the array of the material&amp;#39;s fission cross-sections multiplied by nu .">getNuSigmaF</ref>();</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>chi<sp/>=<sp/>material-&gt;<ref refid="classMaterial_1a542b94d86be7e2c63b4aec8cd4dde1cb" kindref="member" tooltip="Return the array of the material&amp;#39;s chi .">getChi</ref>();</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>sigma_s<sp/>=<sp/>material-&gt;<ref refid="classMaterial_1a8c771a7e51ac3a9323226f91cad432a0" kindref="member" tooltip="Return the array of the material&amp;#39;s scattering cross-section matrix.">getSigmaS</ref>();</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigma_t<sp/>=<sp/>material-&gt;<ref refid="classMaterial_1a79a0abbbfb65002dd7e59e6e1d871faa" kindref="member" tooltip="Return the array of the material&amp;#39;s total cross-sections.">getSigmaT</ref>();</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>fission<sp/>source<sp/>for<sp/>each<sp/>group<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=0;<sp/>e<sp/>&lt;<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;<sp/>e++)</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a63b1f8d78d02dc5a0f2dc392597cc5af" kindref="member">_fission_sources</ref>(r,e)<sp/>=<sp/><ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(r,e)<sp/>*<sp/>nu_sigma_f[e];</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>fission_source<sp/>=<sp/>pairwise_sum&lt;FP_PRECISION&gt;(&amp;<ref refid="classSolver_1a63b1f8d78d02dc5a0f2dc392597cc5af" kindref="member">_fission_sources</ref>(r,0),<sp/></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>total<sp/>scattering<sp/>source<sp/>for<sp/>group<sp/>G<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>G=0;<sp/>G<sp/>&lt;<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;<sp/>G++)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scatter_source<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g=0;<sp/>g<sp/>&lt;<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;<sp/>g++)</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a524973fbca3ad3ace58b122c01b404f0" kindref="member">_scatter_sources</ref>(r,g)<sp/>=<sp/>sigma_s[G*_num_groups+g]*<ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(r,g);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scatter_source<sp/>=<sp/>pairwise_sum&lt;FP_PRECISION&gt;(&amp;<ref refid="classSolver_1a524973fbca3ad3ace58b122c01b404f0" kindref="member">_scatter_sources</ref>(r,0),</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>total<sp/>source<sp/>for<sp/>region<sp/>r<sp/>in<sp/>group<sp/>G<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a935ab1926ea3d625d0c549c5f8595c07" kindref="member">_source</ref>(r,G)<sp/>=<sp/>((1.0<sp/>/<sp/><ref refid="classSolver_1a3c52f5e2ecbe44ebca20e6696a09e447" kindref="member">_k_eff</ref>)<sp/>*<sp/>fission_source<sp/>*</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chi[G]<sp/>+<sp/>scatter_source)<sp/>*<sp/><ref refid="GPUSolver_8h_1a662cb71fde841f2762641d9f82e1fbb5" kindref="member">ONE_OVER_FOUR_PI</ref>;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1aff69bb3f354f5c598e1117e2a3515f1b" kindref="member">_reduced_source</ref>(r,G)<sp/>=<sp/><ref refid="classSolver_1a935ab1926ea3d625d0c549c5f8595c07" kindref="member">_source</ref>(r,G)<sp/>/<sp/>sigma_t[G];</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>norm<sp/>of<sp/>residual<sp/>of<sp/>the<sp/>source<sp/>in<sp/>the<sp/>region,<sp/>group<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(<ref refid="classSolver_1a935ab1926ea3d625d0c549c5f8595c07" kindref="member">_source</ref>(r,G))<sp/>&gt;<sp/>1E-10)</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1af2285a2a6361ea1d351e3b8c55858c92" kindref="member">_source_residuals</ref>(r,G)<sp/>=<sp/>pow((<ref refid="classSolver_1a935ab1926ea3d625d0c549c5f8595c07" kindref="member">_source</ref>(r,G)<sp/>-<sp/><ref refid="classSolver_1ad7d3233142b6798f9aea7330b221754c" kindref="member">_old_source</ref>(r,G))<sp/></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/><ref refid="classSolver_1a935ab1926ea3d625d0c549c5f8595c07" kindref="member">_source</ref>(r,G),<sp/>2);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>old<sp/>source<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1ad7d3233142b6798f9aea7330b221754c" kindref="member">_old_source</ref>(r,G)<sp/>=<sp/><ref refid="classSolver_1a935ab1926ea3d625d0c549c5f8595c07" kindref="member">_source</ref>(r,G);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sum<sp/>up<sp/>the<sp/>residuals<sp/>from<sp/>each<sp/>group<sp/>and<sp/>in<sp/>each<sp/>region<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>source_residual<sp/>=<sp/>pairwise_sum&lt;FP_PRECISION&gt;(<ref refid="classSolver_1af2285a2a6361ea1d351e3b8c55858c92" kindref="member">_source_residuals</ref>,<sp/></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_num_FSRs*<ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>source_residual<sp/>=<sp/>sqrt(source_residual<sp/>/<sp/>_num_FSRs);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>source_residual;</highlight></codeline>
<codeline lineno="598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCPUSolver_1a230b68be081a8bd573bfdf3fabc75799" kindref="member" tooltip="Compute  from total fission and absorption rates.">CPUSolver::computeKeff</ref>()<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMaterial" kindref="compound" tooltip="The material class represents a unique material and its relevant nuclear data (ie, multigroup cross-sections) for neutron transport.">Material</ref>*<sp/>material;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>sigma_a;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>nu_sigma_f;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>volume;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tot_abs<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tot_fission<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/>absorption_rates<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FP_PRECISION[_num_FSRs*<ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>];</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/>fission_rates<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FP_PRECISION[_num_FSRs*<ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>];</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>all<sp/>flat<sp/>source<sp/>regions<sp/>and<sp/>compute<sp/>the<sp/>volume-weighted</highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>fission<sp/>and<sp/>absorption<sp/>rates<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>private(volume,<sp/>material,<sp/>\</highlight></codeline>
<codeline lineno="625"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>sigma_a,<sp/>nu_sigma_f)<sp/>schedule(guided)</highlight></codeline>
<codeline lineno="626"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r=0;<sp/>r<sp/>&lt;<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>volume<sp/>=<sp/><ref refid="classSolver_1a84372339d7c2b5da3f07bc8b0822f42f" kindref="member">_FSR_volumes</ref>[r];</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>material<sp/>=<sp/><ref refid="classSolver_1a9c124fee8429fc5e44649fbb22f930b4" kindref="member">_FSR_materials</ref>[r];</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>sigma_a<sp/>=<sp/>material-&gt;<ref refid="classMaterial_1ada8e6ff3194dc56f5c9ebd6947b20418" kindref="member" tooltip="Return the array of the material&amp;#39;s absorption cross-sections.">getSigmaA</ref>();</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>nu_sigma_f<sp/>=<sp/>material-&gt;<ref refid="classMaterial_1ab9dfbf1074438717d8699601f5bb1339" kindref="member" tooltip="Return the array of the material&amp;#39;s fission cross-sections multiplied by nu .">getNuSigmaF</ref>();</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=0;<sp/>e<sp/>&lt;<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;<sp/>e++)<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absorption_rates[r*_num_groups+e]<sp/>=<sp/>sigma_a[e]<sp/>*<sp/><ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(r,e);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fission_rates[r*_num_groups+e]<sp/>=<sp/>nu_sigma_f[e]<sp/>*<sp/><ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(r,e);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absorption_rates[r*_num_groups+e]<sp/>*=<sp/>volume;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fission_rates[r*_num_groups+e]<sp/>*=<sp/>volume;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reduce<sp/>absorptoin<sp/>and<sp/>fission<sp/>rates<sp/>across<sp/>FSRs,<sp/>energy<sp/>groups<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>_num_FSRs<sp/>*<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>tot_abs<sp/>=<sp/>pairwise_sum&lt;FP_PRECISION&gt;(absorption_rates,<sp/>size);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>tot_fission<sp/>=<sp/>pairwise_sum&lt;FP_PRECISION&gt;(fission_rates,<sp/>size);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>2<sp/>*<sp/>_tot_num_tracks<sp/>*<sp/><ref refid="classSolver_1a84ce3dbf9e3c4a86773161e7c92b1da1" kindref="member">_polar_times_groups</ref>;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1ab1d00b7a1ac0cddd6e0d88cc309a97aa" kindref="member">_leakage</ref><sp/>=<sp/>pairwise_sum&lt;FP_PRECISION&gt;(<ref refid="classSolver_1ace3972879027f76a99f24fd01618d123" kindref="member">_boundary_leakage</ref>,<sp/>size)<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a3c52f5e2ecbe44ebca20e6696a09e447" kindref="member">_k_eff</ref><sp/>=<sp/>tot_fission<sp/>/<sp/>(tot_abs<sp/>+<sp/><ref refid="classSolver_1ab1d00b7a1ac0cddd6e0d88cc309a97aa" kindref="member">_leakage</ref>);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a0593585da9181e972974c1274d8f2b4f" kindref="member">DEBUG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;abs<sp/>=<sp/>%f,<sp/>fission<sp/>=<sp/>%f,<sp/>leakage<sp/>=<sp/>%f,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;k_eff<sp/>=<sp/>%f&quot;</highlight><highlight class="normal">,<sp/>tot_abs,<sp/>tot_fission,<sp/><ref refid="classSolver_1ab1d00b7a1ac0cddd6e0d88cc309a97aa" kindref="member">_leakage</ref>,<sp/>_k_eff);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>absorption_rates;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>fission_rates;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCPUSolver_1a9aac0098d2d8969d87212aad0cb9c54e" kindref="member" tooltip="This method performs one transport sweep of all azimuthal angles, tracks, segments, polar angles and energy groups.">CPUSolver::transportSweep</ref>()<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_track,<sp/>max_track;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTrack" kindref="compound" tooltip="A track represents a characteristic line across the geometry.">Track</ref>*<sp/>curr_track;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_segments;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsegment" kindref="compound" tooltip="A segment represents a line segment within a single flat source region along a track.">segment</ref>*<sp/>curr_segment;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsegment" kindref="compound" tooltip="A segment represents a line segment within a single flat source region along a track.">segment</ref>*<sp/>segments;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/><ref refid="CPUSolver_8h_1a2143506339a36528e1c9d7e27501897f" kindref="member">track_flux</ref>;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a0593585da9181e972974c1274d8f2b4f" kindref="member">DEBUG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Transport<sp/>sweep<sp/>with<sp/>%d<sp/>OpenMP<sp/>threads&quot;</highlight><highlight class="normal">,<sp/><ref refid="classCPUSolver_1aae4771f6912d3ea1a3a10537a791b28e" kindref="member">_num_threads</ref>);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>flux<sp/>in<sp/>each<sp/>region<sp/>to<sp/>zero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCPUSolver_1a154cbd82754abdadb2ca57068ec12102" kindref="member" tooltip="Set the scalar flux for each energy group inside each flat source region to a constant value...">flattenFSRFluxes</ref>(0.0);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>azimuthal<sp/>angle<sp/>halfspaces<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>2;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>minimum<sp/>and<sp/>maximum<sp/>track<sp/>IDs<sp/>corresponding<sp/>to<sp/></highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>this<sp/>azimuthal<sp/>angular<sp/>halfspace<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_track<sp/>=<sp/>i<sp/>*<sp/>(_tot_num_tracks<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>max_track<sp/>=<sp/>(i<sp/>+<sp/>1)<sp/>*<sp/>(_tot_num_tracks<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>each<sp/>thread<sp/>within<sp/>this<sp/>azimuthal<sp/>angle<sp/>halfspace<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>private(curr_track,<sp/>num_segments,<sp/>\</highlight></codeline>
<codeline lineno="694"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_segment,<sp/>segments,<sp/>track_flux,<sp/>tid)<sp/>schedule(guided)</highlight></codeline>
<codeline lineno="695"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>track_id=min_track;<sp/>track_id<sp/>&lt;<sp/>max_track;<sp/>track_id++)<sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tid<sp/>=<sp/>omp_get_thread_num();</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>local<sp/>pointers<sp/>to<sp/>important<sp/>data<sp/>structures<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_track<sp/>=<sp/><ref refid="classSolver_1a775ed41fc1268312c8fb25ec994e1351" kindref="member">_tracks</ref>[track_id];</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_segments<sp/>=<sp/>curr_track-&gt;<ref refid="classTrack_1a034893295ac06eed35aac0c7ed172419" kindref="member" tooltip="Return the number of segments along this track.">getNumSegments</ref>();</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segments<sp/>=<sp/>curr_track-&gt;<ref refid="classTrack_1a796efa8dc12ef0f1073ba264f4074380" kindref="member" tooltip="Returns a vector of pointers to the track&amp;#39;s segments.">getSegments</ref>();</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>track_flux<sp/>=<sp/>&amp;<ref refid="classSolver_1adcfcfe1758affc74780907584fc7beaf" kindref="member">_boundary_flux</ref>(track_id,0,0,0);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>each<sp/>segment<sp/>in<sp/>forward<sp/>direction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s=0;<sp/>s<sp/>&lt;<sp/>num_segments;<sp/>s++)<sp/>{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_segment<sp/>=<sp/>&amp;segments[s];</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCPUSolver_1a33da888a1e5a9a07a66f33698f9acfc9" kindref="member" tooltip="Computes the contribution to the flat source region scalar flux from a single track segment...">scalarFluxTally</ref>(curr_segment,<sp/>track_flux,<sp/></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="classCPUSolver_1a719d0a4dcd9de62e0fe1985953ce44ca" kindref="member">_thread_fsr_flux</ref>(tid));</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Transfer<sp/>flux<sp/>to<sp/>outgoing<sp/>track<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCPUSolver_1aa1a8444c76db86d149fadc19ca1ae781" kindref="member" tooltip="Updates the boundary flux for a track given boundary conditions.">transferBoundaryFlux</ref>(track_id,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>track_flux);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>each<sp/>segment<sp/>in<sp/>reverse<sp/>direction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>track_flux<sp/>+=<sp/><ref refid="classSolver_1a84ce3dbf9e3c4a86773161e7c92b1da1" kindref="member">_polar_times_groups</ref>;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s=num_segments-1;<sp/>s<sp/>&gt;<sp/>-1;<sp/>s--)<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_segment<sp/>=<sp/>&amp;segments[s];</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCPUSolver_1a33da888a1e5a9a07a66f33698f9acfc9" kindref="member" tooltip="Computes the contribution to the flat source region scalar flux from a single track segment...">scalarFluxTally</ref>(curr_segment,<sp/>track_flux,<sp/></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="classCPUSolver_1a719d0a4dcd9de62e0fe1985953ce44ca" kindref="member">_thread_fsr_flux</ref>(tid));</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Transfer<sp/>flux<sp/>to<sp/>outgoing<sp/>track<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCPUSolver_1aa1a8444c76db86d149fadc19ca1ae781" kindref="member" tooltip="Updates the boundary flux for a track given boundary conditions.">transferBoundaryFlux</ref>(track_id,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>track_flux);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCPUSolver_1a33da888a1e5a9a07a66f33698f9acfc9" kindref="member" tooltip="Computes the contribution to the flat source region scalar flux from a single track segment...">CPUSolver::scalarFluxTally</ref>(<ref refid="structsegment" kindref="compound" tooltip="A segment represents a line segment within a single flat source region along a track.">segment</ref>*<sp/>curr_segment,</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/>track_flux,</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/>fsr_flux){</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/>omp_get_thread_num();</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fsr_id<sp/>=<sp/>curr_segment-&gt;<ref refid="structsegment_1ad4185c78e4df6c12a07392dfee367706" kindref="member">_region_id</ref>;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>length<sp/>=<sp/>curr_segment-&gt;<ref refid="structsegment_1a50c5a635c531d34ad3435ebcc3b6f593" kindref="member">_length</ref>;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>sigma_t<sp/>=<sp/>curr_segment-&gt;<ref refid="structsegment_1a0f8836fedfacd554b9fd650e7e89a4c0" kindref="member">_material</ref>-&gt;<ref refid="classMaterial_1a79a0abbbfb65002dd7e59e6e1d871faa" kindref="member" tooltip="Return the array of the material&amp;#39;s total cross-sections.">getSigmaT</ref>();</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>average<sp/>flux<sp/>along<sp/>this<sp/>segment<sp/>in<sp/>the<sp/>flat<sp/>source<sp/>region<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>psibar;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>exponential;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>flat<sp/>source<sp/>region<sp/>flux<sp/>buffer<sp/>to<sp/>zero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(fsr_flux,<sp/>0.0,<sp/>_num_groups<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(FP_PRECISION));</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>polar<sp/>angles<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=0;<sp/>e<sp/>&lt;<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;<sp/>e++)<sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>energy<sp/>groups<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0;<sp/>p<sp/>&lt;<sp/><ref refid="classSolver_1a49cc179a9f47c5ca5f6d19c954d680ad" kindref="member">_num_polar</ref>;<sp/>p++){</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exponential<sp/>=<sp/><ref refid="classCPUSolver_1a15c08662bd62a5042f5054a74e23391f" kindref="member" tooltip="Computes the exponential term in the transport equation for a track segment.">computeExponential</ref>(sigma_t[e],<sp/>length,<sp/>p);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psibar<sp/>=<sp/>(<ref refid="CPUSolver_8h_1a2143506339a36528e1c9d7e27501897f" kindref="member">track_flux</ref>(p,e)<sp/>-<sp/><ref refid="classSolver_1aff69bb3f354f5c598e1117e2a3515f1b" kindref="member">_reduced_source</ref>(fsr_id,e))<sp/>*<sp/>exponential;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsr_flux[e]<sp/>+=<sp/>psibar<sp/>*<sp/><ref refid="classSolver_1a8407ebcfee31a54a67e6d5ca2e3d4e6b" kindref="member">_polar_weights</ref>[p];</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CPUSolver_8h_1a2143506339a36528e1c9d7e27501897f" kindref="member">track_flux</ref>(p,e)<sp/>-=<sp/>psibar;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Atomically<sp/>increment<sp/>the<sp/>FSR<sp/>scalar<sp/>flux<sp/>from<sp/>the<sp/>temporary<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>omp_set_lock(&amp;<ref refid="classCPUSolver_1aa5e0750911999b1c6b5bb76228798195" kindref="member">_FSR_locks</ref>[fsr_id]);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=0;<sp/>e<sp/>&lt;<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;<sp/>e++)</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(fsr_id,e)<sp/>+=<sp/>fsr_flux[e];</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>omp_unset_lock(&amp;<ref refid="classCPUSolver_1aa5e0750911999b1c6b5bb76228798195" kindref="member">_FSR_locks</ref>[fsr_id]);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal">FP_PRECISION<sp/><ref refid="classCPUSolver_1a15c08662bd62a5042f5054a74e23391f" kindref="member" tooltip="Computes the exponential term in the transport equation for a track segment.">CPUSolver::computeExponential</ref>(FP_PRECISION<sp/>sigma_t,</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>length,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>exponential;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>tau<sp/>=<sp/>sigma_t<sp/>*<sp/>length;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Evaluate<sp/>the<sp/>exponential<sp/>using<sp/>the<sp/>lookup<sp/>table<sp/>-<sp/>linear<sp/>interpolation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1a1263a3948d7fe87874854460a3701d82" kindref="member">_interpolate_exponential</ref>)<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>int(tau<sp/>*<sp/><ref refid="classSolver_1a4ed58ea28163beec97a5efe1c1874c02" kindref="member">_inverse_prefactor_spacing</ref>)<sp/>*<sp/><ref refid="classSolver_1a5f9e45e5d2a93bc3b18ca2659b95ac6a" kindref="member">_two_times_num_polar</ref>;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>exponential<sp/>=<sp/>(1.<sp/>-<sp/>(<ref refid="classSolver_1a64ce3d9a61c55fa470b91b68497dd9d6" kindref="member">_prefactor_array</ref>[index+2<sp/>*<sp/>p]<sp/>*<sp/>tau<sp/>+<sp/></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a64ce3d9a61c55fa470b91b68497dd9d6" kindref="member">_prefactor_array</ref>[index<sp/>+<sp/>2<sp/>*<sp/>p<sp/>+1]));</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Evalute<sp/>the<sp/>exponential<sp/>using<sp/>the<sp/>intrinsic<sp/>exp<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>sintheta<sp/>=<sp/><ref refid="classSolver_1a4cf19c17278e367f44c6e735e437103d" kindref="member">_quad</ref>-&gt;<ref refid="classQuadrature_1a891c96ac4127b45461832bd72cbaf364" kindref="member" tooltip="Returns the  value for a particular polar angle.">getSinTheta</ref>(p);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>exponential<sp/>=<sp/>1.0<sp/>-<sp/>exp(-<sp/>tau<sp/>/<sp/>sintheta);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exponential;</highlight></codeline>
<codeline lineno="816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCPUSolver_1aa1a8444c76db86d149fadc19ca1ae781" kindref="member" tooltip="Updates the boundary flux for a track given boundary conditions.">CPUSolver::transferBoundaryFlux</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>track_id,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>direction,</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/>track_flux)<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bc;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/><ref refid="CPUSolver_8h_1a757791065f47b569864c162dc32aa8a3" kindref="member">track_leakage</ref>;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>track_out_id;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Extract<sp/>boundary<sp/>conditions<sp/>for<sp/>this<sp/>track<sp/>and<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/></highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>outgoing<sp/>reflective<sp/>track,<sp/>and<sp/>index<sp/>into<sp/>the<sp/>leakage<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>the<sp/>&quot;forward&quot;<sp/>direction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(direction)<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/><ref refid="classSolver_1a775ed41fc1268312c8fb25ec994e1351" kindref="member">_tracks</ref>[track_id]-&gt;<ref refid="classTrack_1aafdc812cdaf36e09a3341284c61b8f0b" kindref="member" tooltip="Returns whether to give the outgoing flux to the &amp;quot;forward&amp;quot; (false) or &amp;quot;reverse&amp;quot; (true) direction of t...">isReflOut</ref>()<sp/>*<sp/><ref refid="classSolver_1a84ce3dbf9e3c4a86773161e7c92b1da1" kindref="member">_polar_times_groups</ref>;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bc<sp/>=<sp/><ref refid="classSolver_1a775ed41fc1268312c8fb25ec994e1351" kindref="member">_tracks</ref>[track_id]-&gt;<ref refid="classTrack_1af84359a4e08d94a446157fce41a0f968" kindref="member" tooltip="Returns the boundary condition for the flux along the track&amp;#39;s &amp;quot;reverse&amp;quot; direction.">getBCOut</ref>();</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>track_leakage<sp/>=<sp/>&amp;<ref refid="classSolver_1ace3972879027f76a99f24fd01618d123" kindref="member">_boundary_leakage</ref>(track_id,0);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>track_out_id<sp/>=<sp/><ref refid="classSolver_1a775ed41fc1268312c8fb25ec994e1351" kindref="member">_tracks</ref>[track_id]-&gt;<ref refid="classTrack_1a87369e197bc822b7edb8a8d2fa2b0395" kindref="member" tooltip="Returns the outgoing track.">getTrackOut</ref>()-&gt;<ref refid="classTrack_1aba38ecdfdde05c79cbefaf341715a4ec" kindref="member" tooltip="Return the track&amp;#39;s unique ID.">getUid</ref>();</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>the<sp/>&quot;reverse&quot;<sp/>direction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/><ref refid="classSolver_1a775ed41fc1268312c8fb25ec994e1351" kindref="member">_tracks</ref>[track_id]-&gt;<ref refid="classTrack_1ac553046c3f61abb50c00d9c16ed045a0" kindref="member" tooltip="Returns whether to give the outgoing flux to the &amp;quot;forward&amp;quot; (false) or &amp;quot;reverse&amp;quot; (true) direction of t...">isReflIn</ref>()<sp/>*<sp/><ref refid="classSolver_1a84ce3dbf9e3c4a86773161e7c92b1da1" kindref="member">_polar_times_groups</ref>;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bc<sp/>=<sp/><ref refid="classSolver_1a775ed41fc1268312c8fb25ec994e1351" kindref="member">_tracks</ref>[track_id]-&gt;<ref refid="classTrack_1a724c791d976b2e42b320598a496b13d4" kindref="member" tooltip="Returns the boundary condition for the flux along the track&amp;#39;s &amp;quot;forward&amp;quot; direction.">getBCIn</ref>();</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>track_leakage<sp/>=<sp/>&amp;<ref refid="classSolver_1ace3972879027f76a99f24fd01618d123" kindref="member">_boundary_leakage</ref>(track_id,<ref refid="classSolver_1a84ce3dbf9e3c4a86773161e7c92b1da1" kindref="member">_polar_times_groups</ref>);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>track_out_id<sp/>=<sp/><ref refid="classSolver_1a775ed41fc1268312c8fb25ec994e1351" kindref="member">_tracks</ref>[track_id]-&gt;<ref refid="classTrack_1acb6799f18df940fc2a1165ee59b6de19" kindref="member" tooltip="Returns the incoming track.">getTrackIn</ref>()-&gt;<ref refid="classTrack_1aba38ecdfdde05c79cbefaf341715a4ec" kindref="member" tooltip="Return the track&amp;#39;s unique ID.">getUid</ref>();</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/><ref refid="CPUSolver_8h_1a1ada87108681a86ec25d66c3644e04e3" kindref="member">track_out_flux</ref><sp/>=<sp/>&amp;<ref refid="classSolver_1adcfcfe1758affc74780907584fc7beaf" kindref="member">_boundary_flux</ref>(track_out_id,0,0,start);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>polar<sp/>angles<sp/>and<sp/>energy<sp/>groups<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=0;<sp/>e<sp/>&lt;<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;<sp/>e++)<sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0;<sp/>p<sp/>&lt;<sp/><ref refid="classSolver_1a49cc179a9f47c5ca5f6d19c954d680ad" kindref="member">_num_polar</ref>;<sp/>p++)<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CPUSolver_8h_1a1ada87108681a86ec25d66c3644e04e3" kindref="member">track_out_flux</ref>(p,e)<sp/>=<sp/><ref refid="CPUSolver_8h_1a2143506339a36528e1c9d7e27501897f" kindref="member">track_flux</ref>(p,e)<sp/>*<sp/>bc;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CPUSolver_8h_1a757791065f47b569864c162dc32aa8a3" kindref="member">track_leakage</ref>(p,e)<sp/>=<sp/><ref refid="CPUSolver_8h_1a2143506339a36528e1c9d7e27501897f" kindref="member">track_flux</ref>(p,e)<sp/>*<sp/></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a8407ebcfee31a54a67e6d5ca2e3d4e6b" kindref="member">_polar_weights</ref>[p]<sp/>*<sp/>(!bc);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal">}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCPUSolver_1a92a92ed2553ba853b9a8f63114d1a844" kindref="member" tooltip="Add the source term contribution in the transport equation to the flat source region scalar flux...">CPUSolver::addSourceToScalarFlux</ref>()<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>volume;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>sigma_t;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>in<sp/>source<sp/>term<sp/>and<sp/>normalize<sp/>flux<sp/>to<sp/>volume<sp/>for<sp/>each<sp/>region<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>flat<sp/>source<sp/>regions,<sp/>energy<sp/>groups<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>private(volume,<sp/>sigma_t)<sp/>schedule(guided)</highlight></codeline>
<codeline lineno="879"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r=0;<sp/>r<sp/>&lt;<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>volume<sp/>=<sp/><ref refid="classSolver_1a84372339d7c2b5da3f07bc8b0822f42f" kindref="member">_FSR_volumes</ref>[r];</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>sigma_t<sp/>=<sp/><ref refid="classSolver_1a9c124fee8429fc5e44649fbb22f930b4" kindref="member">_FSR_materials</ref>[r]-&gt;<ref refid="classMaterial_1a79a0abbbfb65002dd7e59e6e1d871faa" kindref="member" tooltip="Return the array of the material&amp;#39;s total cross-sections.">getSigmaT</ref>();</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=0;<sp/>e<sp/>&lt;<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;<sp/>e++)<sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(r,e)<sp/>*=<sp/>0.5;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(r,e)<sp/>=<sp/><ref refid="GPUSolver_8h_1ac6b39b7a27b735f3a62be33f38041985" kindref="member">FOUR_PI</ref><sp/>*<sp/><ref refid="classSolver_1aff69bb3f354f5c598e1117e2a3515f1b" kindref="member">_reduced_source</ref>(r,e)<sp/>+<sp/></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(r,e)<sp/>/<sp/>(sigma_t[e]<sp/>*<sp/>volume));</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="892"><highlight class="normal">}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCPUSolver_1a4a85c27ea780c422e81f1d2f59789744" kindref="member" tooltip="Compute the fission rates in each flat source region and stores them in an array indexed by flat sour...">CPUSolver::computePinPowers</ref>()<sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a748005382152808a72b1a9177d9dc806" kindref="member">INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Computing<sp/>FSR<sp/>pin<sp/>powers...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>sigma_f;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>tot_pin_power<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>avg_pin_power<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>num_nonzero_pins<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>curr_pin_power<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>prev_pin_power<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>all<sp/>FSRs<sp/>and<sp/>compute<sp/>the<sp/>fission<sp/>rate*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>private<sp/>(sigma_f)<sp/>schedule(guided)</highlight></codeline>
<codeline lineno="914"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r=0;<sp/>r<sp/>&lt;<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigma_f<sp/>=<sp/><ref refid="classSolver_1a9c124fee8429fc5e44649fbb22f930b4" kindref="member">_FSR_materials</ref>[r]-&gt;<ref refid="classMaterial_1a36a0b94a5b3d19add9582e9dba9fce2c" kindref="member" tooltip="Return the array of the material&amp;#39;s fission cross-sections.">getSigmaF</ref>();</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=0;<sp/>e<sp/>&lt;<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;<sp/>e++)</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1ac6de9ad9091dae955848d83a91b0f3b5" kindref="member">_FSRs_to_powers</ref>[r]<sp/>+=<sp/>sigma_f[e]<sp/>*<sp/><ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(r,e);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>pin<sp/>powers<sp/>by<sp/>adding<sp/>up<sp/>the<sp/>powers<sp/>of<sp/>FSRs<sp/>in<sp/>each</highlight></codeline>
<codeline lineno="922"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>lattice<sp/>cell,<sp/>saving<sp/>lattice<sp/>cell<sp/>powers<sp/>to<sp/>files,<sp/>and<sp/>saving<sp/>the</highlight></codeline>
<codeline lineno="923"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>pin<sp/>power<sp/>corresponding<sp/>to<sp/>each<sp/>FSR<sp/>id<sp/>in<sp/>FSR_to_pin_powers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1ae323198b6be6ddc402c53784c5a89b7f" kindref="member">_geometry</ref>-&gt;<ref refid="classGeometry_1a6bd18eecf69745a7471acf5c64fe269f" kindref="member" tooltip="This method is called from the Solver after fixed source iteration to compute the powers (fission rat...">computePinPowers</ref>(<ref refid="classSolver_1ac6de9ad9091dae955848d83a91b0f3b5" kindref="member">_FSRs_to_powers</ref>,<sp/><ref refid="classSolver_1a2ae997684ddbc16e2c8575cb6dcad788" kindref="member">_FSRs_to_pin_powers</ref>);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>total<sp/>power<sp/>based<sp/>by<sp/>accumulating<sp/>the<sp/>power<sp/>of<sp/>each<sp/>unique</highlight></codeline>
<codeline lineno="928"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>pin<sp/>with<sp/>a<sp/>nonzero<sp/>power<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r=0;<sp/>r<sp/>&lt;<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_pin_power<sp/>=<sp/><ref refid="classSolver_1a2ae997684ddbc16e2c8575cb6dcad788" kindref="member">_FSRs_to_pin_powers</ref>[r];</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>this<sp/>pin<sp/>power<sp/>is<sp/>unique<sp/>and<sp/>nozero<sp/>(doesn&apos;t<sp/>match<sp/>the<sp/>previous</highlight></codeline>
<codeline lineno="933"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>pin&apos;s<sp/>power),<sp/>then<sp/>tally<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curr_pin_power<sp/>&gt;<sp/>0.<sp/>&amp;&amp;<sp/>curr_pin_power<sp/>!=<sp/>prev_pin_power)<sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tot_pin_power<sp/>+=<sp/>curr_pin_power;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_nonzero_pins++;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_pin_power<sp/>=<sp/>curr_pin_power;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>average<sp/>pin<sp/>power<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>avg_pin_power<sp/>=<sp/>tot_pin_power<sp/>/<sp/>num_nonzero_pins;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Normalize<sp/>each<sp/>pin<sp/>power<sp/>to<sp/>the<sp/>average<sp/>non-zero<sp/>pin<sp/>power<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>schedule(guided)</highlight></codeline>
<codeline lineno="946"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r=0;<sp/>r<sp/>&lt;<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>;<sp/>r++)</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a2ae997684ddbc16e2c8575cb6dcad788" kindref="member">_FSRs_to_pin_powers</ref>[r]<sp/>/=<sp/>avg_pin_power;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="950"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/CPUSolver.cpp"/>
  </compounddef>
</doxygen>
