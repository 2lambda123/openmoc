<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="GPUQuery_8cu" kind="file">
    <compoundname>GPUQuery.cu</compoundname>
    <includes refid="GPUQuery_8h" local="yes">GPUQuery.h</includes>
    <incdepgraph>
      <node id="37">
        <label>GPUQuery.h</label>
        <link refid="GPUQuery_8h"/>
      </node>
      <node id="36">
        <label>/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/dev/gpu/GPUQuery.cu</label>
        <link refid="GPUQuery.cu"/>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="GPUQuery_8cu_1a853f91c2eedba2cff7bad363edf0fd3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool machineContainsGPU</definition>
        <argsstring>()</argsstring>
        <name>machineContainsGPU</name>
        <briefdescription>
<para>Queries a node to determine whether it contains one or more GPUs. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the node contains a GPU, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/dev/gpu/GPUQuery.cu" line="8" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/dev/gpu/GPUQuery.cu" bodystart="8" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="GPUQuery_8cu_1a9f0be90b7fb80d59fc53fd519871e6a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void attachGPU</definition>
        <argsstring>(int id)</argsstring>
        <name>attachGPU</name>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Resets CUDA and sets the primary CUDA-enabled device to be the GPU with ID=0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/dev/gpu/GPUQuery.cu" line="25" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/dev/gpu/GPUQuery.cu" bodystart="25" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="GPUQuery_8cu_1a15db056353516f1fa09dd96045e97a14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printBasicGPUInfo</definition>
        <argsstring>()</argsstring>
        <name>printBasicGPUInfo</name>
        <briefdescription>
<para>Prints the basic device info for the CUDA-enabled device with ID=0. </para>        </briefdescription>
        <detaileddescription>
<para>Prints the name, compute capability, # multiprocessors and the clock rate of the device. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/dev/gpu/GPUQuery.cu" line="46" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/dev/gpu/GPUQuery.cu" bodystart="46" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="GPUQuery_8cu_1aa50af593153454a9cffa682685505c73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printDetailedGPUInfo</definition>
        <argsstring>()</argsstring>
        <name>printDetailedGPUInfo</name>
        <briefdescription>
<para>Prints the detailed device info for the CUDA-enabled device with ID=0. </para>        </briefdescription>
        <detaileddescription>
<para>Prints the total global and constant memory, shared memory and registers per multiprocessor, # threads per warp, maximum # threads per multiprocessor, maximum # threads per block, maximum threadblock dimensions, and maximum grid dimensions. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/dev/gpu/GPUQuery.cu" line="77" bodyfile="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/dev/gpu/GPUQuery.cu" bodystart="77" bodyend="106"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="GPUQuery_8h" kindref="compound" tooltip="Routines to check machine for an NVIDIA GPU and print GPU characteristics to the screen.">GPUQuery.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>machineContainsGPU()<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaGetDeviceCount(&amp;count);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>attachGPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!machineContainsGPU())<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a984de77c680eaff141ec910e25568a81" kindref="member">WARNING</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>attach<sp/>GPU<sp/>since<sp/>no<sp/>GPU<sp/>is<sp/>attached<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;to<sp/>the<sp/>machine&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaDeviceReset();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaSetDevice(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printBasicGPUInfo()<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!machineContainsGPU())<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a984de77c680eaff141ec910e25568a81" kindref="member">WARNING</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>print<sp/>basic<sp/>device<sp/>info<sp/>since<sp/>no<sp/>GPU&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>attached<sp/>to<sp/>the<sp/>machine&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dev;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaGetDevice(&amp;dev);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaDeviceProp<sp/>prop;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaGetDeviceProperties(&amp;prop,<sp/>dev);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a50d1448013c6f17125caee18aa418af7" kindref="member">NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Device<sp/>name:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>prop.name);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a50d1448013c6f17125caee18aa418af7" kindref="member">NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Device<sp/>compute<sp/>capability:<sp/>%d.%d&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prop.major,<sp/>prop.minor);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a50d1448013c6f17125caee18aa418af7" kindref="member">NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Device<sp/>#<sp/>multiprocessors:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prop.multiProcessorCount);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a50d1448013c6f17125caee18aa418af7" kindref="member">NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Device<sp/>clock<sp/>rate:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>prop.clockRate);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printDetailedGPUInfo()<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!machineContainsGPU())<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a984de77c680eaff141ec910e25568a81" kindref="member">WARNING</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>print<sp/>detailed<sp/>device<sp/>info<sp/>since<sp/>no<sp/>GPU&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>attached<sp/>to<sp/>the<sp/>machine&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dev;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaGetDevice(&amp;dev);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaDeviceProp<sp/>prop;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaGetDeviceProperties(&amp;prop,<sp/>dev);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a50d1448013c6f17125caee18aa418af7" kindref="member">NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Device<sp/>total<sp/>global<sp/>memory:<sp/>%ld&quot;</highlight><highlight class="normal">,<sp/>prop.totalGlobalMem);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a50d1448013c6f17125caee18aa418af7" kindref="member">NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Device<sp/>total<sp/>constant<sp/>memory:<sp/>%ld&quot;</highlight><highlight class="normal">,<sp/>prop.totalConstMem);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a50d1448013c6f17125caee18aa418af7" kindref="member">NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Shared<sp/>memory<sp/>per<sp/>multiprocessor:<sp/>%ld&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prop.sharedMemPerBlock);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a50d1448013c6f17125caee18aa418af7" kindref="member">NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Registers<sp/>per<sp/>multiprocessor:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>prop.regsPerBlock);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a50d1448013c6f17125caee18aa418af7" kindref="member">NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Threads<sp/>in<sp/>warp:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>prop.warpSize);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a50d1448013c6f17125caee18aa418af7" kindref="member">NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Max<sp/>threads<sp/>per<sp/>multiprocessor:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prop.maxThreadsPerMultiProcessor);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a50d1448013c6f17125caee18aa418af7" kindref="member">NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Max<sp/>threads<sp/>per<sp/>block:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>prop.maxThreadsPerBlock);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a50d1448013c6f17125caee18aa418af7" kindref="member">NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Max<sp/>thread<sp/>dimensions:<sp/>[%d,<sp/>%d,<sp/>%d]&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prop.maxThreadsDim[0],<sp/>prop.maxThreadsDim[1],<sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prop.maxThreadsDim[2]);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a50d1448013c6f17125caee18aa418af7" kindref="member">NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Max<sp/>grid<sp/>dimensions:<sp/>[%d,<sp/>%d,<sp/>%d]&quot;</highlight><highlight class="normal">,<sp/>prop.maxGridSize[0],</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prop.maxGridSize[1],<sp/>prop.maxGridSize[2]);</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/dev/gpu/GPUQuery.cu"/>
  </compounddef>
</doxygen>
