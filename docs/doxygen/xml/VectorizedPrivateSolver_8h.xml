<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="VectorizedPrivateSolver_8h" kind="file">
    <compoundname>VectorizedPrivateSolver.h</compoundname>
    <includedby refid="VectorizedPrivateSolver_8cpp" local="yes">/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/VectorizedPrivateSolver.cpp</includedby>
    <innerclass refid="classVectorizedPrivateSolver" prot="public">VectorizedPrivateSolver</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="VectorizedPrivateSolver_8h_1a96098a8f0ada349f6b315d7b1c45472f" prot="public" static="no">
        <name>_thread_flux</name>
        <param><defname>tid</defname></param>
        <param><defname>r</defname></param>
        <param><defname>e</defname></param>
        <initializer>(_thread_flux[(tid)*_num_FSRs*_num_groups+(r)*_num_groups+(e)])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indexing scheme for the thread private scalar flux for each thread in each flat source region and in each energy group </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/VectorizedPrivateSolver.h" line="20" bodyfile="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/VectorizedPrivateSolver.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classVectorizedPrivateSolver" kindref="compound">VectorizedPrivateSolver</ref> class. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="date"><para>July 18, 2013 </para></simplesect>
<simplesect kind="author"><para>William Boyd, MIT, Course 22 (<ulink url="mailto:wboyd@mit.edu">wboyd@mit.edu</ulink>) </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="9"><highlight class="preprocessor">#ifndef<sp/>VECTORIZEDPRIVATESOLVER_H_</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>VECTORIZEDPRIVATESOLVER_H_</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_USE_MATH_DEFINES</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="VectorizedSolver_8h" kindref="compound" tooltip="The VectorizedSolver class.">VectorizedSolver.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="VectorizedPrivateSolver_8h_1a96098a8f0ada349f6b315d7b1c45472f" refkind="member"><highlight class="preprocessor">#define<sp/>_thread_flux(tid,r,e)<sp/>(_thread_flux[(tid)*_num_FSRs*_num_groups+(r)*_num_groups+(e)])</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="classVectorizedPrivateSolver" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classVectorizedPrivateSolver" kindref="compound" tooltip="This is a subclass of the VectorizedSolver class. This class uses a thread private array for flat sou...">VectorizedPrivateSolver</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver" kindref="compound" tooltip="This is a subclass of the CPUSolver class which uses memory-aligned data structures and Intel&amp;#39;s auto-...">VectorizedSolver</ref><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/>_thread_flux;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initializeFluxArrays();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>flattenFSRFluxes(FP_PRECISION<sp/>value);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scalarFluxTally(<ref refid="structsegment" kindref="compound" tooltip="A segment represents a line segment within a single flat source region along a track.">segment</ref>*<sp/>curr_segment,<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/><ref refid="CPUSolver_8h_1a2143506339a36528e1c9d7e27501897f" kindref="member">track_flux</ref>,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/>fsr_flux);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>transportSweep();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reduceThreadScalarFluxes();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVectorizedPrivateSolver_1a1de9e8c8035a2a241e76942937d09428" kindref="member" tooltip="Constructor initializes empty arrays for source, flux, etc.">VectorizedPrivateSolver</ref>(<ref refid="classGeometry" kindref="compound" tooltip="The master class containing references to all geometry-related objects (surfaces, cells...">Geometry</ref>*<sp/>geometry=NULL,<sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTrackGenerator" kindref="compound" tooltip="The track generator is dedicated to generating tracks which cyclically wrap across the geometry...">TrackGenerator</ref>*<sp/>track_generator=NULL);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classVectorizedPrivateSolver_1a50b87b272a9188c0de0d5a09472d7c51" kindref="member" tooltip="Destructor deletes arrays of boundary angular flux for all tracks, scalar flux and source for each fl...">~VectorizedPrivateSolver</ref>();</highlight></codeline>
<codeline lineno="53"><highlight class="normal">};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTORIZEDPRIVATESOLVER_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/VectorizedPrivateSolver.h"/>
  </compounddef>
</doxygen>
