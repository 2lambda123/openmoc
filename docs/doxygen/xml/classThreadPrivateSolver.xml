<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="classThreadPrivateSolver" kind="class" prot="public">
    <compoundname>ThreadPrivateSolver</compoundname>
    <basecompoundref refid="classCPUSolver" prot="public" virt="non-virtual">CPUSolver</basecompoundref>
    <includes refid="ThreadPrivateSolver_8h" local="yes">openmoc/src/ThreadPrivateSolver.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classThreadPrivateSolver_1a17d86a5f763697f0f0f46e448c90d180" prot="protected" static="no" mutable="no">
        <type>FP_PRECISION *</type>
        <definition>FP_PRECISION* ThreadPrivateSolver::_thread_flux</definition>
        <argsstring></argsstring>
        <name>_thread_flux</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An array for the flat source region scalar fluxes for each thread </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/ThreadPrivateSolver.h" line="37" bodyfile="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/ThreadPrivateSolver.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classThreadPrivateSolver_1a916aa2e259b03848d5a35c9e3c29ac4b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void ThreadPrivateSolver::initializeFluxArrays</definition>
        <argsstring>()</argsstring>
        <name>initializeFluxArrays</name>
        <reimplements refid="classCPUSolver_1a8eac5804397c5e5f95d73b19a6e4cbfd">initializeFluxArrays</reimplements>
        <briefdescription>
<para>Allocates memory for track boundary angular fluxes and leakages flat source region scalar fluxes. </para>        </briefdescription>
        <detaileddescription>
<para>Deletes memory for old flux arrays if they were allocated from previous simulation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/ThreadPrivateSolver.h" line="39" bodyfile="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/ThreadPrivateSolver.cpp" bodystart="40" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classThreadPrivateSolver_1a59774ef30af398b452a767a338e01517" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void ThreadPrivateSolver::flattenFSRFluxes</definition>
        <argsstring>(FP_PRECISION value)</argsstring>
        <name>flattenFSRFluxes</name>
        <reimplements refid="classCPUSolver_1a154cbd82754abdadb2ca57068ec12102">flattenFSRFluxes</reimplements>
        <param>
          <type>FP_PRECISION</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the scalar flux for each energy group inside each flat source region to a constant value. </para>        </briefdescription>
        <detaileddescription>
<para>This method also flattens the thread private flat source region scalar flux array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to assign to each flat source region flux </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/ThreadPrivateSolver.h" line="41" bodyfile="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/ThreadPrivateSolver.cpp" bodystart="70" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classThreadPrivateSolver_1a0c49d77f127849135aded5223448d3cf" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void ThreadPrivateSolver::scalarFluxTally</definition>
        <argsstring>(segment *curr_segment, FP_PRECISION *track_flux, FP_PRECISION *fsr_flux)</argsstring>
        <name>scalarFluxTally</name>
        <reimplements refid="classCPUSolver_1a33da888a1e5a9a07a66f33698f9acfc9">scalarFluxTally</reimplements>
        <param>
          <type><ref refid="structsegment" kindref="compound">segment</ref> *</type>
          <declname>curr_segment</declname>
        </param>
        <param>
          <type>FP_PRECISION *</type>
          <declname>track_flux</declname>
        </param>
        <param>
          <type>FP_PRECISION *</type>
          <declname>fsr_flux</declname>
        </param>
        <briefdescription>
<para>Computes the contribution to the flat source region scalar flux from a single track segment. </para>        </briefdescription>
        <detaileddescription>
<para>This method integrates the angular flux for a track segment across energy groups and polar angles, and tallies it into the flat source region scalar flux, and updates the track&apos;s angular flux. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>curr_segment</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the segment of interest </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>track_flux</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the track&apos;s angular flux </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fsr_flux</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the temporary flat source region flux buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/ThreadPrivateSolver.h" line="44" bodyfile="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/ThreadPrivateSolver.cpp" bodystart="173" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classThreadPrivateSolver_1a09364c26764b7194e2e2b0c85d816f83" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ThreadPrivateSolver::reduceThreadScalarFluxes</definition>
        <argsstring>()</argsstring>
        <name>reduceThreadScalarFluxes</name>
        <briefdescription>
<para>Reduces the flat source region scalar fluxes from private thread array to a global array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/ThreadPrivateSolver.h" line="45" bodyfile="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/ThreadPrivateSolver.cpp" bodystart="206" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classThreadPrivateSolver_1ad784c540c10f88aafe54965631c139e0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void ThreadPrivateSolver::transportSweep</definition>
        <argsstring>()</argsstring>
        <name>transportSweep</name>
        <reimplements refid="classCPUSolver_1a9aac0098d2d8969d87212aad0cb9c54e">transportSweep</reimplements>
        <briefdescription>
<para>This method performs one transport sweep of all azimuthal angles, tracks, segments, polar angles and energy groups. </para>        </briefdescription>
        <detaileddescription>
<para>The method integrates the flux along each track and updates the boundary fluxes for the corresponding output track, while updating the scalar flux in each flat source region </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/ThreadPrivateSolver.h" line="46" bodyfile="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/ThreadPrivateSolver.cpp" bodystart="95" bodyend="160"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classThreadPrivateSolver_1a7621407a2e3e659ca42ace1f4d30974f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ThreadPrivateSolver::ThreadPrivateSolver</definition>
        <argsstring>(Geometry *geometry=NULL, TrackGenerator *track_generator=NULL)</argsstring>
        <name>ThreadPrivateSolver</name>
        <param>
          <type><ref refid="classGeometry" kindref="compound">Geometry</ref> *</type>
          <declname>geometry</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="classTrackGenerator" kindref="compound">TrackGenerator</ref> *</type>
          <declname>track_generator</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Constructor initializes array pointers for tracks and materials. </para>        </briefdescription>
        <detaileddescription>
<para>The constructor retrieves the number of energy groups and flat source regions and azimuthal angles from the geometry and track generator. The constructor initalizes the number of threads to a default of 1. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geometry</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional pointer to the geometry </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>track_generator</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional pointer to the trackgenerator </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/ThreadPrivateSolver.h" line="50" bodyfile="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/ThreadPrivateSolver.cpp" bodystart="13" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classThreadPrivateSolver_1a3ec19146ff0b958397cdb460b94bb9fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>ThreadPrivateSolver::~ThreadPrivateSolver</definition>
        <argsstring>()</argsstring>
        <name>~ThreadPrivateSolver</name>
        <briefdescription>
<para>Destructor calls <ref refid="classSolver" kindref="compound">Solver</ref> subclass destructor to deletes arrays for fluxes and sources. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/ThreadPrivateSolver.h" line="51" bodyfile="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/ThreadPrivateSolver.cpp" bodystart="25" bodyend="31"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This is a subclass of the <ref refid="classCPUSolver" kindref="compound">CPUSolver</ref> which uses thread private arrays for the flat source region scalar fluxes to minimize OMP atomics. </para>    </briefdescription>
    <detaileddescription>
<para>Since this class stores a separate copy of the flat source region scalar fluxes for each OMP thread, the memory requirements are greater than for the <ref refid="classCPUSolver" kindref="compound">CPUSolver</ref>. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="93">
        <label>Solver</label>
        <link refid="classSolver"/>
      </node>
      <node id="92">
        <label>CPUSolver</label>
        <link refid="classCPUSolver"/>
        <childnode refid="93" relation="public-inheritance">
        </childnode>
      </node>
      <node id="91">
        <label>ThreadPrivateSolver</label>
        <link refid="classThreadPrivateSolver"/>
        <childnode refid="92" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="96">
        <label>Solver</label>
        <link refid="classSolver"/>
        <childnode refid="97" relation="usage">
          <edgelabel>_geometry</edgelabel>
        </childnode>
        <childnode refid="98" relation="usage">
          <edgelabel>_FSR_materials</edgelabel>
        </childnode>
        <childnode refid="99" relation="usage">
          <edgelabel>_tracks</edgelabel>
        </childnode>
        <childnode refid="100" relation="usage">
          <edgelabel>_quad</edgelabel>
        </childnode>
        <childnode refid="101" relation="usage">
          <edgelabel>_track_generator</edgelabel>
        </childnode>
        <childnode refid="102" relation="usage">
          <edgelabel>_timer</edgelabel>
        </childnode>
      </node>
      <node id="95">
        <label>CPUSolver</label>
        <link refid="classCPUSolver"/>
        <childnode refid="96" relation="public-inheritance">
        </childnode>
      </node>
      <node id="98">
        <label>Material</label>
        <link refid="classMaterial"/>
      </node>
      <node id="101">
        <label>TrackGenerator</label>
        <link refid="classTrackGenerator"/>
      </node>
      <node id="102">
        <label>Timer</label>
        <link refid="classTimer"/>
      </node>
      <node id="100">
        <label>Quadrature</label>
        <link refid="classQuadrature"/>
      </node>
      <node id="97">
        <label>Geometry</label>
        <link refid="classGeometry"/>
      </node>
      <node id="94">
        <label>ThreadPrivateSolver</label>
        <link refid="classThreadPrivateSolver"/>
        <childnode refid="95" relation="public-inheritance">
        </childnode>
      </node>
      <node id="99">
        <label>Track</label>
        <link refid="classTrack"/>
      </node>
    </collaborationgraph>
    <location file="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/ThreadPrivateSolver.h" line="32" bodyfile="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/ThreadPrivateSolver.h" bodystart="32" bodyend="52"/>
    <listofallmembers>
      <member refid="classSolver_1a02f013a25d984fa74aabc4c34f829960" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_azim_weights</name></member>
      <member refid="classSolver_1adcfcfe1758affc74780907584fc7beaf" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_boundary_flux</name></member>
      <member refid="classSolver_1ace3972879027f76a99f24fd01618d123" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_boundary_leakage</name></member>
      <member refid="classSolver_1a1ce60126ba4fa0b05b08943ddd7cf295" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_converged_source</name></member>
      <member refid="classSolver_1a63b1f8d78d02dc5a0f2dc392597cc5af" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_fission_sources</name></member>
      <member refid="classCPUSolver_1aa5e0750911999b1c6b5bb76228798195" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_FSR_locks</name></member>
      <member refid="classSolver_1a9c124fee8429fc5e44649fbb22f930b4" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_FSR_materials</name></member>
      <member refid="classSolver_1a84372339d7c2b5da3f07bc8b0822f42f" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_FSR_volumes</name></member>
      <member refid="classSolver_1a2ae997684ddbc16e2c8575cb6dcad788" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_FSRs_to_pin_powers</name></member>
      <member refid="classSolver_1ac6de9ad9091dae955848d83a91b0f3b5" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_FSRs_to_powers</name></member>
      <member refid="classSolver_1ae323198b6be6ddc402c53784c5a89b7f" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_geometry</name></member>
      <member refid="classSolver_1a1263a3948d7fe87874854460a3701d82" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_interpolate_exponential</name></member>
      <member refid="classSolver_1a4ed58ea28163beec97a5efe1c1874c02" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_inverse_prefactor_spacing</name></member>
      <member refid="classSolver_1a3c52f5e2ecbe44ebca20e6696a09e447" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_k_eff</name></member>
      <member refid="classSolver_1ab1d00b7a1ac0cddd6e0d88cc309a97aa" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_leakage</name></member>
      <member refid="classSolver_1a9f0fd3a842870803f27c47ed51a83039" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_num_azim</name></member>
      <member refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_num_FSRs</name></member>
      <member refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_num_groups</name></member>
      <member refid="classSolver_1a06f3fd380731eb988cb2fc5232cb94b3" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_num_iterations</name></member>
      <member refid="classSolver_1a5b17e508bd721f49a382673efcd8ae1b" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_num_materials</name></member>
      <member refid="classSolver_1a49cc179a9f47c5ca5f6d19c954d680ad" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_num_polar</name></member>
      <member refid="classCPUSolver_1aae4771f6912d3ea1a3a10537a791b28e" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_num_threads</name></member>
      <member refid="classSolver_1a564e918dc20cdc12f40e15a86fffefc2" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_num_tracks</name></member>
      <member refid="classSolver_1ad7d3233142b6798f9aea7330b221754c" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_old_source</name></member>
      <member refid="classSolver_1a84ce3dbf9e3c4a86773161e7c92b1da1" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_polar_times_groups</name></member>
      <member refid="classSolver_1a8407ebcfee31a54a67e6d5ca2e3d4e6b" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_polar_weights</name></member>
      <member refid="classSolver_1a64ce3d9a61c55fa470b91b68497dd9d6" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_prefactor_array</name></member>
      <member refid="classSolver_1a43ee296db0a4d4cc695be82fea2e2ee5" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_prefactor_array_size</name></member>
      <member refid="classSolver_1a1a18b47465922034d8669238fedbe176" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_prefactor_max_index</name></member>
      <member refid="classSolver_1a354a2964b53e89ffb03d256eaccdeb47" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_prefactor_spacing</name></member>
      <member refid="classSolver_1a4cf19c17278e367f44c6e735e437103d" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_quad</name></member>
      <member refid="classSolver_1a3c8910d870254066e9ba89c75c3a1003" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_quadrature_type</name></member>
      <member refid="classSolver_1aff69bb3f354f5c598e1117e2a3515f1b" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_reduced_source</name></member>
      <member refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_scalar_flux</name></member>
      <member refid="classSolver_1a524973fbca3ad3ace58b122c01b404f0" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_scatter_sources</name></member>
      <member refid="classSolver_1a935ab1926ea3d625d0c549c5f8595c07" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_source</name></member>
      <member refid="classSolver_1a4aa4d18f980bbb098f839835e5e2f35d" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_source_convergence_thresh</name></member>
      <member refid="classSolver_1af2285a2a6361ea1d351e3b8c55858c92" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_source_residuals</name></member>
      <member refid="classThreadPrivateSolver_1a17d86a5f763697f0f0f46e448c90d180" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_thread_flux</name></member>
      <member refid="classCPUSolver_1a719d0a4dcd9de62e0fe1985953ce44ca" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_thread_fsr_flux</name></member>
      <member refid="classSolver_1a3cab54ec3cb374d796180b94201276ec" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_timer</name></member>
      <member refid="classSolver_1a817518832fb051823de9e8855319f02e" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_tot_num_tracks</name></member>
      <member refid="classSolver_1a7f7349dc153dd9e728697c922cf7c052" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_track_generator</name></member>
      <member refid="classSolver_1a775ed41fc1268312c8fb25ec994e1351" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_tracks</name></member>
      <member refid="classSolver_1a5f9e45e5d2a93bc3b18ca2659b95ac6a" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>_two_times_num_polar</name></member>
      <member refid="classCPUSolver_1a92a92ed2553ba853b9a8f63114d1a844" prot="protected" virt="virtual"><scope>ThreadPrivateSolver</scope><name>addSourceToScalarFlux</name></member>
      <member refid="classSolver_1a4ab290c6ca1d74230bf885cfc7f58b7a" prot="protected" virt="virtual"><scope>ThreadPrivateSolver</scope><name>checkTrackSpacing</name></member>
      <member refid="classSolver_1a4f6e2e3069aa9404fefd62be376e8390" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>clearTimerSplits</name></member>
      <member refid="classCPUSolver_1a15c08662bd62a5042f5054a74e23391f" prot="protected" virt="virtual"><scope>ThreadPrivateSolver</scope><name>computeExponential</name></member>
      <member refid="classCPUSolver_1add777a473fdeaf1bf2928c5d05168c85" prot="protected" virt="virtual"><scope>ThreadPrivateSolver</scope><name>computeFSRSources</name></member>
      <member refid="classCPUSolver_1a230b68be081a8bd573bfdf3fabc75799" prot="protected" virt="virtual"><scope>ThreadPrivateSolver</scope><name>computeKeff</name></member>
      <member refid="classCPUSolver_1a4a85c27ea780c422e81f1d2f59789744" prot="public" virt="virtual"><scope>ThreadPrivateSolver</scope><name>computePinPowers</name></member>
      <member refid="classSolver_1af8358a66a7cbd56339211f80a2365678" prot="public" virt="virtual"><scope>ThreadPrivateSolver</scope><name>convergeSource</name></member>
      <member refid="classCPUSolver_1a7a3a562bc1ec3f99ce834e6ee7f54fef" prot="public" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>CPUSolver</name></member>
      <member refid="classThreadPrivateSolver_1a59774ef30af398b452a767a338e01517" prot="protected" virt="virtual"><scope>ThreadPrivateSolver</scope><name>flattenFSRFluxes</name></member>
      <member refid="classCPUSolver_1a50b87bcfca1e6e3399ad75a8c9fd6337" prot="protected" virt="virtual"><scope>ThreadPrivateSolver</scope><name>flattenFSRSources</name></member>
      <member refid="classCPUSolver_1a57ef6e1450abb4e7ba67f582228d6241" prot="public" virt="virtual"><scope>ThreadPrivateSolver</scope><name>getFSRPinPowers</name></member>
      <member refid="classCPUSolver_1a90dc1357f3ec10f9a85ae31cefd0bd49" prot="public" virt="virtual"><scope>ThreadPrivateSolver</scope><name>getFSRPowers</name></member>
      <member refid="classCPUSolver_1ac0c9152a81ce1bd13f42aeb20ee9402c" prot="public" virt="virtual"><scope>ThreadPrivateSolver</scope><name>getFSRScalarFlux</name></member>
      <member refid="classCPUSolver_1a281e593c8d4e75fd44a6acb8e7bf91ee" prot="public" virt="virtual"><scope>ThreadPrivateSolver</scope><name>getFSRScalarFluxes</name></member>
      <member refid="classSolver_1afd394d9603d0ceba175d96a53f54d7fa" prot="public" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>getGeometry</name></member>
      <member refid="classSolver_1a4e2f2f30ca4bae8871b30bb188a29b38" prot="public" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>getNumIterations</name></member>
      <member refid="classSolver_1ae3012e43ec82aea38b7ff0c26a6e5003" prot="public" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>getNumPolarAngles</name></member>
      <member refid="classCPUSolver_1af890494e4e5353fa81f41f80d6e52cb4" prot="public" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>getNumThreads</name></member>
      <member refid="classSolver_1a8810de68de50b5f4881e89e68733960a" prot="public" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>getPolarQuadratureType</name></member>
      <member refid="classSolver_1af3ec5e2776910329b6502e9fc06d533b" prot="public" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>getSourceConvergenceThreshold</name></member>
      <member refid="classSolver_1ac47a004e88d7fde15880ab8c2b08e754" prot="public" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>getTrackGenerator</name></member>
      <member refid="classThreadPrivateSolver_1a916aa2e259b03848d5a35c9e3c29ac4b" prot="protected" virt="virtual"><scope>ThreadPrivateSolver</scope><name>initializeFluxArrays</name></member>
      <member refid="classCPUSolver_1aafc9bf9eb416a12cbe21ddde4b5f9f1c" prot="protected" virt="virtual"><scope>ThreadPrivateSolver</scope><name>initializeFSRs</name></member>
      <member refid="classCPUSolver_1a061a09ddde28c55cda28a8734eac4c1a" prot="protected" virt="virtual"><scope>ThreadPrivateSolver</scope><name>initializePolarQuadrature</name></member>
      <member refid="classCPUSolver_1aea001e3d177ce6eec0d650025ec821bc" prot="protected" virt="virtual"><scope>ThreadPrivateSolver</scope><name>initializePowerArrays</name></member>
      <member refid="classCPUSolver_1a51419d540c7eea9d29c3df963cc80784" prot="protected" virt="virtual"><scope>ThreadPrivateSolver</scope><name>initializeSourceArrays</name></member>
      <member refid="classCPUSolver_1aadf42a3cc81fc4641d259aee546e48c3" prot="protected" virt="virtual"><scope>ThreadPrivateSolver</scope><name>normalizeFluxes</name></member>
      <member refid="classCPUSolver_1ad7622d98f9b5664bcfdef86762b32f86" prot="protected" virt="virtual"><scope>ThreadPrivateSolver</scope><name>precomputePrefactors</name></member>
      <member refid="classSolver_1aeec2b08ba9d6be88cf08f1fc02658500" prot="public" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>printTimerReport</name></member>
      <member refid="classThreadPrivateSolver_1a09364c26764b7194e2e2b0c85d816f83" prot="protected" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>reduceThreadScalarFluxes</name></member>
      <member refid="classThreadPrivateSolver_1a0c49d77f127849135aded5223448d3cf" prot="protected" virt="virtual"><scope>ThreadPrivateSolver</scope><name>scalarFluxTally</name></member>
      <member refid="classSolver_1a117012c7ecaf59b70fa6b489562acc65" prot="public" virt="virtual"><scope>ThreadPrivateSolver</scope><name>setGeometry</name></member>
      <member refid="classSolver_1a069e8bf490a2f5de391f57cd9e7224ed" prot="public" virt="virtual"><scope>ThreadPrivateSolver</scope><name>setNumPolarAngles</name></member>
      <member refid="classCPUSolver_1a2407bc2c3829aff938c34a990d8fbe65" prot="public" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>setNumThreads</name></member>
      <member refid="classSolver_1aa602cd57f7b72f13050920f2c752815e" prot="public" virt="virtual"><scope>ThreadPrivateSolver</scope><name>setPolarQuadratureType</name></member>
      <member refid="classSolver_1aaace17535420183bd7c699b0a10c1e01" prot="public" virt="virtual"><scope>ThreadPrivateSolver</scope><name>setSourceConvergenceThreshold</name></member>
      <member refid="classSolver_1ac07cee2fe04515dc8e4d2980d567c4c5" prot="public" virt="virtual"><scope>ThreadPrivateSolver</scope><name>setTrackGenerator</name></member>
      <member refid="classSolver_1a950a0ef510e9eb4a92984473c668c198" prot="public" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>Solver</name></member>
      <member refid="classThreadPrivateSolver_1a7621407a2e3e659ca42ace1f4d30974f" prot="public" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>ThreadPrivateSolver</name></member>
      <member refid="classCPUSolver_1aa1a8444c76db86d149fadc19ca1ae781" prot="protected" virt="virtual"><scope>ThreadPrivateSolver</scope><name>transferBoundaryFlux</name></member>
      <member refid="classThreadPrivateSolver_1ad784c540c10f88aafe54965631c139e0" prot="protected" virt="virtual"><scope>ThreadPrivateSolver</scope><name>transportSweep</name></member>
      <member refid="classSolver_1a627f677bdb8a621a632b581bc976b2a5" prot="public" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>useExponentialInterpolation</name></member>
      <member refid="classSolver_1a5400c11874dac7f00ade6e7c2d573aee" prot="public" virt="non-virtual"><scope>ThreadPrivateSolver</scope><name>useExponentialIntrinsic</name></member>
      <member refid="classCPUSolver_1a003f1ec12b683d237d62a23c7364dd5c" prot="protected" virt="virtual"><scope>ThreadPrivateSolver</scope><name>zeroTrackFluxes</name></member>
      <member refid="classCPUSolver_1a6573957b7c5ea0b6c41b773081fd49cd" prot="public" virt="virtual"><scope>ThreadPrivateSolver</scope><name>~CPUSolver</name></member>
      <member refid="classSolver_1aba52d3c92fafceb6fe39f937f2d73db3" prot="public" virt="virtual"><scope>ThreadPrivateSolver</scope><name>~Solver</name></member>
      <member refid="classThreadPrivateSolver_1a3ec19146ff0b958397cdb460b94bb9fe" prot="public" virt="virtual"><scope>ThreadPrivateSolver</scope><name>~ThreadPrivateSolver</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
