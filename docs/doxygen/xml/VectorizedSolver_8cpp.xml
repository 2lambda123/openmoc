<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="VectorizedSolver_8cpp" kind="file">
    <compoundname>VectorizedSolver.cpp</compoundname>
    <includes refid="VectorizedSolver_8h" local="yes">VectorizedSolver.h</includes>
    <incdepgraph>
      <node id="131">
        <label>/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/VectorizedSolver.cpp</label>
        <link refid="VectorizedSolver.cpp"/>
        <childnode refid="132" relation="include">
        </childnode>
      </node>
      <node id="132">
        <label>VectorizedSolver.h</label>
        <link refid="VectorizedSolver_8h"/>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="VectorizedSolver_8h" kindref="compound" tooltip="The VectorizedSolver class.">VectorizedSolver.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><ref refid="classVectorizedSolver_1a8d24fe816af7f78a7404226c3fb284cd" kindref="member" tooltip="Constructor initializes empty arrays for source, flux, etc.">VectorizedSolver::VectorizedSolver</ref>(<ref refid="classGeometry" kindref="compound" tooltip="The master class containing references to all geometry-related objects (surfaces, cells...">Geometry</ref>*<sp/>geometry,<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTrackGenerator" kindref="compound" tooltip="The track generator is dedicated to generating tracks which cyclically wrap across the geometry...">TrackGenerator</ref>*<sp/>track_generator)<sp/>:</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCPUSolver" kindref="compound" tooltip="This a subclass of the Solver class for multi-core CPUs using OpenMP multi-threading.">CPUSolver</ref>(geometry,<sp/>track_generator)<sp/>{<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVectorizedSolver_1a0a18af2566bcaee51cec4bd55a70e7e8" kindref="member">_thread_taus</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVectorizedSolver_1a5a9623683961869eef3a171c41fb6f81" kindref="member">_thread_exponentials</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(geometry<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classVectorizedSolver_1ab4a29f8b4f8cbb4dff38ce2b85a56642" kindref="member" tooltip="Sets the geometry for the solver and aligns all material cross-section data for SIMD vector instructi...">setGeometry</ref>(geometry);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(track_generator<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1ac07cee2fe04515dc8e4d2980d567c4c5" kindref="member" tooltip="Sets the track generator with characteristic tracks for the solver.">setTrackGenerator</ref>(track_generator);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>vmlSetMode(VML_EP);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><ref refid="classVectorizedSolver_1abcda5ede1c19f0e4c91e042c7d7a110d" kindref="member" tooltip="Destructor deletes arrays of boundary angular flux for all tracks, scalar flux and source for each fl...">VectorizedSolver::~VectorizedSolver</ref>()<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1adcfcfe1758affc74780907584fc7beaf" kindref="member">_boundary_flux</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(<ref refid="classSolver_1adcfcfe1758affc74780907584fc7beaf" kindref="member">_boundary_flux</ref>);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1adcfcfe1758affc74780907584fc7beaf" kindref="member">_boundary_flux</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1ace3972879027f76a99f24fd01618d123" kindref="member">_boundary_leakage</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(<ref refid="classSolver_1ace3972879027f76a99f24fd01618d123" kindref="member">_boundary_leakage</ref>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1ace3972879027f76a99f24fd01618d123" kindref="member">_boundary_leakage</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(<ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classCPUSolver_1a719d0a4dcd9de62e0fe1985953ce44ca" kindref="member">_thread_fsr_flux</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(<ref refid="classCPUSolver_1a719d0a4dcd9de62e0fe1985953ce44ca" kindref="member">_thread_fsr_flux</ref>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCPUSolver_1a719d0a4dcd9de62e0fe1985953ce44ca" kindref="member">_thread_fsr_flux</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1a63b1f8d78d02dc5a0f2dc392597cc5af" kindref="member">_fission_sources</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(<ref refid="classSolver_1a63b1f8d78d02dc5a0f2dc392597cc5af" kindref="member">_fission_sources</ref>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a63b1f8d78d02dc5a0f2dc392597cc5af" kindref="member">_fission_sources</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1a524973fbca3ad3ace58b122c01b404f0" kindref="member">_scatter_sources</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(<ref refid="classSolver_1a524973fbca3ad3ace58b122c01b404f0" kindref="member">_scatter_sources</ref>);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a524973fbca3ad3ace58b122c01b404f0" kindref="member">_scatter_sources</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1a935ab1926ea3d625d0c549c5f8595c07" kindref="member">_source</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(<ref refid="classSolver_1a935ab1926ea3d625d0c549c5f8595c07" kindref="member">_source</ref>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a935ab1926ea3d625d0c549c5f8595c07" kindref="member">_source</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1ad7d3233142b6798f9aea7330b221754c" kindref="member">_old_source</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(<ref refid="classSolver_1ad7d3233142b6798f9aea7330b221754c" kindref="member">_old_source</ref>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1ad7d3233142b6798f9aea7330b221754c" kindref="member">_old_source</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1aff69bb3f354f5c598e1117e2a3515f1b" kindref="member">_reduced_source</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(<ref refid="classSolver_1aff69bb3f354f5c598e1117e2a3515f1b" kindref="member">_reduced_source</ref>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1aff69bb3f354f5c598e1117e2a3515f1b" kindref="member">_reduced_source</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classVectorizedSolver_1a0a18af2566bcaee51cec4bd55a70e7e8" kindref="member">_thread_taus</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(<ref refid="classVectorizedSolver_1a0a18af2566bcaee51cec4bd55a70e7e8" kindref="member">_thread_taus</ref>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classVectorizedSolver_1a0a18af2566bcaee51cec4bd55a70e7e8" kindref="member">_thread_taus</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classVectorizedSolver_1a5a9623683961869eef3a171c41fb6f81" kindref="member">_thread_exponentials</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(<ref refid="classVectorizedSolver_1a5a9623683961869eef3a171c41fb6f81" kindref="member">_thread_exponentials</ref>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classVectorizedSolver_1a5a9623683961869eef3a171c41fb6f81" kindref="member">_thread_exponentials</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1ae95a9f13a157ecf6ddc45da9718f1367" kindref="member" tooltip="Returns the number of vector lengths required to fit the number of energy groups.">VectorizedSolver::getNumVectorWidths</ref>()<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1adff1b20b7ea5cb791119fae7ee83fc1f" kindref="member">_num_vector_lengths</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1ab4a29f8b4f8cbb4dff38ce2b85a56642" kindref="member" tooltip="Sets the geometry for the solver and aligns all material cross-section data for SIMD vector instructi...">VectorizedSolver::setGeometry</ref>(<ref refid="classGeometry" kindref="compound" tooltip="The master class containing references to all geometry-related objects (surfaces, cells...">Geometry</ref>*<sp/>geometry)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVectorizedSolver_1ab4a29f8b4f8cbb4dff38ce2b85a56642" kindref="member" tooltip="Sets the geometry for the solver and aligns all material cross-section data for SIMD vector instructi...">CPUSolver::setGeometry</ref>(geometry);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>number<sp/>of<sp/>SIMD<sp/>vector<sp/>widths<sp/>needed<sp/>to<sp/>fit<sp/>energy<sp/>groups<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVectorizedSolver_1adff1b20b7ea5cb791119fae7ee83fc1f" kindref="member">_num_vector_lengths</ref><sp/>=<sp/>(<ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref><sp/>/<sp/>VEC_LENGTH)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>the<sp/>number<sp/>of<sp/>energy<sp/>groups<sp/>by<sp/>rounding<sp/>up<sp/>for<sp/>the<sp/>number</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>of<sp/>vector<sp/>widths<sp/>needed<sp/>to<sp/>accomodate<sp/>the<sp/>energy<sp/>groups<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref><sp/>=<sp/><ref refid="classVectorizedSolver_1adff1b20b7ea5cb791119fae7ee83fc1f" kindref="member">_num_vector_lengths</ref><sp/>*<sp/>VEC_LENGTH;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a84ce3dbf9e3c4a86773161e7c92b1da1" kindref="member">_polar_times_groups</ref><sp/>=<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref><sp/>*<sp/><ref refid="classSolver_1a49cc179a9f47c5ca5f6d19c954d680ad" kindref="member">_num_polar</ref>;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;short<sp/>int,<sp/>Material*&gt;<sp/>materials<sp/>=<sp/>geometry-&gt;<ref refid="classGeometry_1a5f132e61ba7bbc3cda6b4a5beaa2a443" kindref="member">getMaterials</ref>();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;short<sp/>int,<sp/>Material*&gt;::iterator<sp/>iter;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Iterate<sp/>over<sp/>each<sp/>material<sp/>and<sp/>replace<sp/>it&apos;s<sp/>xs<sp/>with<sp/>a<sp/>new<sp/>one<sp/></highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>array<sp/>that<sp/>is<sp/>a<sp/>multiple<sp/>of<sp/>VEC_LENGTH<sp/>long<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter=materials.begin();<sp/>iter<sp/>!=<sp/>materials.end();<sp/>++iter)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*iter).second-&gt;alignData();</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1a1a834bd814813507db91da90de08a0d0" kindref="member" tooltip="Allocates memory for the exponential prefactor table.">VectorizedSolver::precomputePrefactors</ref>()<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVectorizedSolver_1a1a834bd814813507db91da90de08a0d0" kindref="member" tooltip="Allocates memory for the exponential prefactor table.">CPUSolver::precomputePrefactors</ref>();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Deallocates<sp/>memory<sp/>for<sp/>the<sp/>exponentials<sp/>if<sp/>it<sp/>was<sp/>allocated<sp/>for<sp/>a</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>previous<sp/>simulation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classVectorizedSolver_1a5a9623683961869eef3a171c41fb6f81" kindref="member">_thread_exponentials</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(<ref refid="classVectorizedSolver_1a5a9623683961869eef3a171c41fb6f81" kindref="member">_thread_exponentials</ref>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocates<sp/>memory<sp/>for<sp/>an<sp/>array<sp/>of<sp/>exponential<sp/>values<sp/>for<sp/>each<sp/>thread</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>this<sp/>is<sp/>not<sp/>used<sp/>by<sp/>default,<sp/>but<sp/>can<sp/>be<sp/>to<sp/>allow<sp/>for<sp/>vectorized</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>evaluation<sp/>of<sp/>the<sp/>exponentials.<sp/>Unfortunately<sp/>this<sp/>does<sp/>not<sp/>appear</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>give<sp/>any<sp/>performance<sp/>boost.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/><ref refid="classCPUSolver_1aae4771f6912d3ea1a3a10537a791b28e" kindref="member">_num_threads</ref><sp/>*<sp/><ref refid="classSolver_1a84ce3dbf9e3c4a86773161e7c92b1da1" kindref="member">_polar_times_groups</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(FP_PRECISION);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVectorizedSolver_1a5a9623683961869eef3a171c41fb6f81" kindref="member">_thread_exponentials</ref><sp/>=<sp/>(FP_PRECISION*)_mm_malloc(size,<sp/>VEC_ALIGNMENT);</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1a6d5bac107495fe429839826859b7dfa1" kindref="member" tooltip="Allocates memory for track boundary angular fluxes and flat source region scalar fluxes and leakages...">VectorizedSolver::initializeFluxArrays</ref>()<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Delete<sp/>old<sp/>flux<sp/>arrays<sp/>if<sp/>they<sp/>exist<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1adcfcfe1758affc74780907584fc7beaf" kindref="member">_boundary_flux</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(<ref refid="classSolver_1adcfcfe1758affc74780907584fc7beaf" kindref="member">_boundary_flux</ref>);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1ace3972879027f76a99f24fd01618d123" kindref="member">_boundary_leakage</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(<ref refid="classSolver_1ace3972879027f76a99f24fd01618d123" kindref="member">_boundary_leakage</ref>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(<ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classCPUSolver_1a719d0a4dcd9de62e0fe1985953ce44ca" kindref="member">_thread_fsr_flux</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(<ref refid="classCPUSolver_1a719d0a4dcd9de62e0fe1985953ce44ca" kindref="member">_thread_fsr_flux</ref>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classVectorizedSolver_1a0a18af2566bcaee51cec4bd55a70e7e8" kindref="member">_thread_taus</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(<ref refid="classVectorizedSolver_1a0a18af2566bcaee51cec4bd55a70e7e8" kindref="member">_thread_taus</ref>);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>aligned<sp/>memory<sp/>for<sp/>all<sp/>flux<sp/>arrays<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>2<sp/>*<sp/><ref refid="classSolver_1a817518832fb051823de9e8855319f02e" kindref="member">_tot_num_tracks</ref><sp/>*<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref><sp/>*<sp/><ref refid="classSolver_1a49cc179a9f47c5ca5f6d19c954d680ad" kindref="member">_num_polar</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>*=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(FP_PRECISION);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1adcfcfe1758affc74780907584fc7beaf" kindref="member">_boundary_flux</ref><sp/>=<sp/>(FP_PRECISION*)_mm_malloc(size,<sp/>VEC_ALIGNMENT);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1ace3972879027f76a99f24fd01618d123" kindref="member">_boundary_leakage</ref><sp/>=<sp/>(FP_PRECISION*)_mm_malloc(size,<sp/>VEC_ALIGNMENT);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref><sp/>*<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(FP_PRECISION);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref><sp/>=<sp/>(FP_PRECISION*)_mm_malloc(size,<sp/>VEC_ALIGNMENT);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/><ref refid="classCPUSolver_1aae4771f6912d3ea1a3a10537a791b28e" kindref="member">_num_threads</ref><sp/>*<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(FP_PRECISION);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCPUSolver_1a719d0a4dcd9de62e0fe1985953ce44ca" kindref="member">_thread_fsr_flux</ref><sp/>=<sp/>(FP_PRECISION*)_mm_malloc(size,<sp/>VEC_ALIGNMENT);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/><ref refid="classCPUSolver_1aae4771f6912d3ea1a3a10537a791b28e" kindref="member">_num_threads</ref><sp/>*<sp/><ref refid="classSolver_1a84ce3dbf9e3c4a86773161e7c92b1da1" kindref="member">_polar_times_groups</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(FP_PRECISION);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVectorizedSolver_1a0a18af2566bcaee51cec4bd55a70e7e8" kindref="member">_thread_taus</ref><sp/>=<sp/>(FP_PRECISION*)_mm_malloc(size,<sp/>VEC_ALIGNMENT);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::exception<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>memory<sp/>for<sp/>the<sp/>solver&apos;s<sp/>fluxes.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Backtrace:%s&quot;</highlight><highlight class="normal">,<sp/>e.what());</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1a7287329d44d695ca91181e9484e32bca" kindref="member" tooltip="Allocates memory for flat source region source arrays.">VectorizedSolver::initializeSourceArrays</ref>()<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Delete<sp/>old<sp/>sources<sp/>arrays<sp/>if<sp/>they<sp/>exist<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1a63b1f8d78d02dc5a0f2dc392597cc5af" kindref="member">_fission_sources</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(<ref refid="classSolver_1a63b1f8d78d02dc5a0f2dc392597cc5af" kindref="member">_fission_sources</ref>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1a524973fbca3ad3ace58b122c01b404f0" kindref="member">_scatter_sources</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(<ref refid="classSolver_1a524973fbca3ad3ace58b122c01b404f0" kindref="member">_scatter_sources</ref>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1a935ab1926ea3d625d0c549c5f8595c07" kindref="member">_source</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(<ref refid="classSolver_1a935ab1926ea3d625d0c549c5f8595c07" kindref="member">_source</ref>);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1ad7d3233142b6798f9aea7330b221754c" kindref="member">_old_source</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(<ref refid="classSolver_1ad7d3233142b6798f9aea7330b221754c" kindref="member">_old_source</ref>);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1aff69bb3f354f5c598e1117e2a3515f1b" kindref="member">_reduced_source</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(<ref refid="classSolver_1aff69bb3f354f5c598e1117e2a3515f1b" kindref="member">_reduced_source</ref>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1af2285a2a6361ea1d351e3b8c55858c92" kindref="member">_source_residuals</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_free(<ref refid="classSolver_1af2285a2a6361ea1d351e3b8c55858c92" kindref="member">_source_residuals</ref>);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>aligned<sp/>memory<sp/>for<sp/>all<sp/>source<sp/>arrays<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref><sp/>*<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(FP_PRECISION);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a63b1f8d78d02dc5a0f2dc392597cc5af" kindref="member">_fission_sources</ref><sp/>=<sp/>(FP_PRECISION*)_mm_malloc(size,<sp/>VEC_ALIGNMENT);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a524973fbca3ad3ace58b122c01b404f0" kindref="member">_scatter_sources</ref><sp/>=<sp/>(FP_PRECISION*)_mm_malloc(size,<sp/>VEC_ALIGNMENT);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a935ab1926ea3d625d0c549c5f8595c07" kindref="member">_source</ref><sp/>=<sp/>(FP_PRECISION*)_mm_malloc(size,<sp/>VEC_ALIGNMENT);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1ad7d3233142b6798f9aea7330b221754c" kindref="member">_old_source</ref><sp/>=<sp/>(FP_PRECISION*)_mm_malloc(size,<sp/>VEC_ALIGNMENT);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1aff69bb3f354f5c598e1117e2a3515f1b" kindref="member">_reduced_source</ref><sp/>=<sp/>(FP_PRECISION*)_mm_malloc(size,<sp/>VEC_ALIGNMENT);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1af2285a2a6361ea1d351e3b8c55858c92" kindref="member">_source_residuals</ref><sp/>=<sp/>(FP_PRECISION*)_mm_malloc(size,<sp/>VEC_ALIGNMENT);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::exception<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>memory<sp/>for<sp/>the<sp/>solver&apos;s<sp/>flat<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;source<sp/>region<sp/>sources<sp/>array.<sp/>Backtrace:%s&quot;</highlight><highlight class="normal">,<sp/>e.what());</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1a6c428f0706f8c8960a88404606665704" kindref="member" tooltip="Normalizes all flat source region scalar fluxes and track boundary angular fluxes to the total fissio...">VectorizedSolver::normalizeFluxes</ref>()<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>nu_sigma_f;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>volume;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>tot_fission_source;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>norm_factor;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>total<sp/>fission<sp/>source<sp/>for<sp/>each<sp/>region,<sp/>energy<sp/>group<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>private(volume,<sp/>nu_sigma_f)<sp/>\</highlight></codeline>
<codeline lineno="264"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>reduction(+:tot_fission_source)<sp/>schedule(guided)</highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r=0;<sp/>r<sp/>&lt;<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>pointers<sp/>to<sp/>important<sp/>data<sp/>structures<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>nu_sigma_f<sp/>=<sp/><ref refid="classSolver_1a9c124fee8429fc5e44649fbb22f930b4" kindref="member">_FSR_materials</ref>[r]-&gt;<ref refid="classMaterial_1ab9dfbf1074438717d8699601f5bb1339" kindref="member" tooltip="Return the array of the material&amp;#39;s fission cross-sections multiplied by nu .">getNuSigmaF</ref>();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>volume<sp/>=<sp/><ref refid="classSolver_1a84372339d7c2b5da3f07bc8b0822f42f" kindref="member">_FSR_volumes</ref>[r];</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>energy<sp/>group<sp/>vector<sp/>lengths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v=0;<sp/>v<sp/>&lt;<sp/><ref refid="classVectorizedSolver_1adff1b20b7ea5cb791119fae7ee83fc1f" kindref="member">_num_vector_lengths</ref>;<sp/>v++)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>each<sp/>energy<sp/>group<sp/>within<sp/>this<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd<sp/>vectorlength(VEC_LENGTH)</highlight></codeline>
<codeline lineno="276"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=v*VEC_LENGTH;<sp/>e<sp/>&lt;<sp/>(v+1)*VEC_LENGTH;<sp/>e++)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a63b1f8d78d02dc5a0f2dc392597cc5af" kindref="member">_fission_sources</ref>(r,e)<sp/>=<sp/>nu_sigma_f[e]<sp/>*<sp/><ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(r,e);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a63b1f8d78d02dc5a0f2dc392597cc5af" kindref="member">_fission_sources</ref>(r,e)<sp/>*=<sp/>volume;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>total<sp/>fission<sp/>source<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>_num_FSRs<sp/>*<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>SINGLE</highlight></codeline>
<codeline lineno="286"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>tot_fission_source<sp/>=<sp/>cblas_sasum(size,<sp/>_fission_sources,<sp/>1);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight></codeline>
<codeline lineno="288"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>tot_fission_source<sp/>=<sp/>cblas_dasum(size,<sp/>_fission_sources,<sp/>1);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="290"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>normalization<sp/>factor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>norm_factor<sp/>=<sp/>1.0<sp/>/<sp/>tot_fission_source;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a0593585da9181e972974c1274d8f2b4f" kindref="member">DEBUG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;tot<sp/>fiss<sp/>src<sp/>=<sp/>%f,<sp/>Normalization<sp/>factor<sp/>=<sp/>%f&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tot_fission_source,<sp/>norm_factor);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Normalize<sp/>the<sp/>flat<sp/>source<sp/>region<sp/>scalar<sp/>fluxes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>SINGLE</highlight></codeline>
<codeline lineno="299"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>cblas_sscal(size,<sp/>norm_factor,<sp/>_scalar_flux,<sp/>1);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight></codeline>
<codeline lineno="301"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>cblas_dscal(size,<sp/>norm_factor,<sp/>_scalar_flux,<sp/>1);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="303"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Normalize<sp/>the<sp/>boundary<sp/>flux<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>2<sp/>*<sp/><ref refid="classSolver_1a817518832fb051823de9e8855319f02e" kindref="member">_tot_num_tracks</ref><sp/>*<sp/>_num_polar<sp/>*<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>SINGLE</highlight></codeline>
<codeline lineno="308"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>cblas_sscal(size,<sp/>norm_factor,<sp/><ref refid="classSolver_1adcfcfe1758affc74780907584fc7beaf" kindref="member">_boundary_flux</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight></codeline>
<codeline lineno="310"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>cblas_dscal(size,<sp/>norm_factor,<sp/><ref refid="classSolver_1adcfcfe1758affc74780907584fc7beaf" kindref="member">_boundary_flux</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="312"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">FP_PRECISION<sp/><ref refid="classVectorizedSolver_1a14a159d804a2b94f1442e6cb6046e4f0" kindref="member" tooltip="Computes the total source (fission and scattering) in each flat source region.">VectorizedSolver::computeFSRSources</ref>()<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>scatter_source;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>fission_source;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>nu_sigma_f;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>sigma_s;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>sigma_t;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>chi;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMaterial" kindref="compound" tooltip="The material class represents a unique material and its relevant nuclear data (ie, multigroup cross-sections) for neutron transport.">Material</ref>*<sp/>material;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>source_residual<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>all<sp/>regions,<sp/>find<sp/>the<sp/>source<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>private(material,<sp/>nu_sigma_f,<sp/>chi,<sp/>\</highlight></codeline>
<codeline lineno="344"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>sigma_s,<sp/>sigma_t,<sp/>fission_source,<sp/>scatter_source)<sp/>schedule(guided)</highlight></codeline>
<codeline lineno="345"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r=0;<sp/>r<sp/>&lt;<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>material<sp/>=<sp/><ref refid="classSolver_1a9c124fee8429fc5e44649fbb22f930b4" kindref="member">_FSR_materials</ref>[r];</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>nu_sigma_f<sp/>=<sp/>material-&gt;<ref refid="classMaterial_1ab9dfbf1074438717d8699601f5bb1339" kindref="member" tooltip="Return the array of the material&amp;#39;s fission cross-sections multiplied by nu .">getNuSigmaF</ref>();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>chi<sp/>=<sp/>material-&gt;<ref refid="classMaterial_1a542b94d86be7e2c63b4aec8cd4dde1cb" kindref="member" tooltip="Return the array of the material&amp;#39;s chi .">getChi</ref>();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>sigma_s<sp/>=<sp/>material-&gt;<ref refid="classMaterial_1a8c771a7e51ac3a9323226f91cad432a0" kindref="member" tooltip="Return the array of the material&amp;#39;s scattering cross-section matrix.">getSigmaS</ref>();</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigma_t<sp/>=<sp/>material-&gt;<ref refid="classMaterial_1a79a0abbbfb65002dd7e59e6e1d871faa" kindref="member" tooltip="Return the array of the material&amp;#39;s total cross-sections.">getSigmaT</ref>();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v=0;<sp/>v<sp/>&lt;<sp/><ref refid="classVectorizedSolver_1adff1b20b7ea5cb791119fae7ee83fc1f" kindref="member">_num_vector_lengths</ref>;<sp/>v++)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>fission<sp/>source<sp/>for<sp/>each<sp/>group<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd<sp/>vectorlength(VEC_LENGTH)</highlight></codeline>
<codeline lineno="357"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=v*VEC_LENGTH;<sp/>e<sp/>&lt;<sp/>(v+1)*VEC_LENGTH;<sp/>e++)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a63b1f8d78d02dc5a0f2dc392597cc5af" kindref="member">_fission_sources</ref>(r,e)<sp/>=<sp/><ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(r,e)<sp/>*<sp/>nu_sigma_f[e];</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>SINGLE</highlight></codeline>
<codeline lineno="362"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fission_source<sp/>=<sp/>cblas_sasum(<ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>,<sp/>&amp;<ref refid="classSolver_1a63b1f8d78d02dc5a0f2dc392597cc5af" kindref="member">_fission_sources</ref>(r,0),<sp/>1);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight></codeline>
<codeline lineno="364"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fission_source<sp/>=<sp/>cblas_dasum(<ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>,<sp/>&amp;<ref refid="classSolver_1a63b1f8d78d02dc5a0f2dc392597cc5af" kindref="member">_fission_sources</ref>(r,0),<sp/>1);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="366"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>total<sp/>scattering<sp/>source<sp/>for<sp/>group<sp/>G<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>G=0;<sp/>G<sp/>&lt;<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;<sp/>G++)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scatter_source<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v=0;<sp/>v<sp/>&lt;<sp/><ref refid="classVectorizedSolver_1adff1b20b7ea5cb791119fae7ee83fc1f" kindref="member">_num_vector_lengths</ref>;<sp/>v++)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd<sp/>vectorlength(VEC_LENGTH)</highlight></codeline>
<codeline lineno="374"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g=v*VEC_LENGTH;<sp/>g<sp/>&lt;<sp/>(v+1)*VEC_LENGTH;<sp/>g++)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a524973fbca3ad3ace58b122c01b404f0" kindref="member">_scatter_sources</ref>(r,g)<sp/>=<sp/>sigma_s[G*_num_groups+g]*<ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(r,g);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>SINGLE</highlight></codeline>
<codeline lineno="379"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scatter_source<sp/>=<sp/>cblas_sasum(_num_groups,<sp/>&amp;<ref refid="classSolver_1a524973fbca3ad3ace58b122c01b404f0" kindref="member">_scatter_sources</ref>(r,0),<sp/>1);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight></codeline>
<codeline lineno="381"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scatter_source<sp/>=<sp/>cblas_dasum(_num_groups,<sp/>&amp;<ref refid="classSolver_1a524973fbca3ad3ace58b122c01b404f0" kindref="member">_scatter_sources</ref>(r,0),<sp/>1);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="383"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>total<sp/>source<sp/>for<sp/>region<sp/>r<sp/>in<sp/>group<sp/>G<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a935ab1926ea3d625d0c549c5f8595c07" kindref="member">_source</ref>(r,G)<sp/>=<sp/>((1.0<sp/>/<sp/><ref refid="classSolver_1a3c52f5e2ecbe44ebca20e6696a09e447" kindref="member">_k_eff</ref>)<sp/>*<sp/>fission_source<sp/>*</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chi[G]<sp/>+<sp/>scatter_source)<sp/>*<sp/><ref refid="GPUSolver_8h_1a662cb71fde841f2762641d9f82e1fbb5" kindref="member">ONE_OVER_FOUR_PI</ref>;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1aff69bb3f354f5c598e1117e2a3515f1b" kindref="member">_reduced_source</ref>(r,G)<sp/>=<sp/><ref refid="classSolver_1a935ab1926ea3d625d0c549c5f8595c07" kindref="member">_source</ref>(r,G)<sp/>/<sp/>sigma_t[G];</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>norm<sp/>of<sp/>residual<sp/>of<sp/>the<sp/>source<sp/>in<sp/>the<sp/>region,<sp/>group<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(<ref refid="classSolver_1a935ab1926ea3d625d0c549c5f8595c07" kindref="member">_source</ref>(r,G))<sp/>&gt;<sp/>1E-10)</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1af2285a2a6361ea1d351e3b8c55858c92" kindref="member">_source_residuals</ref>(r,G)<sp/>=<sp/>pow((<ref refid="classSolver_1a935ab1926ea3d625d0c549c5f8595c07" kindref="member">_source</ref>(r,G)<sp/>-<sp/><ref refid="classSolver_1ad7d3233142b6798f9aea7330b221754c" kindref="member">_old_source</ref>(r,G))<sp/></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/><ref refid="classSolver_1a935ab1926ea3d625d0c549c5f8595c07" kindref="member">_source</ref>(r,G),<sp/>2);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>old<sp/>source<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1ad7d3233142b6798f9aea7330b221754c" kindref="member">_old_source</ref>(r,G)<sp/>=<sp/><ref refid="classSolver_1a935ab1926ea3d625d0c549c5f8595c07" kindref="member">_source</ref>(r,G);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sum<sp/>up<sp/>the<sp/>residuals<sp/>from<sp/>each<sp/>group<sp/>and<sp/>in<sp/>each<sp/>region<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>SINGLE</highlight></codeline>
<codeline lineno="402"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>source_residual<sp/>=<sp/>cblas_sasum(_num_FSRs<sp/>*<sp/>_num_groups,<sp/><ref refid="classSolver_1af2285a2a6361ea1d351e3b8c55858c92" kindref="member">_source_residuals</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight></codeline>
<codeline lineno="404"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>source_residual<sp/>=<sp/>cblas_dasum(_num_FSRs<sp/>*<sp/>_num_groups,<sp/><ref refid="classSolver_1af2285a2a6361ea1d351e3b8c55858c92" kindref="member">_source_residuals</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="406"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>source_residual<sp/>=<sp/>sqrt(source_residual<sp/>/<sp/>_num_FSRs);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>source_residual;</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1ac079f92b22b16a7584662fe36817495b" kindref="member" tooltip="Add the source term contribution in the transport equation to the flat source region scalar flux...">VectorizedSolver::addSourceToScalarFlux</ref>()<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>volume;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>sigma_t;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>in<sp/>source<sp/>term<sp/>and<sp/>normalize<sp/>flux<sp/>to<sp/>volume<sp/>for<sp/>each<sp/>region<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>flat<sp/>source<sp/>regions,<sp/>energy<sp/>groups<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>private(volume,<sp/>sigma_t)<sp/>schedule(guided)</highlight></codeline>
<codeline lineno="426"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r=0;<sp/>r<sp/>&lt;<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>volume<sp/>=<sp/><ref refid="classSolver_1a84372339d7c2b5da3f07bc8b0822f42f" kindref="member">_FSR_volumes</ref>[r];</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>sigma_t<sp/>=<sp/><ref refid="classSolver_1a9c124fee8429fc5e44649fbb22f930b4" kindref="member">_FSR_materials</ref>[r]-&gt;<ref refid="classMaterial_1a79a0abbbfb65002dd7e59e6e1d871faa" kindref="member" tooltip="Return the array of the material&amp;#39;s total cross-sections.">getSigmaT</ref>();</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>each<sp/>energy<sp/>group<sp/>vector<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v=0;<sp/>v<sp/>&lt;<sp/><ref refid="classVectorizedSolver_1adff1b20b7ea5cb791119fae7ee83fc1f" kindref="member">_num_vector_lengths</ref>;<sp/>v++)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>energy<sp/>groups<sp/>within<sp/>this<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd<sp/>vectorlength(VEC_LENGTH)</highlight></codeline>
<codeline lineno="436"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=v*VEC_LENGTH;<sp/>e<sp/>&lt;<sp/>(v+1)*VEC_LENGTH;<sp/>e++)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(r,e)<sp/>*=<sp/>0.5;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(r,e)<sp/>=<sp/><ref refid="GPUSolver_8h_1ac6b39b7a27b735f3a62be33f38041985" kindref="member">FOUR_PI</ref><sp/>*<sp/><ref refid="classSolver_1aff69bb3f354f5c598e1117e2a3515f1b" kindref="member">_reduced_source</ref>(r,e)<sp/>+<sp/></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(r,e)<sp/>/<sp/>(sigma_t[e]<sp/>*<sp/>volume));</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1a7ab9f0df852a0afd04876f6e0ec53046" kindref="member" tooltip="Compute  from total fission and absorption rates.">VectorizedSolver::computeKeff</ref>()<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMaterial" kindref="compound" tooltip="The material class represents a unique material and its relevant nuclear data (ie, multigroup cross-sections) for neutron transport.">Material</ref>*<sp/>material;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>sigma_a;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>nu_sigma_f;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>volume;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tot_abs<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tot_fission<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/>absorption_rates<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FP_PRECISION[_num_FSRs*<ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>];</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/>fission_rates<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FP_PRECISION[_num_FSRs*<ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>];</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>all<sp/>flat<sp/>source<sp/>regions<sp/>and<sp/>compute<sp/>the<sp/>volume-weighted</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>fission<sp/>and<sp/>absorption<sp/>rates<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>private(volume,<sp/>material,<sp/>\</highlight></codeline>
<codeline lineno="472"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>sigma_a,<sp/>nu_sigma_f)<sp/>schedule(guided)</highlight></codeline>
<codeline lineno="473"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r=0;<sp/>r<sp/>&lt;<sp/><ref refid="classSolver_1a2e17e8aa8a11d4300e89179984ca4347" kindref="member">_num_FSRs</ref>;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>volume<sp/>=<sp/><ref refid="classSolver_1a84372339d7c2b5da3f07bc8b0822f42f" kindref="member">_FSR_volumes</ref>[r];</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>material<sp/>=<sp/><ref refid="classSolver_1a9c124fee8429fc5e44649fbb22f930b4" kindref="member">_FSR_materials</ref>[r];</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>sigma_a<sp/>=<sp/>material-&gt;<ref refid="classMaterial_1ada8e6ff3194dc56f5c9ebd6947b20418" kindref="member" tooltip="Return the array of the material&amp;#39;s absorption cross-sections.">getSigmaA</ref>();</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>nu_sigma_f<sp/>=<sp/>material-&gt;<ref refid="classMaterial_1ab9dfbf1074438717d8699601f5bb1339" kindref="member" tooltip="Return the array of the material&amp;#39;s fission cross-sections multiplied by nu .">getNuSigmaF</ref>();</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>each<sp/>energy<sp/>group<sp/>vector<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v=0;<sp/>v<sp/>&lt;<sp/><ref refid="classVectorizedSolver_1adff1b20b7ea5cb791119fae7ee83fc1f" kindref="member">_num_vector_lengths</ref>;<sp/>v++)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>energy<sp/>groups<sp/>within<sp/>this<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd<sp/>vectorlength(VEC_LENGTH)</highlight></codeline>
<codeline lineno="485"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=v*VEC_LENGTH;<sp/>e<sp/>&lt;<sp/>(v+1)*VEC_LENGTH;<sp/>e++)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absorption_rates[r*_num_groups+e]<sp/>=<sp/>sigma_a[e]<sp/>*<sp/><ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(r,e);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fission_rates[r*_num_groups+e]<sp/>=<sp/>nu_sigma_f[e]<sp/>*<sp/><ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(r,e);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absorption_rates[r*_num_groups+e]<sp/>*=<sp/>volume;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fission_rates[r*_num_groups+e]<sp/>*=<sp/>volume;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reduce<sp/>absorption<sp/>and<sp/>fission<sp/>rates<sp/>across<sp/>FSRs,<sp/>energy<sp/>groups<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>_num_FSRs<sp/>*<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>SINGLE</highlight></codeline>
<codeline lineno="498"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>tot_abs<sp/>=<sp/>cblas_sasum(size,<sp/>absorption_rates,<sp/>1);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>tot_fission<sp/>=<sp/>cblas_sasum(size,<sp/>fission_rates,<sp/>1);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight></codeline>
<codeline lineno="501"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>tot_abs<sp/>=<sp/>cblas_dasum(size,<sp/>absorption_rates<sp/>,1);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>tot_fission<sp/>=<sp/>cblas_dasum(size,<sp/>fission_rates,<sp/>1);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="504"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>2<sp/>*<sp/><ref refid="classSolver_1a817518832fb051823de9e8855319f02e" kindref="member">_tot_num_tracks</ref><sp/>*<sp/><ref refid="classSolver_1a84ce3dbf9e3c4a86773161e7c92b1da1" kindref="member">_polar_times_groups</ref>;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>SINGLE</highlight></codeline>
<codeline lineno="509"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1ab1d00b7a1ac0cddd6e0d88cc309a97aa" kindref="member">_leakage</ref><sp/>=<sp/>cblas_sasum(size,<sp/><ref refid="classSolver_1ace3972879027f76a99f24fd01618d123" kindref="member">_boundary_leakage</ref>,<sp/>1)<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight></codeline>
<codeline lineno="511"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1ab1d00b7a1ac0cddd6e0d88cc309a97aa" kindref="member">_leakage</ref><sp/>=<sp/>cblas_dasum(size,<sp/><ref refid="classSolver_1ace3972879027f76a99f24fd01618d123" kindref="member">_boundary_leakage</ref>,<sp/>1)<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="513"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSolver_1a3c52f5e2ecbe44ebca20e6696a09e447" kindref="member">_k_eff</ref><sp/>=<sp/>tot_fission<sp/>/<sp/>(tot_abs<sp/>+<sp/><ref refid="classSolver_1ab1d00b7a1ac0cddd6e0d88cc309a97aa" kindref="member">_leakage</ref>);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a0593585da9181e972974c1274d8f2b4f" kindref="member">DEBUG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;abs<sp/>=<sp/>%f,<sp/>fission<sp/>=<sp/>%f,<sp/>leakage<sp/>=<sp/>%f,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;k_eff<sp/>=<sp/>%f&quot;</highlight><highlight class="normal">,<sp/>tot_abs,<sp/>tot_fission,<sp/><ref refid="classSolver_1ab1d00b7a1ac0cddd6e0d88cc309a97aa" kindref="member">_leakage</ref>,<sp/><ref refid="classSolver_1a3c52f5e2ecbe44ebca20e6696a09e447" kindref="member">_k_eff</ref>);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>absorption_rates;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>fission_rates;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1a9f0bec07a295caf895554307c56c2bcb" kindref="member" tooltip="Computes the contribution to the flat source region scalar flux from a single track segment...">VectorizedSolver::scalarFluxTally</ref>(<ref refid="structsegment" kindref="compound" tooltip="A segment represents a line segment within a single flat source region along a track.">segment</ref>*<sp/>curr_segment,</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/><ref refid="CPUSolver_8h_1a2143506339a36528e1c9d7e27501897f" kindref="member">track_flux</ref>,</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/>fsr_flux){</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/>omp_get_thread_num();</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fsr_id<sp/>=<sp/>curr_segment-&gt;<ref refid="structsegment_1ad4185c78e4df6c12a07392dfee367706" kindref="member">_region_id</ref>;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>length<sp/>=<sp/>curr_segment-&gt;<ref refid="structsegment_1a50c5a635c531d34ad3435ebcc3b6f593" kindref="member">_length</ref>;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>sigma_t<sp/>=<sp/>curr_segment-&gt;<ref refid="structsegment_1a0f8836fedfacd554b9fd650e7e89a4c0" kindref="member">_material</ref>-&gt;<ref refid="classMaterial_1a79a0abbbfb65002dd7e59e6e1d871faa" kindref="member" tooltip="Return the array of the material&amp;#39;s total cross-sections.">getSigmaT</ref>();</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>average<sp/>flux<sp/>along<sp/>this<sp/>segment<sp/>in<sp/>the<sp/>flat<sp/>source<sp/>region<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>psibar;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/><ref refid="VectorizedSolver_8h_1a4d1a5b2de2f5853d926488cdf1dc1e55" kindref="member">exponentials</ref><sp/>=<sp/>&amp;_thread_exponentials[tid*<ref refid="classSolver_1a84ce3dbf9e3c4a86773161e7c92b1da1" kindref="member">_polar_times_groups</ref>];</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVectorizedSolver_1abba9186ad669a2eed70fd8458666eab2" kindref="member" tooltip="Computes an array of the exponentials in the transport equation, , for each energy group and polar an...">computeExponentials</ref>(curr_segment,<sp/>exponentials);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>flat<sp/>source<sp/>region<sp/>flux<sp/>buffer<sp/>to<sp/>zero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(fsr_flux,<sp/>0.0,<sp/>_num_groups<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(FP_PRECISION));</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Tally<sp/>the<sp/>flux<sp/>contribution<sp/>from<sp/>segment<sp/>to<sp/>FSR&apos;s<sp/>scalar<sp/>flux<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>polar<sp/>angles<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0;<sp/>p<sp/>&lt;<sp/><ref refid="classSolver_1a49cc179a9f47c5ca5f6d19c954d680ad" kindref="member">_num_polar</ref>;<sp/>p++){</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>each<sp/>energy<sp/>group<sp/>vector<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v=0;<sp/>v<sp/>&lt;<sp/><ref refid="classVectorizedSolver_1adff1b20b7ea5cb791119fae7ee83fc1f" kindref="member">_num_vector_lengths</ref>;<sp/>v++)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>energy<sp/>groups<sp/>within<sp/>this<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd<sp/>vectorlength(VEC_LENGTH)<sp/>private(psibar)</highlight></codeline>
<codeline lineno="564"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=v*VEC_LENGTH;<sp/>e<sp/>&lt;<sp/>(v+1)*VEC_LENGTH;<sp/>e++)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psibar<sp/>=<sp/>(<ref refid="CPUSolver_8h_1a2143506339a36528e1c9d7e27501897f" kindref="member">track_flux</ref>(p,e)<sp/>-<sp/><ref refid="classSolver_1aff69bb3f354f5c598e1117e2a3515f1b" kindref="member">_reduced_source</ref>(fsr_id,e))<sp/>*<sp/></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="VectorizedSolver_8h_1a4d1a5b2de2f5853d926488cdf1dc1e55" kindref="member">exponentials</ref>(p,e);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsr_flux[e]<sp/>+=<sp/>psibar<sp/>*<sp/><ref refid="classSolver_1a8407ebcfee31a54a67e6d5ca2e3d4e6b" kindref="member">_polar_weights</ref>[p];</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CPUSolver_8h_1a2143506339a36528e1c9d7e27501897f" kindref="member">track_flux</ref>(p,e)<sp/>-=<sp/>psibar;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Atomically<sp/>increment<sp/>the<sp/>FSR<sp/>scalar<sp/>flux<sp/>from<sp/>the<sp/>temporary<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>omp_set_lock(&amp;<ref refid="classCPUSolver_1aa5e0750911999b1c6b5bb76228798195" kindref="member">_FSR_locks</ref>[fsr_id]);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>SINGLE</highlight></codeline>
<codeline lineno="577"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vsAdd(_num_groups,<sp/>&amp;<ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(fsr_id,0),<sp/>fsr_flux,<sp/></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(fsr_id,0));</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight></codeline>
<codeline lineno="580"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vdAdd(_num_groups,<sp/>&amp;<ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(fsr_id,0),<sp/>fsr_flux,<sp/></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="classSolver_1a60df3fd1a13667c294b1519d59a00b87" kindref="member">_scalar_flux</ref>(fsr_id,0));</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="583"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>omp_unset_lock(&amp;<ref refid="classCPUSolver_1aa5e0750911999b1c6b5bb76228798195" kindref="member">_FSR_locks</ref>[fsr_id]);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1abba9186ad669a2eed70fd8458666eab2" kindref="member" tooltip="Computes an array of the exponentials in the transport equation, , for each energy group and polar an...">VectorizedSolver::computeExponentials</ref>(<ref refid="structsegment" kindref="compound" tooltip="A segment represents a line segment within a single flat source region along a track.">segment</ref>*<sp/>curr_segment,<sp/></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/>exponentials)<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>length<sp/>=<sp/>curr_segment-&gt;<ref refid="structsegment_1a50c5a635c531d34ad3435ebcc3b6f593" kindref="member">_length</ref>;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>sigma_t<sp/>=<sp/>curr_segment-&gt;<ref refid="structsegment_1a0f8836fedfacd554b9fd650e7e89a4c0" kindref="member">_material</ref>-&gt;<ref refid="classMaterial_1a79a0abbbfb65002dd7e59e6e1d871faa" kindref="member" tooltip="Return the array of the material&amp;#39;s total cross-sections.">getSigmaT</ref>();</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Evaluate<sp/>the<sp/>exponentials<sp/>using<sp/>the<sp/>lookup<sp/>table<sp/>-<sp/>linear<sp/>interpolation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSolver_1a1263a3948d7fe87874854460a3701d82" kindref="member">_interpolate_exponential</ref>)<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>tau;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=0;<sp/>e<sp/>&lt;<sp/><ref refid="classSolver_1ab18db0ed64afb0dade6054a7a08ae3c4" kindref="member">_num_groups</ref>;<sp/>e++)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0;<sp/>p<sp/>&lt;<sp/><ref refid="classSolver_1a49cc179a9f47c5ca5f6d19c954d680ad" kindref="member">_num_polar</ref>;<sp/>p++)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tau<sp/>=<sp/>sigma_t[e]<sp/>*<sp/>length;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>int(tau<sp/>*<sp/><ref refid="classSolver_1a4ed58ea28163beec97a5efe1c1874c02" kindref="member">_inverse_prefactor_spacing</ref>)<sp/>*<sp/></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a5f9e45e5d2a93bc3b18ca2659b95ac6a" kindref="member">_two_times_num_polar</ref>;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="VectorizedSolver_8h_1a4d1a5b2de2f5853d926488cdf1dc1e55" kindref="member">exponentials</ref>(p,e)<sp/>=<sp/>(1.<sp/>-<sp/></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="classSolver_1a64ce3d9a61c55fa470b91b68497dd9d6" kindref="member">_prefactor_array</ref>[index+2<sp/>*<sp/>p]<sp/>*<sp/>tau<sp/>+<sp/></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a64ce3d9a61c55fa470b91b68497dd9d6" kindref="member">_prefactor_array</ref>[index<sp/>+<sp/>2<sp/>*<sp/>p<sp/>+1]));</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Evalute<sp/>the<sp/>exponentials<sp/>using<sp/>the<sp/>intrinsic<sp/>exp<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/>omp_get_thread_num();</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/>sinthetas<sp/>=<sp/><ref refid="classSolver_1a4cf19c17278e367f44c6e735e437103d" kindref="member">_quad</ref>-&gt;<ref refid="classQuadrature_1a678dfcec6a74deeff5369c42ba7748aa" kindref="member" tooltip="Returns a pointer to the quadrature&amp;#39;s sintheta array.">getSinThetas</ref>();</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/><ref refid="VectorizedSolver_8h_1a3c1eee3367b6bf3d9a00f66369aba5ed" kindref="member">taus</ref><sp/>=<sp/>&amp;_thread_taus[tid*<ref refid="classSolver_1a84ce3dbf9e3c4a86773161e7c92b1da1" kindref="member">_polar_times_groups</ref>];</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>tau<sp/>argument<sp/>for<sp/>the<sp/>exponentials<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0;<sp/>p<sp/>&lt;<sp/><ref refid="classSolver_1a49cc179a9f47c5ca5f6d19c954d680ad" kindref="member">_num_polar</ref>;<sp/>p++)<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v=0;<sp/>v<sp/>&lt;<sp/><ref refid="classVectorizedSolver_1adff1b20b7ea5cb791119fae7ee83fc1f" kindref="member">_num_vector_lengths</ref>;<sp/>v++)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd<sp/>vectorlength(VEC_LENGTH)</highlight></codeline>
<codeline lineno="634"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=v*VEC_LENGTH;<sp/>e<sp/>&lt;<sp/>(v+1)*VEC_LENGTH;<sp/>e++)<sp/></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="VectorizedSolver_8h_1a3c1eee3367b6bf3d9a00f66369aba5ed" kindref="member">taus</ref>(p,e)<sp/>=<sp/>-sigma_t[e]<sp/>*<sp/>length<sp/>/<sp/>sinthetas[p];</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Evaluate<sp/>the<sp/>negative<sp/>of<sp/>the<sp/>exponentials<sp/>using<sp/>Intel&apos;s<sp/>MKL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>SINGLE</highlight></codeline>
<codeline lineno="641"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>vsExp(<ref refid="classSolver_1a84ce3dbf9e3c4a86773161e7c92b1da1" kindref="member">_polar_times_groups</ref>,<sp/>taus,<sp/>exponentials);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight></codeline>
<codeline lineno="643"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>vdExp(<ref refid="classSolver_1a84ce3dbf9e3c4a86773161e7c92b1da1" kindref="member">_polar_times_groups</ref>,<sp/>taus,<sp/>exponentials);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="645"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>one<sp/>minus<sp/>the<sp/>exponentials<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0;<sp/>p<sp/>&lt;<sp/><ref refid="classSolver_1a49cc179a9f47c5ca5f6d19c954d680ad" kindref="member">_num_polar</ref>;<sp/>p++)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v=0;<sp/>v<sp/>&lt;<sp/><ref refid="classVectorizedSolver_1adff1b20b7ea5cb791119fae7ee83fc1f" kindref="member">_num_vector_lengths</ref>;<sp/>v++)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd<sp/>vectorlength(VEC_LENGTH)</highlight></codeline>
<codeline lineno="652"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=v*VEC_LENGTH;<sp/>e<sp/>&lt;<sp/>(v+1)*VEC_LENGTH;<sp/>e++)<sp/></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="VectorizedSolver_8h_1a4d1a5b2de2f5853d926488cdf1dc1e55" kindref="member">exponentials</ref>(p,e)<sp/>=<sp/>1.0<sp/>-<sp/><ref refid="VectorizedSolver_8h_1a4d1a5b2de2f5853d926488cdf1dc1e55" kindref="member">exponentials</ref>(p,e);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVectorizedSolver_1a8312a8ee4f2b34ae52fc7a21c7085bfd" kindref="member" tooltip="Updates the boundary flux for a track given boundary conditions.">VectorizedSolver::transferBoundaryFlux</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>track_id,<sp/></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>direction,</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/>track_flux)<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bc;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/><ref refid="CPUSolver_8h_1a757791065f47b569864c162dc32aa8a3" kindref="member">track_leakage</ref>;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>track_out_id;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Extract<sp/>boundary<sp/>conditions<sp/>for<sp/>this<sp/>track<sp/>and<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/></highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>outgoing<sp/>reflective<sp/>track,<sp/>and<sp/>index<sp/>into<sp/>the<sp/>leakage<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>the<sp/>&quot;forward&quot;<sp/>direction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(direction)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/><ref refid="classSolver_1a775ed41fc1268312c8fb25ec994e1351" kindref="member">_tracks</ref>[track_id]-&gt;<ref refid="classTrack_1aafdc812cdaf36e09a3341284c61b8f0b" kindref="member" tooltip="Returns whether to give the outgoing flux to the &amp;quot;forward&amp;quot; (false) or &amp;quot;reverse&amp;quot; (true) direction of t...">isReflOut</ref>()<sp/>*<sp/><ref refid="classSolver_1a84ce3dbf9e3c4a86773161e7c92b1da1" kindref="member">_polar_times_groups</ref>;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>track_leakage<sp/>=<sp/>&amp;<ref refid="classSolver_1ace3972879027f76a99f24fd01618d123" kindref="member">_boundary_leakage</ref>(track_id,0);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>track_out_id<sp/>=<sp/><ref refid="classSolver_1a775ed41fc1268312c8fb25ec994e1351" kindref="member">_tracks</ref>[track_id]-&gt;<ref refid="classTrack_1a87369e197bc822b7edb8a8d2fa2b0395" kindref="member" tooltip="Returns the outgoing track.">getTrackOut</ref>()-&gt;<ref refid="classTrack_1aba38ecdfdde05c79cbefaf341715a4ec" kindref="member" tooltip="Return the track&amp;#39;s unique ID.">getUid</ref>();</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bc<sp/>=<sp/><ref refid="classSolver_1a775ed41fc1268312c8fb25ec994e1351" kindref="member">_tracks</ref>[track_id]-&gt;<ref refid="classTrack_1af84359a4e08d94a446157fce41a0f968" kindref="member" tooltip="Returns the boundary condition for the flux along the track&amp;#39;s &amp;quot;reverse&amp;quot; direction.">getBCOut</ref>();</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>the<sp/>&quot;reverse&quot;<sp/>direction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/><ref refid="classSolver_1a775ed41fc1268312c8fb25ec994e1351" kindref="member">_tracks</ref>[track_id]-&gt;<ref refid="classTrack_1ac553046c3f61abb50c00d9c16ed045a0" kindref="member" tooltip="Returns whether to give the outgoing flux to the &amp;quot;forward&amp;quot; (false) or &amp;quot;reverse&amp;quot; (true) direction of t...">isReflIn</ref>()<sp/>*<sp/><ref refid="classSolver_1a84ce3dbf9e3c4a86773161e7c92b1da1" kindref="member">_polar_times_groups</ref>;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>track_leakage<sp/>=<sp/>&amp;<ref refid="classSolver_1ace3972879027f76a99f24fd01618d123" kindref="member">_boundary_leakage</ref>(track_id,<ref refid="classSolver_1a84ce3dbf9e3c4a86773161e7c92b1da1" kindref="member">_polar_times_groups</ref>);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>track_out_id<sp/>=<sp/><ref refid="classSolver_1a775ed41fc1268312c8fb25ec994e1351" kindref="member">_tracks</ref>[track_id]-&gt;<ref refid="classTrack_1acb6799f18df940fc2a1165ee59b6de19" kindref="member" tooltip="Returns the incoming track.">getTrackIn</ref>()-&gt;<ref refid="classTrack_1aba38ecdfdde05c79cbefaf341715a4ec" kindref="member" tooltip="Return the track&amp;#39;s unique ID.">getUid</ref>();</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bc<sp/>=<sp/><ref refid="classSolver_1a775ed41fc1268312c8fb25ec994e1351" kindref="member">_tracks</ref>[track_id]-&gt;<ref refid="classTrack_1a724c791d976b2e42b320598a496b13d4" kindref="member" tooltip="Returns the boundary condition for the flux along the track&amp;#39;s &amp;quot;forward&amp;quot; direction.">getBCIn</ref>();</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/><ref refid="CPUSolver_8h_1a1ada87108681a86ec25d66c3644e04e3" kindref="member">track_out_flux</ref><sp/>=<sp/>&amp;<ref refid="classSolver_1adcfcfe1758affc74780907584fc7beaf" kindref="member">_boundary_flux</ref>(track_out_id,0,0,start);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>polar<sp/>angles<sp/>and<sp/>energy<sp/>groups<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0;<sp/>p<sp/>&lt;<sp/><ref refid="classSolver_1a49cc179a9f47c5ca5f6d19c954d680ad" kindref="member">_num_polar</ref>;<sp/>p++)<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>each<sp/>energy<sp/>group<sp/>vector<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v=0;<sp/>v<sp/>&lt;<sp/><ref refid="classVectorizedSolver_1adff1b20b7ea5cb791119fae7ee83fc1f" kindref="member">_num_vector_lengths</ref>;<sp/>v++)<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>energy<sp/>groups<sp/>within<sp/>this<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>simd<sp/>vectorlength(VEC_LENGTH)</highlight></codeline>
<codeline lineno="706"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=v*VEC_LENGTH;<sp/>e<sp/>&lt;<sp/>(v+1)*VEC_LENGTH;<sp/>e++)<sp/>{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CPUSolver_8h_1a1ada87108681a86ec25d66c3644e04e3" kindref="member">track_out_flux</ref>(p,e)<sp/>=<sp/><ref refid="CPUSolver_8h_1a2143506339a36528e1c9d7e27501897f" kindref="member">track_flux</ref>(p,e)<sp/>*<sp/>bc;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CPUSolver_8h_1a757791065f47b569864c162dc32aa8a3" kindref="member">track_leakage</ref>(p,e)<sp/>=<sp/><ref refid="CPUSolver_8h_1a2143506339a36528e1c9d7e27501897f" kindref="member">track_flux</ref>(p,e)<sp/>*<sp/></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSolver_1a8407ebcfee31a54a67e6d5ca2e3d4e6b" kindref="member">_polar_weights</ref>[p]<sp/>*<sp/>(!bc);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/wbinventor/Documents/NSE-CRPG-Codes/OpenMOC/src/VectorizedSolver.cpp"/>
  </compounddef>
</doxygen>
