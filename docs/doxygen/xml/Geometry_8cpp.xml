<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="Geometry_8cpp" kind="file">
    <compoundname>Geometry.cpp</compoundname>
    <includes refid="Geometry_8h" local="yes">Geometry.h</includes>
    <incdepgraph>
      <node id="60">
        <label>/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Geometry.cpp</label>
        <link refid="Geometry.cpp"/>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>Geometry.h</label>
        <link refid="Geometry_8h"/>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Geometry_8h" kindref="compound" tooltip="The Geometry class.">Geometry.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><ref refid="classGeometry_1a4c301c163c63d21ed08c17b0f4e131d3" kindref="member" tooltip="Constructor initializes an empty geometry.">Geometry::Geometry</ref>()<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initializing<sp/>the<sp/>corners<sp/>to<sp/>be<sp/>infinite<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>_x_min<sp/>=<sp/>std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>_y_min<sp/>=<sp/>std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>_x_max<sp/>=<sp/>-std::numeric_limits&lt;double&gt;::max();;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>_y_max<sp/>=<sp/>-std::numeric_limits&lt;double&gt;::max();;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>_max_seg_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>_min_seg_length<sp/>=<sp/>std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Default<sp/>boundary<sp/>conditions<sp/>are<sp/>reflective<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>_top_bc<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>_bottom_bc<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>_left_bc<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>_right_bc<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>_num_FSRs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>_num_groups<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="classGeometry_1ad55e832122ab3a2833dcaa6507867678" kindref="member" tooltip="Destructor clears all references to materials, surfaces, cells, universes and lattices.">Geometry::~Geometry</ref>()<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>_materials.clear();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>_surfaces.clear();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>_cells.clear();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>_universes.clear();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>_lattices.clear();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Free<sp/>FSR<sp/>to<sp/>cells<sp/>and<sp/>materials<sp/>maps<sp/>if<sp/>they<sp/>were<sp/>initialized<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_num_FSRs<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>_FSRs_to_cells;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>_FSRs_to_materials;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1a8895b7f5b91d85926f316ac09ade9e5f" kindref="member" tooltip="Returns the total height (y extent) of the geometry in cm.">Geometry::getHeight</ref>()<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(_y_max<sp/>-<sp/>_y_min);</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1a8a7afceb0905b411d296c57fb0f8f3ba" kindref="member" tooltip="Returns the total width (x extent) of the geometry in cm.">Geometry::getWidth</ref>()<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(_x_max<sp/>-<sp/>_x_min);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1afad92e24729fe2b7cab9f979e1c4ea13" kindref="member" tooltip="Return the minimum x-coordinate contained by the geometry.">Geometry::getXMin</ref>()<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_x_min;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1a48c01ef1108c7c492a126a2ebb811537" kindref="member" tooltip="Return the maximum x-coordinate contained by the geometry.">Geometry::getXMax</ref>()<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_x_max;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1a3ad8181a37f2d0f3d81541ac52b23a5b" kindref="member" tooltip="Return the minimum y-coordinate contained by the geometry.">Geometry::getYMin</ref>()<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_y_min;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1aba2f338f09174c9278c602b0e3a89f9c" kindref="member" tooltip="Return the maximum y-coordinate contained by the geometry.">Geometry::getYMax</ref>()<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_y_max;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1add592dc8747ee8698ae699848536d731" kindref="member" tooltip="Returns the boundary condition for the top surface of the geometry.">Geometry::getBCTop</ref>()<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_top_bc;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1a8acd208353cf8d8de85335aaffec729e" kindref="member" tooltip="Returns the boundary condition for the bottom surface of the geometry.">Geometry::getBCBottom</ref>()<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_bottom_bc;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1a44e9320bff580b1ad3632d5e2d8d4429" kindref="member" tooltip="Returns the boundary condition for the left surface of the geometry.">Geometry::getBCLeft</ref>()<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_left_bc;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1a4cbe7ce12ab6bbab6d679f9a761fa6e3" kindref="member" tooltip="Returns the boundary condition for the right surface of the geometry.">Geometry::getBCRight</ref>()<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_right_bc;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1aa6c6670cf0552fc24824f074077e994b" kindref="member" tooltip="Returns the number of flat source regions in the geometry.">Geometry::getNumFSRs</ref>()<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_num_FSRs;</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1aceb6249699270b234cddfb9046ed9b2d" kindref="member" tooltip="Returns the number of energy groups for each material&amp;#39;s nuclear data.">Geometry::getNumEnergyGroups</ref>()<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classGeometry_1aee3114c51ec090bdc73b470a93ee2b32" kindref="member" tooltip="Returns the number of materials in the geometry.">getNumMaterials</ref>()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>return<sp/>the<sp/>number<sp/>of<sp/>energy<sp/>groups<sp/>from<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>geometry<sp/>since<sp/>it<sp/>does<sp/>not<sp/>contain<sp/>any<sp/>materials&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_num_groups;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1aee3114c51ec090bdc73b470a93ee2b32" kindref="member" tooltip="Returns the number of materials in the geometry.">Geometry::getNumMaterials</ref>()<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_materials.size();</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><ref refid="classGeometry_1a99b2b55bde07899f2859dc7da3a3fa40" kindref="member" tooltip="Return an array indexed by flat source region IDs which contain the corresponding cell IDs...">Geometry::getFSRtoCellMap</ref>()<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_num_FSRs<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>return<sp/>the<sp/>FSR<sp/>to<sp/>cell<sp/>map<sp/>array<sp/>since<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>geometry<sp/>has<sp/>not<sp/>initialized<sp/>FSRs.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_FSRs_to_cells;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><ref refid="classGeometry_1a31555779a6ef4fb89a56ed7b775d2921" kindref="member" tooltip="Return an array indexed by flat source region IDs which contain the corresponding material IDs...">Geometry::getFSRtoMaterialMap</ref>()<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_FSRs_to_materials;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1a63515dc65e3c80ef36dfc4a41b749fe8" kindref="member" tooltip="Return the maximum segment length computed during segmentation (cm)">Geometry::getMaxSegmentLength</ref>()<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_max_seg_length;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1a1c13e62d14cbe8dc20ebf048a5793ff2" kindref="member" tooltip="Return the minimum segment length computed during segmentation (cm)">Geometry::getMinSegmentLength</ref>()<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_min_seg_length;</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal">std::map&lt;short<sp/>int,<sp/>Material*&gt;<sp/><ref refid="classGeometry_1a5f132e61ba7bbc3cda6b4a5beaa2a443" kindref="member">Geometry::getMaterials</ref>()<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_materials;</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><ref refid="classMaterial" kindref="compound" tooltip="The material class represents a unique material and its relevant nuclear data (ie, multigroup cross-sections) for neutron transport.">Material</ref>*<sp/><ref refid="classGeometry_1adb4ac26586b662e0bf1c5a78e52b5d1c" kindref="member" tooltip="Return a pointer to a material in the geometry.">Geometry::getMaterial</ref>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMaterial" kindref="compound" tooltip="The material class represents a unique material and its relevant nuclear data (ie, multigroup cross-sections) for neutron transport.">Material</ref>*<sp/>material<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>material<sp/>=<sp/>_materials.at(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Attempted<sp/>to<sp/>retrieve<sp/>material<sp/>with<sp/>id<sp/>=<sp/>%d<sp/>which&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>does<sp/>not<sp/>exist.<sp/>Backtrace:\n%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>e.what());</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>material;</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><ref refid="classSurface" kindref="compound" tooltip="Represents a general surface in the 2D xy-plane.">Surface</ref>*<sp/><ref refid="classGeometry_1a2ae2acc34805c42ed75333ee57bf0634" kindref="member" tooltip="Return a pointer to a surface from the geometry.">Geometry::getSurface</ref>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSurface" kindref="compound" tooltip="Represents a general surface in the 2D xy-plane.">Surface</ref>*<sp/>surface<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface<sp/>=<sp/>_surfaces.at(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Attempted<sp/>to<sp/>retrieve<sp/>surface<sp/>with<sp/>id<sp/>=<sp/>%d<sp/>which<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;has<sp/>not<sp/>been<sp/>declared.<sp/>Backtrace:\n%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>e.what());</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>surface;</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><ref refid="classCell" kindref="compound" tooltip="Represents a cell inside of a universe.">Cell</ref>*<sp/><ref refid="classGeometry_1a7cb10ab8da9163f385485af22f84d319" kindref="member" tooltip="Return a pointer to a cell from the geometry.">Geometry::getCell</ref>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCell" kindref="compound" tooltip="Represents a cell inside of a universe.">Cell</ref>*<sp/>cell<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell<sp/>=<sp/>_cells.at(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Attempted<sp/>to<sp/>retrieve<sp/>cell<sp/>with<sp/>id<sp/>=<sp/>%d<sp/>which<sp/>has<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;not<sp/>been<sp/>declared.<sp/>Backtrace:\n%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>e.what());</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cell;</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><ref refid="classUniverse" kindref="compound" tooltip="A universe represents an unbounded space in the 2D xy-plane.">Universe</ref>*<sp/><ref refid="classGeometry_1a5b689d61e1a4b807b3d95bfbac3b8068" kindref="member" tooltip="Return a pointer to a universe from the geometry.">Geometry::getUniverse</ref>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classUniverse" kindref="compound" tooltip="A universe represents an unbounded space in the 2D xy-plane.">Universe</ref>*<sp/>universe<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>universe<sp/>=<sp/>_universes.at(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Attempted<sp/>to<sp/>retrieve<sp/>universe<sp/>with<sp/>id<sp/>=<sp/>%d<sp/>which<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;has<sp/>not<sp/>been<sp/>declared.<sp/>Backtrace:\n%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>e.what());</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>universe;</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><ref refid="classLattice" kindref="compound" tooltip="Represents a repeating 2D lattice array of universes.">Lattice</ref>*<sp/><ref refid="classGeometry_1aae3ca51043c163bbc51886709f420256" kindref="member" tooltip="Return a pointer to a lattice from the geometry.">Geometry::getLattice</ref>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classLattice" kindref="compound" tooltip="Represents a repeating 2D lattice array of universes.">Lattice</ref>*<sp/>lattice<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lattice<sp/>=<sp/>_lattices.at(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Attempted<sp/>to<sp/>retrieve<sp/>lattice<sp/>with<sp/>id<sp/>=<sp/>%d<sp/>which<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;has<sp/>not<sp/>been<sp/>declared.<sp/>Backtrace:\n%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>e.what());</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lattice;</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1ae59d522ea23dfae9feb61b6cb000eb5e" kindref="member" tooltip="Add a material to the geometry.">Geometry::addMaterial</ref>(<ref refid="classMaterial" kindref="compound" tooltip="The material class represents a unique material and its relevant nuclear data (ie, multigroup cross-sections) for neutron transport.">Material</ref>*<sp/>material)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Checks<sp/>if<sp/>material<sp/>with<sp/>same<sp/>id<sp/>has<sp/>already<sp/>been<sp/>added<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_materials.find(material-&gt;<ref refid="classMaterial_1adf33854b14118543ec16888b33595cc9" kindref="member" tooltip="Return the material&amp;#39;s user-defined ID.">getId</ref>())<sp/>!=<sp/>_materials.end())</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>add<sp/>a<sp/>second<sp/>material<sp/>with<sp/>id<sp/>=<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>material-&gt;<ref refid="classMaterial_1adf33854b14118543ec16888b33595cc9" kindref="member" tooltip="Return the material&amp;#39;s user-defined ID.">getId</ref>());</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Checks<sp/>the<sp/>number<sp/>of<sp/>energy<sp/>groups<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(material-&gt;<ref refid="classMaterial_1a50683c7b7c62f1473809c51f37af5a13" kindref="member" tooltip="Returns the number of energy groups for this material&amp;#39;s nuclear data.">getNumEnergyGroups</ref>()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>add<sp/>material<sp/>%d<sp/>since<sp/>it<sp/>does<sp/>not<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;contain<sp/>any<sp/>nuclear<sp/>data&quot;</highlight><highlight class="normal">,<sp/>material-&gt;<ref refid="classMaterial_1adf33854b14118543ec16888b33595cc9" kindref="member" tooltip="Return the material&amp;#39;s user-defined ID.">getId</ref>());</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_num_groups<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_num_groups<sp/>=<sp/>material-&gt;<ref refid="classMaterial_1a50683c7b7c62f1473809c51f37af5a13" kindref="member" tooltip="Returns the number of energy groups for this material&amp;#39;s nuclear data.">getNumEnergyGroups</ref>();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_num_groups<sp/>!=<sp/>material-&gt;<ref refid="classMaterial_1a50683c7b7c62f1473809c51f37af5a13" kindref="member" tooltip="Returns the number of energy groups for this material&amp;#39;s nuclear data.">getNumEnergyGroups</ref>())</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>add<sp/>material<sp/>%d<sp/>with<sp/>%d<sp/>energy<sp/>groups<sp/>to<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>geometry<sp/>which<sp/>contains<sp/>material(s)<sp/>with<sp/>%d<sp/>energy&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;groups&quot;</highlight><highlight class="normal">,<sp/>material-&gt;<ref refid="classMaterial_1adf33854b14118543ec16888b33595cc9" kindref="member" tooltip="Return the material&amp;#39;s user-defined ID.">getId</ref>(),<sp/>material-&gt;<ref refid="classMaterial_1a50683c7b7c62f1473809c51f37af5a13" kindref="member" tooltip="Returns the number of energy groups for this material&amp;#39;s nuclear data.">getNumEnergyGroups</ref>(),</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_num_groups);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>that<sp/>the<sp/>sum<sp/>of<sp/>the<sp/>material&apos;s<sp/>absorption<sp/>and<sp/>scattering</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>cross-sections<sp/>equals<sp/>its<sp/>total<sp/>cross-section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>material-&gt;<ref refid="classMaterial_1a2defb57596c868a773cea7c094fe61f6" kindref="member" tooltip="Checks if the total cross-section for this material is equal to the absorption plus scattering cross-...">checkSigmaT</ref>();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_materials.insert(std::pair&lt;short<sp/>int,Material*&gt;(material-&gt;<ref refid="classMaterial_1adf33854b14118543ec16888b33595cc9" kindref="member" tooltip="Return the material&amp;#39;s user-defined ID.">getId</ref>(),</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>material));</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a748005382152808a72b1a9177d9dc806" kindref="member">INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Added<sp/>material<sp/>with<sp/>id<sp/>=<sp/>%d<sp/>to<sp/>geometry&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>material-&gt;<ref refid="classMaterial_1adf33854b14118543ec16888b33595cc9" kindref="member" tooltip="Return the material&amp;#39;s user-defined ID.">getId</ref>());</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>add<sp/>material<sp/>with<sp/>id<sp/>=<sp/>%d.<sp/>Backtrace:&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n%s&quot;</highlight><highlight class="normal">,<sp/>material-&gt;<ref refid="classMaterial_1adf33854b14118543ec16888b33595cc9" kindref="member" tooltip="Return the material&amp;#39;s user-defined ID.">getId</ref>(),<sp/>e.what());</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1ae0c48bef75b8bd549ad5ad6edfa4644d" kindref="member" tooltip="Add a surface to the geometry.">Geometry::addSurface</ref>(<ref refid="classSurface" kindref="compound" tooltip="Represents a general surface in the 2D xy-plane.">Surface</ref>*<sp/>surface)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Checks<sp/>if<sp/>a<sp/>surface<sp/>with<sp/>the<sp/>same<sp/>id<sp/>has<sp/>already<sp/>been<sp/>added<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_surfaces.find(surface-&gt;<ref refid="classSurface_1a77ba5d7532f411134107c777861d23b2" kindref="member" tooltip="Return the surface&amp;#39;s user-defined id.">getId</ref>())<sp/>!=<sp/>_surfaces.end())</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(ERROR,<sp/>&quot;Cannot<sp/>add<sp/>a<sp/>second<sp/>surface<sp/>with<sp/>id<sp/>=<sp/>%d&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface-&gt;getId());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_surfaces.insert(std::pair&lt;short<sp/>int,<sp/>Surface*&gt;(surface-&gt;<ref refid="classSurface_1a77ba5d7532f411134107c777861d23b2" kindref="member" tooltip="Return the surface&amp;#39;s user-defined id.">getId</ref>(),</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface));</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a748005382152808a72b1a9177d9dc806" kindref="member">INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Added<sp/>surface<sp/>with<sp/>id<sp/>=<sp/>%d<sp/>to<sp/>geometry&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface-&gt;<ref refid="classSurface_1a77ba5d7532f411134107c777861d23b2" kindref="member" tooltip="Return the surface&amp;#39;s user-defined id.">getId</ref>());</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>add<sp/>surface<sp/>with<sp/>id<sp/>=<sp/>%d.<sp/>Backtrace:&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n%s&quot;</highlight><highlight class="normal">,<sp/>surface-&gt;<ref refid="classSurface_1a77ba5d7532f411134107c777861d23b2" kindref="member" tooltip="Return the surface&amp;#39;s user-defined id.">getId</ref>(),<sp/>e.what());</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>new<sp/>surface<sp/>to<sp/>update<sp/>the<sp/>boundaries<sp/>of<sp/>the<sp/>geometry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(surface-&gt;<ref refid="classSurface_1afa3ef1b6a8b18d04240ee1a3bc908780" kindref="member" tooltip="Returns the type of boundary conditions for this surface (REFLECTIVE, VACUUM or BOUNDARY_NONE)">getBoundaryType</ref>())<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="Surface_8h_1a94f2bdaf8e1769faec72dbd9e7486341a45e171c3bba46047336203d2aed3775d" kindref="member">REFLECTIVE</ref>:</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(surface-&gt;<ref refid="classSurface_1a3baea26cc38b6fb0d194fca014018174" kindref="member" tooltip="Returns the minimum x value on this surface.">getXMin</ref>()<sp/>&lt;<sp/>_x_min<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface-&gt;<ref refid="classSurface_1a3baea26cc38b6fb0d194fca014018174" kindref="member" tooltip="Returns the minimum x value on this surface.">getXMin</ref>()<sp/>!=-std::numeric_limits&lt;double&gt;::infinity())<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_x_min<sp/>=<sp/>surface-&gt;<ref refid="classSurface_1a3baea26cc38b6fb0d194fca014018174" kindref="member" tooltip="Returns the minimum x value on this surface.">getXMin</ref>();</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_left_bc<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(surface-&gt;<ref refid="classSurface_1aff659fd1b2d547d8b59df1b804d4098b" kindref="member" tooltip="Returns the maximum x value on this surface.">getXMax</ref>()<sp/>&gt;<sp/>_x_max<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface-&gt;<ref refid="classSurface_1aff659fd1b2d547d8b59df1b804d4098b" kindref="member" tooltip="Returns the maximum x value on this surface.">getXMax</ref>()<sp/>!=<sp/>std::numeric_limits&lt;double&gt;::infinity())<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_x_max<sp/>=<sp/>surface-&gt;<ref refid="classSurface_1aff659fd1b2d547d8b59df1b804d4098b" kindref="member" tooltip="Returns the maximum x value on this surface.">getXMax</ref>();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_right_bc<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(surface-&gt;<ref refid="classSurface_1a294b8bd2f04b3b938cc7c31cc4f941f3" kindref="member" tooltip="Returns the minimum y value on this surface.">getYMin</ref>()<sp/>&lt;<sp/>_y_min<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface-&gt;<ref refid="classSurface_1a294b8bd2f04b3b938cc7c31cc4f941f3" kindref="member" tooltip="Returns the minimum y value on this surface.">getYMin</ref>()<sp/>!=-std::numeric_limits&lt;double&gt;::infinity())<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_y_min<sp/>=<sp/>surface-&gt;<ref refid="classSurface_1a294b8bd2f04b3b938cc7c31cc4f941f3" kindref="member" tooltip="Returns the minimum y value on this surface.">getYMin</ref>();</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_bottom_bc<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(surface-&gt;<ref refid="classSurface_1a1ffa35335f366974886fa7c36b564fef" kindref="member" tooltip="Returns the maximum y value on this surface.">getYMax</ref>()<sp/>&gt;<sp/>_y_max<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface-&gt;<ref refid="classSurface_1a1ffa35335f366974886fa7c36b564fef" kindref="member" tooltip="Returns the maximum y value on this surface.">getYMax</ref>()<sp/>!=<sp/>std::numeric_limits&lt;double&gt;::infinity())<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_y_max<sp/>=<sp/>surface-&gt;<ref refid="classSurface_1a1ffa35335f366974886fa7c36b564fef" kindref="member" tooltip="Returns the maximum y value on this surface.">getYMax</ref>();</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_top_bc<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="Surface_8h_1a94f2bdaf8e1769faec72dbd9e7486341a227181ec341c2ea61382da6028f2754f" kindref="member">VACUUM</ref>:</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(surface-&gt;<ref refid="classSurface_1a3baea26cc38b6fb0d194fca014018174" kindref="member" tooltip="Returns the minimum x value on this surface.">getXMin</ref>()<sp/>&lt;<sp/>_x_min<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface-&gt;<ref refid="classSurface_1a3baea26cc38b6fb0d194fca014018174" kindref="member" tooltip="Returns the minimum x value on this surface.">getXMin</ref>()<sp/>!=-std::numeric_limits&lt;double&gt;::infinity())<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_x_min<sp/>=<sp/>surface-&gt;<ref refid="classSurface_1a3baea26cc38b6fb0d194fca014018174" kindref="member" tooltip="Returns the minimum x value on this surface.">getXMin</ref>();</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_left_bc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(surface-&gt;<ref refid="classSurface_1aff659fd1b2d547d8b59df1b804d4098b" kindref="member" tooltip="Returns the maximum x value on this surface.">getXMax</ref>()<sp/>&gt;<sp/>_x_max<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface-&gt;<ref refid="classSurface_1aff659fd1b2d547d8b59df1b804d4098b" kindref="member" tooltip="Returns the maximum x value on this surface.">getXMax</ref>()<sp/>!=<sp/>std::numeric_limits&lt;double&gt;::infinity())<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_x_max<sp/>=<sp/>surface-&gt;<ref refid="classSurface_1aff659fd1b2d547d8b59df1b804d4098b" kindref="member" tooltip="Returns the maximum x value on this surface.">getXMax</ref>();</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_right_bc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(surface-&gt;<ref refid="classSurface_1a294b8bd2f04b3b938cc7c31cc4f941f3" kindref="member" tooltip="Returns the minimum y value on this surface.">getYMin</ref>()<sp/>&lt;<sp/>_y_min<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface-&gt;<ref refid="classSurface_1a294b8bd2f04b3b938cc7c31cc4f941f3" kindref="member" tooltip="Returns the minimum y value on this surface.">getYMin</ref>()<sp/>!=-std::numeric_limits&lt;double&gt;::infinity())<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_y_min<sp/>=<sp/>surface-&gt;<ref refid="classSurface_1a294b8bd2f04b3b938cc7c31cc4f941f3" kindref="member" tooltip="Returns the minimum y value on this surface.">getYMin</ref>();</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_bottom_bc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(surface-&gt;<ref refid="classSurface_1a1ffa35335f366974886fa7c36b564fef" kindref="member" tooltip="Returns the maximum y value on this surface.">getYMax</ref>()<sp/>&gt;<sp/>_y_max<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface-&gt;<ref refid="classSurface_1a1ffa35335f366974886fa7c36b564fef" kindref="member" tooltip="Returns the maximum y value on this surface.">getYMax</ref>()<sp/>!=<sp/>std::numeric_limits&lt;double&gt;::infinity())<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_y_max<sp/>=<sp/>surface-&gt;<ref refid="classSurface_1a1ffa35335f366974886fa7c36b564fef" kindref="member" tooltip="Returns the maximum y value on this surface.">getYMax</ref>();</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_top_bc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="Surface_8h_1a94f2bdaf8e1769faec72dbd9e7486341a0a567d852cec14885cd940816395a13d" kindref="member">BOUNDARY_NONE</ref>:</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1ac682e21a0664f12390bb956147030bdf" kindref="member" tooltip="Add a cell to the geometry.">Geometry::addCell</ref>(<ref refid="classCell" kindref="compound" tooltip="Represents a cell inside of a universe.">Cell</ref>*<sp/>cell)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Prints<sp/>error<sp/>msg<sp/>if<sp/>a<sp/>cell<sp/>with<sp/>the<sp/>same<sp/>id<sp/>has<sp/>already<sp/>been<sp/>added<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_cells.find(cell-&gt;<ref refid="classCell_1a5ee7d2b6a1ed18804d207f937e3defaf" kindref="member" tooltip="Return the cell&amp;#39;s user-specified ID.">getId</ref>())<sp/>!=<sp/>_cells.end())</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>add<sp/>a<sp/>second<sp/>cell<sp/>with<sp/>id<sp/>=<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell-&gt;<ref refid="classCell_1a5ee7d2b6a1ed18804d207f937e3defaf" kindref="member" tooltip="Return the cell&amp;#39;s user-specified ID.">getId</ref>());</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Prints<sp/>error<sp/>msg<sp/>if<sp/>the<sp/>cell<sp/>is<sp/>filled<sp/>with<sp/>a<sp/>non-existent<sp/>material<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cell-&gt;<ref refid="classCell_1af0421cc4cbb034947b2b7ec18c6df7d0" kindref="member" tooltip="Return the cell type (FILL or MATERIAL).">getType</ref>()<sp/>==<sp/><ref refid="Cell_8h_1a274ceed3b07859c48505f65b1fe42328a23f8f5e62324af5f4d8f899cee8fb70d" kindref="member">MATERIAL</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_materials.find(static_cast&lt;CellBasic*&gt;(cell)-&gt;<ref refid="classGeometry_1adb4ac26586b662e0bf1c5a78e52b5d1c" kindref="member" tooltip="Return a pointer to a material in the geometry.">getMaterial</ref>())<sp/>==</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_materials.end())<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Attempted<sp/>to<sp/>add<sp/>cell<sp/>with<sp/>material<sp/>with<sp/>id<sp/>=<sp/>%d,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>but<sp/>material<sp/>does<sp/>not<sp/>exist&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;CellBasic*&gt;(cell)-&gt;<ref refid="classGeometry_1adb4ac26586b662e0bf1c5a78e52b5d1c" kindref="member" tooltip="Return a pointer to a material in the geometry.">getMaterial</ref>());</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>pointers<sp/>for<sp/>each<sp/>of<sp/>the<sp/>surfaces<sp/>inside<sp/>the<sp/>cell<sp/>and<sp/>also</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>checks<sp/>whether<sp/>the<sp/>cell&apos;s<sp/>surfaces<sp/>exist<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::map&lt;short<sp/>int,<sp/>Surface*&gt;<sp/>cells_surfaces<sp/>=<sp/>cell-&gt;getSurfaces();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::map&lt;short<sp/>int,<sp/>Surface*&gt;::iterator<sp/>iter;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>all<sp/>surfaces<sp/>in<sp/>the<sp/>cell<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>for<sp/>(iter<sp/>=<sp/>cells_surfaces.begin();<sp/>iter<sp/>!=<sp/>cells_surfaces.end();<sp/>++iter)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short<sp/>int<sp/>surface_id<sp/>=<sp/>abs(iter-&gt;first);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Prints<sp/>error<sp/>msg<sp/>if<sp/>the<sp/>surface<sp/>does<sp/>not<sp/>exist<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(_surfaces.find(surface_id)<sp/>==<sp/>_surfaces.end())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>log_printf(ERROR,<sp/>&quot;Attempted<sp/>to<sp/>add<sp/>cell<sp/>with<sp/>surface<sp/>id<sp/>=<sp/>%d,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;but<sp/>surface<sp/>does<sp/>not<sp/>exist&quot;,<sp/>iter-&gt;first);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>surface<sp/>does<sp/>exist,<sp/>so<sp/>set<sp/>the<sp/>surface<sp/>pointer<sp/>in<sp/>the<sp/>cell<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cell-&gt;setSurfacePointer(_surfaces.at(surface_id));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;short<sp/>int,<sp/>Surface*&gt;<sp/>cells_surfaces<sp/>=<sp/>cell-&gt;<ref refid="classCell_1a212ae4536a8da3258fcdb5b3ab36a3a0" kindref="member" tooltip="Return the hashtable of surfaces IDs and surface pointers for all surfaces making up the cell...">getSurfaces</ref>();</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;short<sp/>int,<sp/>Surface*&gt;::iterator<sp/>iter;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter<sp/>=<sp/>cells_surfaces.begin();<sp/>iter<sp/>!=<sp/>cells_surfaces.end();<sp/>++iter)</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1ae0c48bef75b8bd549ad5ad6edfa4644d" kindref="member" tooltip="Add a surface to the geometry.">addSurface</ref>(iter-&gt;second);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Insert<sp/>the<sp/>cell<sp/>into<sp/>the<sp/>geometry&apos;s<sp/>cell<sp/>container<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_cells.insert(std::pair&lt;short<sp/>int,<sp/>Cell*&gt;(cell-&gt;<ref refid="classCell_1a5ee7d2b6a1ed18804d207f937e3defaf" kindref="member" tooltip="Return the cell&amp;#39;s user-specified ID.">getId</ref>(),<sp/>cell));</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a748005382152808a72b1a9177d9dc806" kindref="member">INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Added<sp/>cell<sp/>with<sp/>id<sp/>=<sp/>%d<sp/>to<sp/>geometry&quot;</highlight><highlight class="normal">,<sp/>cell-&gt;<ref refid="classCell_1a5ee7d2b6a1ed18804d207f937e3defaf" kindref="member" tooltip="Return the cell&amp;#39;s user-specified ID.">getId</ref>());</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>add<sp/>cell<sp/>with<sp/>id<sp/>=<sp/>%d.<sp/>Backtrace:&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n%s&quot;</highlight><highlight class="normal">,<sp/>cell-&gt;<ref refid="classCell_1a5ee7d2b6a1ed18804d207f937e3defaf" kindref="member" tooltip="Return the cell&amp;#39;s user-specified ID.">getId</ref>(),<sp/>e.what());</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Checks<sp/>if<sp/>the<sp/>universe<sp/>the<sp/>cell<sp/>in<sp/>exists;<sp/>if<sp/>not,<sp/>creates<sp/>universe<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_universes.find(cell-&gt;<ref refid="classCell_1af4af1af3638b0c9a64d0b8f3f12f0e30" kindref="member" tooltip="Return the ID of the universe within which this cell resides.">getUniverse</ref>())<sp/>==<sp/>_universes.end())<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classUniverse" kindref="compound" tooltip="A universe represents an unbounded space in the 2D xy-plane.">Universe</ref>*<sp/>univ<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classUniverse" kindref="compound" tooltip="A universe represents an unbounded space in the 2D xy-plane.">Universe</ref>(cell-&gt;<ref refid="classCell_1af4af1af3638b0c9a64d0b8f3f12f0e30" kindref="member" tooltip="Return the ID of the universe within which this cell resides.">getUniverse</ref>());</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1a5c928795dfb3da715a7dacc7961414e9" kindref="member" tooltip="Add a universe to the geometry.">addUniverse</ref>(univ);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a748005382152808a72b1a9177d9dc806" kindref="member">INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Created<sp/>universe<sp/>=<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>cell-&gt;<ref refid="classCell_1af4af1af3638b0c9a64d0b8f3f12f0e30" kindref="member" tooltip="Return the ID of the universe within which this cell resides.">getUniverse</ref>());</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>create<sp/>a<sp/>new<sp/>universe<sp/>with<sp/>id<sp/>=<sp/>%d<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>add<sp/>it<sp/>to<sp/>the<sp/>geometry.<sp/>Backtrace:\n%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell-&gt;<ref refid="classCell_1af4af1af3638b0c9a64d0b8f3f12f0e30" kindref="member" tooltip="Return the ID of the universe within which this cell resides.">getUniverse</ref>(),<sp/>e.what());</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Adds<sp/>the<sp/>cell<sp/>to<sp/>the<sp/>appropriate<sp/>universe<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>_universes.at(cell-&gt;<ref refid="classCell_1af4af1af3638b0c9a64d0b8f3f12f0e30" kindref="member" tooltip="Return the ID of the universe within which this cell resides.">getUniverse</ref>())-&gt;<ref refid="classGeometry_1ac682e21a0664f12390bb956147030bdf" kindref="member" tooltip="Add a cell to the geometry.">addCell</ref>(cell);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Geometry::initializeCellFillPointers()<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Checks<sp/>if<sp/>cellfill<sp/>references<sp/>this<sp/>universe<sp/>and<sp/>sets<sp/>its<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;short<sp/>int,<sp/>Cell*&gt;::iterator<sp/>iter;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCellFill" kindref="compound" tooltip="Represents a cell filled with a universe.">CellFill</ref>*<sp/>cell;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classUniverse" kindref="compound" tooltip="A universe represents an unbounded space in the 2D xy-plane.">Universe</ref>*<sp/>univ;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter<sp/>=<sp/>_cells.begin();<sp/>iter<sp/>!=<sp/>_cells.end();<sp/>++iter)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter-&gt;second-&gt;getType()<sp/>==<sp/><ref refid="Cell_8h_1a274ceed3b07859c48505f65b1fe42328a1d3754a297a681486f8cb3138a27c28b" kindref="member">FILL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classCellFill" kindref="compound" tooltip="Represents a cell filled with a universe.">CellFill</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(iter-&gt;second);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>univ<sp/>=<sp/>_universes.at(cell-&gt;<ref refid="classCellFill_1ae657ae09fe0b6532f20d214e4b774228" kindref="member" tooltip="Return the ID of the universe filling this cell.">getUniverseFillId</ref>());</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell-&gt;<ref refid="classCellFill_1a557f647cc02f782866db15f5f7f04104" kindref="member" tooltip="Set a pointer to the universe filling this cellfill.">setUniverseFillPointer</ref>(univ);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1a5c928795dfb3da715a7dacc7961414e9" kindref="member" tooltip="Add a universe to the geometry.">Geometry::addUniverse</ref>(<ref refid="classUniverse" kindref="compound" tooltip="A universe represents an unbounded space in the 2D xy-plane.">Universe</ref>*<sp/>universe)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Checks<sp/>if<sp/>a<sp/>universe<sp/>with<sp/>the<sp/>same<sp/>id<sp/>has<sp/>already<sp/>been<sp/>added<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_universes.find(universe-&gt;<ref refid="classUniverse_1a4f7c4329c04e78b6a62f8977dfe3d115" kindref="member">getId</ref>())<sp/>!=<sp/>_universes.end())</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>add<sp/>a<sp/>second<sp/>universe<sp/>with<sp/>id<sp/>=<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>universe-&gt;<ref refid="classUniverse_1a4f7c4329c04e78b6a62f8977dfe3d115" kindref="member">getId</ref>());</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>the<sp/>universe<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_universes.insert(std::pair&lt;short<sp/>int,Universe*&gt;(universe-&gt;<ref refid="classUniverse_1a4f7c4329c04e78b6a62f8977dfe3d115" kindref="member">getId</ref>(),</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>universe));</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a748005382152808a72b1a9177d9dc806" kindref="member">INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Added<sp/>universe<sp/>with<sp/>id<sp/>=<sp/>%d<sp/>to<sp/>geometry&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>universe-&gt;<ref refid="classUniverse_1a4f7c4329c04e78b6a62f8977dfe3d115" kindref="member">getId</ref>());</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>add<sp/>universe<sp/>with<sp/>id<sp/>=<sp/>%d.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Backtrace:\n%s&quot;</highlight><highlight class="normal">,<sp/>universe-&gt;<ref refid="classUniverse_1a4f7c4329c04e78b6a62f8977dfe3d115" kindref="member">getId</ref>(),<sp/>e.what());</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Checks<sp/>if<sp/>any<sp/>cellfill<sp/>references<sp/>this<sp/>universe<sp/>and<sp/>sets<sp/>its<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;short<sp/>int,<sp/>Cell*&gt;::iterator<sp/>iter;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter<sp/>=<sp/>_cells.begin();<sp/>iter<sp/>!=<sp/>_cells.end();<sp/>++iter)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter-&gt;second-&gt;getType()<sp/>==<sp/><ref refid="Cell_8h_1a274ceed3b07859c48505f65b1fe42328a1d3754a297a681486f8cb3138a27c28b" kindref="member">FILL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCellFill" kindref="compound" tooltip="Represents a cell filled with a universe.">CellFill</ref>*<sp/>cell<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classCellFill" kindref="compound" tooltip="Represents a cell filled with a universe.">CellFill</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(iter-&gt;second);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cell-&gt;<ref refid="classCellFill_1ae657ae09fe0b6532f20d214e4b774228" kindref="member" tooltip="Return the ID of the universe filling this cell.">getUniverseFillId</ref>()<sp/>==<sp/>universe-&gt;<ref refid="classUniverse_1a4f7c4329c04e78b6a62f8977dfe3d115" kindref="member">getId</ref>())<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell-&gt;<ref refid="classCellFill_1a557f647cc02f782866db15f5f7f04104" kindref="member" tooltip="Set a pointer to the universe filling this cellfill.">setUniverseFillPointer</ref>(universe);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1ac6025e6ed8673a109e406733e3c2ca05" kindref="member" tooltip="Find and return the ID of the flat source region that this localcoords object resides within...">findFSRId</ref>(<ref refid="classLocalCoords" kindref="compound" tooltip="The localcoords represents a set of local coordinates on some level of nested universes making up the...">LocalCoords</ref>*<sp/>coords);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1aefea16b34ccd4f2b266665c7ac9d8b83" kindref="member" tooltip="Add a lattice to the geometry.">Geometry::addLattice</ref>(<ref refid="classLattice" kindref="compound" tooltip="Represents a repeating 2D lattice array of universes.">Lattice</ref>*<sp/>lattice)<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Checks<sp/>whether<sp/>a<sp/>lattice<sp/>with<sp/>the<sp/>same<sp/>id<sp/>has<sp/>already<sp/>been<sp/>added<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lattices.find(lattice-&gt;<ref refid="classUniverse_1a4f7c4329c04e78b6a62f8977dfe3d115" kindref="member">getId</ref>())<sp/>!=<sp/>_lattices.end())</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>add<sp/>a<sp/>second<sp/>lattice<sp/>with<sp/>id<sp/>=<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lattice-&gt;<ref refid="classUniverse_1a4f7c4329c04e78b6a62f8977dfe3d115" kindref="member">getId</ref>());</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>universes<sp/>container<sp/>already<sp/>has<sp/>a<sp/>universe<sp/>with<sp/>the<sp/>same<sp/>id<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_universes.find(lattice-&gt;<ref refid="classUniverse_1a4f7c4329c04e78b6a62f8977dfe3d115" kindref="member">getId</ref>())<sp/>!=<sp/>_universes.end())</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>add<sp/>a<sp/>second<sp/>universe<sp/>(lattice)<sp/>with<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;id<sp/>=<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>lattice-&gt;<ref refid="classUniverse_1a4f7c4329c04e78b6a62f8977dfe3d115" kindref="member">getId</ref>());</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sets<sp/>the<sp/>universe<sp/>pointers<sp/>for<sp/>the<sp/>lattice<sp/>and<sp/>checks<sp/>if<sp/>the<sp/>lattice</highlight></codeline>
<codeline lineno="613"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>contains<sp/>a<sp/>universe<sp/>which<sp/>does<sp/>not<sp/>exist<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lattice-&gt;<ref refid="classLattice_1a9f978534c7ac76cc8b98e815e271e978" kindref="member" tooltip="Return the number of lattice cells along the y-axis.">getNumY</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>lattice-&gt;<ref refid="classLattice_1aa72ae9812e91b1a4a907dfc1107c0393" kindref="member" tooltip="Return the number of lattice cells along the x-axis.">getNumX</ref>();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>universe_id<sp/>=<sp/>lattice-&gt;<ref refid="classLattice_1ae6b84cf43026d5e4ee368bab59910cdb" kindref="member" tooltip="Return a 2D vector array of the universes in the lattice.">getUniverses</ref>().at(i).at(j).first;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>universe<sp/>does<sp/>not<sp/>exist<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_universes.find(universe_id)<sp/>==<sp/>_universes.end())</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Attempted<sp/>to<sp/>create<sp/>lattice<sp/>containing<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;universe<sp/>with<sp/>id<sp/>=<sp/>%d,<sp/>but<sp/>universe<sp/>does<sp/>not<sp/>exist&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lattice-&gt;<ref refid="classLattice_1ae6b84cf43026d5e4ee368bab59910cdb" kindref="member" tooltip="Return a 2D vector array of the universes in the lattice.">getUniverses</ref>().at(i).at(j).first);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>universe<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lattice-&gt;<ref refid="classLattice_1a9a59a806e3629135d7ea784669a6c12c" kindref="member" tooltip="Sets the pointer to a universe filling one of this lattice&amp;#39;s lattice cells.">setUniversePointer</ref>(_universes.at(universe_id));</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>the<sp/>lattice<sp/>to<sp/>the<sp/>geometry&apos;s<sp/>lattices<sp/>container<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lattices.insert(std::pair&lt;</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLattice" kindref="compound" tooltip="Represents a repeating 2D lattice array of universes.">Lattice</ref>*&gt;(lattice-&gt;<ref refid="classUniverse_1a4f7c4329c04e78b6a62f8977dfe3d115" kindref="member">getId</ref>(),<sp/>lattice));</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a748005382152808a72b1a9177d9dc806" kindref="member">INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Added<sp/>lattice<sp/>with<sp/>id<sp/>=<sp/>%d<sp/>to<sp/>geometry&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lattice-&gt;<ref refid="classUniverse_1a4f7c4329c04e78b6a62f8977dfe3d115" kindref="member">getId</ref>());</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>add<sp/>lattice<sp/>with<sp/>id<sp/>=<sp/>%d.<sp/>Backtrace:\n%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lattice-&gt;<ref refid="classUniverse_1a4f7c4329c04e78b6a62f8977dfe3d115" kindref="member">getId</ref>(),<sp/>e.what());</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>the<sp/>lattice<sp/>to<sp/>the<sp/>universes<sp/>container<sp/>as<sp/>well<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classGeometry_1a5c928795dfb3da715a7dacc7961414e9" kindref="member" tooltip="Add a universe to the geometry.">addUniverse</ref>(lattice);</highlight></codeline>
<codeline lineno="644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><ref refid="classCell" kindref="compound" tooltip="Represents a cell inside of a universe.">Cell</ref>*<sp/><ref refid="classGeometry_1ab09d1ee4b8da5d3e60d5745d2a044185" kindref="member" tooltip="Find the cell that this localcoords object is in.">Geometry::findCellContainingCoords</ref>(<ref refid="classLocalCoords" kindref="compound" tooltip="The localcoords represents a set of local coordinates on some level of nested universes making up the...">LocalCoords</ref>*<sp/>coords)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>universe_id<sp/>=<sp/>coords-&gt;<ref refid="classLocalCoords_1a305af453a198ae35cc510f903def4088" kindref="member" tooltip="Return the id of the universe within which this localcoords resides.">getUniverse</ref>();</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classUniverse" kindref="compound" tooltip="A universe represents an unbounded space in the 2D xy-plane.">Universe</ref>*<sp/>univ<sp/>=<sp/>_universes.at(universe_id);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(univ-&gt;<ref refid="classUniverse_1a6cbde58618cfcec5f72780b2911ab97b" kindref="member" tooltip="Return the universe type (SIMPLE or LATTICE).">getType</ref>()<sp/>==<sp/><ref refid="Universe_8h_1a123911615dcd5c50bea706d32683a02aa1a6b6e9893ec9e5d9710335b4c74d3f6" kindref="member">SIMPLE</ref>)</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>univ-&gt;<ref refid="classUniverse_1a23c055aef2533f10d524979ee8e9f46b" kindref="member" tooltip="Finds the cell for which a localcoords object resides.">findCell</ref>(coords,<sp/>_universes);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classLattice" kindref="compound" tooltip="Represents a repeating 2D lattice array of universes.">Lattice</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(univ)-&gt;<ref refid="classGeometry_1acd933591916fa3f4f9d26ffca1ecd56a" kindref="member" tooltip="Find the cell for an fsr_id at a certain universe level.">findCell</ref>(coords,<sp/>_universes);</highlight></codeline>
<codeline lineno="669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><ref refid="classCell" kindref="compound" tooltip="Represents a cell inside of a universe.">Cell</ref>*<sp/>Geometry::findFirstCell(<ref refid="classLocalCoords" kindref="compound" tooltip="The localcoords represents a set of local coordinates on some level of nested universes making up the...">LocalCoords</ref>*<sp/>coords,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delta_x<sp/>=<sp/>cos(angle)<sp/>*<sp/><ref refid="Universe_8h_1a481c7dad5dc2bb9070235752daa421c6" kindref="member">TINY_MOVE</ref>;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delta_y<sp/>=<sp/>sin(angle)<sp/>*<sp/><ref refid="Universe_8h_1a481c7dad5dc2bb9070235752daa421c6" kindref="member">TINY_MOVE</ref>;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>coords-&gt;<ref refid="classLocalCoords_1a9a554dc0de187957849d1577cba7a277" kindref="member" tooltip="Translate all of the x,y coordinates for each localcoords object in the linked list.">adjustCoords</ref>(delta_x,<sp/>delta_y);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1ab09d1ee4b8da5d3e60d5745d2a044185" kindref="member" tooltip="Find the cell that this localcoords object is in.">findCellContainingCoords</ref>(coords);</highlight></codeline>
<codeline lineno="694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><ref refid="classCellBasic" kindref="compound" tooltip="Represents a cell filled with a material.">CellBasic</ref>*<sp/><ref refid="classGeometry_1a92eee0b27aeacfee8eaef6dacd2c8d6e" kindref="member" tooltip="Find the cell for a flat source region ID.">Geometry::findCellContainingFSR</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fsr_id)<sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classCellBasic" kindref="compound" tooltip="Represents a cell filled with a material.">CellBasic</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classGeometry_1acd933591916fa3f4f9d26ffca1ecd56a" kindref="member" tooltip="Find the cell for an fsr_id at a certain universe level.">findCell</ref>(_universes.at(0),<sp/>fsr_id));</highlight></codeline>
<codeline lineno="706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><ref refid="classCell" kindref="compound" tooltip="Represents a cell inside of a universe.">Cell</ref>*<sp/><ref refid="classGeometry_1acd933591916fa3f4f9d26ffca1ecd56a" kindref="member" tooltip="Find the cell for an fsr_id at a certain universe level.">Geometry::findCell</ref>(<ref refid="classUniverse" kindref="compound" tooltip="A universe represents an unbounded space in the 2D xy-plane.">Universe</ref>*<sp/>univ,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fsr_id)<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCell" kindref="compound" tooltip="Represents a cell inside of a universe.">Cell</ref>*<sp/>cell<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>the<sp/>FSR<sp/>id<sp/>is<sp/>out<sp/>of<sp/>bounds<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsr_id<sp/>&lt;<sp/>-1<sp/>||<sp/>fsr_id<sp/>&gt;<sp/>_num_FSRs)</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Tried<sp/>to<sp/>find<sp/>the<sp/>cell<sp/>for<sp/>an<sp/>fsr_id<sp/>which<sp/>does<sp/>not<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exist:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>fsr_id);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>universe<sp/>is<sp/>a<sp/>SIMPLE<sp/>type,<sp/>then<sp/>find<sp/>the<sp/>cell<sp/>the<sp/>smallest<sp/>fsr<sp/>map</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entry<sp/>that<sp/>is<sp/>not<sp/>larger<sp/>than<sp/>the<sp/>fsr_id<sp/>argument<sp/>to<sp/>this<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(univ-&gt;<ref refid="classUniverse_1a6cbde58618cfcec5f72780b2911ab97b" kindref="member" tooltip="Return the universe type (SIMPLE or LATTICE).">getType</ref>()<sp/>==<sp/><ref refid="Universe_8h_1a123911615dcd5c50bea706d32683a02aa1a6b6e9893ec9e5d9710335b4c74d3f6" kindref="member">SIMPLE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;short<sp/>int,<sp/>Cell*&gt;::iterator<sp/>iter;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;short<sp/>int,<sp/>Cell*&gt;<sp/>cells<sp/>=<sp/>univ-&gt;<ref refid="classUniverse_1a2c23d7adc8ea99834f4cdd0e4a26e45a" kindref="member" tooltip="Return the vector of cell pointers in this universe.">getCells</ref>();</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCell" kindref="compound" tooltip="Represents a cell inside of a universe.">Cell</ref>*<sp/>cell_min<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_id<sp/>=<sp/>INT_MAX;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fsr_map_id;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>this<sp/>universe&apos;s<sp/>cells<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter<sp/>=<sp/>cells.begin();<sp/>iter<sp/>!=<sp/>cells.end();<sp/>++iter)<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsr_map_id<sp/>=<sp/>univ-&gt;<ref refid="classUniverse_1ac4223b9975965ff302bd38666782985f" kindref="member" tooltip="Returns the local ID for the FSR representing a cell in this universe.">getFSR</ref>(iter-&gt;first);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsr_map_id<sp/>&lt;=<sp/>fsr_id<sp/>&amp;&amp;<sp/>fsr_map_id<sp/>&gt;=<sp/>max_id)<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_id<sp/>=<sp/>fsr_map_id;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell<sp/>=<sp/>iter-&gt;second;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsr_map_id<sp/>&lt;<sp/>min_id)<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_id<sp/>=<sp/>fsr_map_id;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_min<sp/>=<sp/>iter-&gt;second;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>max_id<sp/>is<sp/>greater<sp/>than<sp/>the<sp/>fsr_id,<sp/>there<sp/>has<sp/>either<sp/>been</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>an<sp/>error<sp/>or<sp/>we<sp/>are<sp/>at<sp/>universe<sp/>0<sp/>and<sp/>need<sp/>to<sp/>go<sp/>down<sp/>one<sp/>level<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_id<sp/>&gt;<sp/>fsr_id)<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cell_min-&gt;<ref refid="classCell_1af0421cc4cbb034947b2b7ec18c6df7d0" kindref="member" tooltip="Return the cell type (FILL or MATERIAL).">getType</ref>()<sp/>==<sp/><ref refid="Cell_8h_1a274ceed3b07859c48505f65b1fe42328a23f8f5e62324af5f4d8f899cee8fb70d" kindref="member">MATERIAL</ref>)</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>find<sp/>cell<sp/>for<sp/>fsr_id<sp/>=<sp/>%d:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;max_id(%d)<sp/>&gt;<sp/>fsr_id(%d)&quot;</highlight><highlight class="normal">,<sp/>fsr_id,<sp/>max_id,<sp/>fsr_id);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCellFill" kindref="compound" tooltip="Represents a cell filled with a universe.">CellFill</ref>*<sp/>cellfill<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classCellFill" kindref="compound" tooltip="Represents a cell filled with a universe.">CellFill</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cell_min);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1acd933591916fa3f4f9d26ffca1ecd56a" kindref="member" tooltip="Find the cell for an fsr_id at a certain universe level.">findCell</ref>(cellfill-&gt;<ref refid="classCellFill_1af5debd1e98494583d628641cb5321a8c" kindref="member" tooltip="Return a pointer to the universe filling this cell.">getUniverseFill</ref>(),<sp/>fsr_id);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Otherwise,<sp/>decrement<sp/>the<sp/>fsr_id<sp/>and<sp/>make<sp/>recursive<sp/>call<sp/>to<sp/>next</highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>universe<sp/>unless<sp/>an<sp/>error<sp/>condition<sp/>is<sp/>met<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsr_id<sp/>-=<sp/>max_id;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsr_id<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>cell_min-&gt;<ref refid="classCell_1af0421cc4cbb034947b2b7ec18c6df7d0" kindref="member" tooltip="Return the cell type (FILL or MATERIAL).">getType</ref>()<sp/>==<sp/><ref refid="Cell_8h_1a274ceed3b07859c48505f65b1fe42328a23f8f5e62324af5f4d8f899cee8fb70d" kindref="member">MATERIAL</ref>)</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cell;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsr_id<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>cell_min-&gt;<ref refid="classCell_1af0421cc4cbb034947b2b7ec18c6df7d0" kindref="member" tooltip="Return the cell type (FILL or MATERIAL).">getType</ref>()<sp/>==<sp/><ref refid="Cell_8h_1a274ceed3b07859c48505f65b1fe42328a23f8f5e62324af5f4d8f899cee8fb70d" kindref="member">MATERIAL</ref>)</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>find<sp/>cell<sp/>for<sp/>fsr_id<sp/>=<sp/>%d:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fsr_id<sp/>=<sp/>%d<sp/>and<sp/>cell<sp/>type<sp/>=<sp/>MATERIAL&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsr_id,<sp/>fsr_id);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCellFill" kindref="compound" tooltip="Represents a cell filled with a universe.">CellFill</ref>*<sp/>cellfill<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classCellFill" kindref="compound" tooltip="Represents a cell filled with a universe.">CellFill</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cell_min);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1acd933591916fa3f4f9d26ffca1ecd56a" kindref="member" tooltip="Find the cell for an fsr_id at a certain universe level.">findCell</ref>(cellfill-&gt;<ref refid="classCellFill_1af5debd1e98494583d628641cb5321a8c" kindref="member" tooltip="Return a pointer to the universe filling this cell.">getUniverseFill</ref>(),<sp/>fsr_id);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>universe<sp/>is<sp/>a<sp/>lattice<sp/>then<sp/>we<sp/>find<sp/>the<sp/>lattice<sp/>cell<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>smallest<sp/>fsr<sp/>map<sp/>entry<sp/>that<sp/>is<sp/>not<sp/>larger<sp/>than<sp/>the<sp/>fsr<sp/>id<sp/>argument<sp/>to</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLattice" kindref="compound" tooltip="Represents a repeating 2D lattice array of universes.">Lattice</ref>*<sp/>lat<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classLattice" kindref="compound" tooltip="Represents a repeating 2D lattice array of universes.">Lattice</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(univ);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classUniverse" kindref="compound" tooltip="A universe represents an unbounded space in the 2D xy-plane.">Universe</ref>*<sp/>next_univ<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_y<sp/>=<sp/>lat-&gt;<ref refid="classLattice_1a9f978534c7ac76cc8b98e815e271e978" kindref="member" tooltip="Return the number of lattice cells along the y-axis.">getNumY</ref>();</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_x<sp/>=<sp/>lat-&gt;<ref refid="classLattice_1aa72ae9812e91b1a4a907dfc1107c0393" kindref="member" tooltip="Return the number of lattice cells along the x-axis.">getNumX</ref>();</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fsr_map_id;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>all<sp/>lattice<sp/>cells<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_y;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>num_x;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsr_map_id<sp/>=<sp/>lat-&gt;<ref refid="classLattice_1a5c290c37b0e29a22764acf7e7e74ba22" kindref="member" tooltip="Return the id of a flat source region base index (smallest FSR region id within a specific lattice ce...">getFSR</ref>(j,<sp/>i);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsr_map_id<sp/>&lt;=<sp/>fsr_id<sp/>&amp;&amp;<sp/>fsr_map_id<sp/>&gt;=<sp/>max_id)<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_id<sp/>=<sp/>fsr_map_id;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_univ<sp/>=<sp/>lat-&gt;<ref refid="classLattice_1a0b1b5aa06a73064c65d08332c13f973f" kindref="member" tooltip="Returns a pointer to the universe within a specific lattice cell.">getUniverse</ref>(j,<sp/>i);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>max_id<sp/>is<sp/>out<sp/>of<sp/>bounds,<sp/>then<sp/>query<sp/>failed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_id<sp/>&gt;<sp/>fsr_id<sp/>||<sp/>next_univ<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>lattice<sp/>cell<sp/>found<sp/>for<sp/>fsr<sp/>=<sp/>%d,<sp/>max_id<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>fsr_id,<sp/>max_id);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Otherwise<sp/>update<sp/>fsr_id<sp/>and<sp/>make<sp/>recursive<sp/>call<sp/>to<sp/>next<sp/>level<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsr_id<sp/>-=<sp/>max_id;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1acd933591916fa3f4f9d26ffca1ecd56a" kindref="member" tooltip="Find the cell for an fsr_id at a certain universe level.">findCell</ref>(next_univ,<sp/>fsr_id);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cell;</highlight></codeline>
<codeline lineno="813"><highlight class="normal">}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><ref refid="classCell" kindref="compound" tooltip="Represents a cell inside of a universe.">Cell</ref>*<sp/>Geometry::findNextCell(<ref refid="classLocalCoords" kindref="compound" tooltip="The localcoords represents a set of local coordinates on some level of nested universes making up the...">LocalCoords</ref>*<sp/>coords,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle)<sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCell" kindref="compound" tooltip="Represents a cell inside of a universe.">Cell</ref>*<sp/>cell<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>current<sp/>cell<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>cell<sp/>=<sp/><ref refid="classGeometry_1ab09d1ee4b8da5d3e60d5745d2a044185" kindref="member" tooltip="Find the cell that this localcoords object is in.">findCellContainingCoords</ref>(coords);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>current<sp/>coords<sp/>is<sp/>not<sp/>in<sp/>any<sp/>cell,<sp/>return<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cell<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>current<sp/>coords<sp/>is<sp/>inside<sp/>a<sp/>cell,<sp/>look<sp/>for<sp/>next<sp/>cell<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>min<sp/>dist<sp/>to<sp/>the<sp/>next<sp/>surface<sp/>in<sp/>the<sp/>current<sp/>cell<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classPoint" kindref="compound" tooltip="Class to represent a 2D point in space.">Point</ref><sp/>surf_intersection;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLocalCoords" kindref="compound" tooltip="The localcoords represents a set of local coordinates on some level of nested universes making up the...">LocalCoords</ref>*<sp/>lowest_level<sp/>=<sp/>coords-&gt;<ref refid="classLocalCoords_1a9eea7e15fe849f272854e8db1fe7268a" kindref="member" tooltip="Find and return the last localcoords in the linked list wich represents the local coordinates on the ...">getLowestLevel</ref>();</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>cell-&gt;<ref refid="classCell_1adf41aafa99278a759d8d6ae826c7330e" kindref="member" tooltip="Computes the minimum distance to a surface from a point with a given trajectory at a certain angle...">minSurfaceDist</ref>(lowest_level-&gt;<ref refid="classLocalCoords_1aff39b0f4a6cd5de5347ab154000d349b" kindref="member" tooltip="Returns a pointer to the point containing the coordinates for this localcoord.">getPoint</ref>(),<sp/>angle,</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;surf_intersection);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>distance<sp/>returned<sp/>is<sp/>not<sp/>INFINITY,<sp/>the<sp/>trajectory<sp/>will</highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>intersect<sp/>a<sp/>surface<sp/>in<sp/>the<sp/>cell<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>!=<sp/>std::numeric_limits&lt;double&gt;::infinity())<sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLocalCoords" kindref="compound" tooltip="The localcoords represents a set of local coordinates on some level of nested universes making up the...">LocalCoords</ref><sp/>test(0,0);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Move<sp/>LocalCoords<sp/>just<sp/>to<sp/>the<sp/>next<sp/>surface<sp/>in<sp/>the<sp/>cell<sp/>plus<sp/>an</highlight></codeline>
<codeline lineno="859"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>additional<sp/>small<sp/>bit<sp/>into<sp/>the<sp/>next<sp/>cell<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delta_x<sp/>=<sp/>cos(angle)<sp/>*<sp/><ref refid="Universe_8h_1a481c7dad5dc2bb9070235752daa421c6" kindref="member">TINY_MOVE</ref>;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delta_y<sp/>=<sp/>sin(angle)<sp/>*<sp/><ref refid="Universe_8h_1a481c7dad5dc2bb9070235752daa421c6" kindref="member">TINY_MOVE</ref>;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>coords<sp/>to<sp/>the<sp/>test<sp/>coords<sp/>before<sp/>moving<sp/>it<sp/>by<sp/>delta<sp/>and</highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>finding<sp/>the<sp/>new<sp/>cell<sp/>it<sp/>is<sp/>in<sp/>-<sp/>do<sp/>this<sp/>for<sp/>testing<sp/>purposes</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>in<sp/>case<sp/>the<sp/>new<sp/>cell<sp/>found<sp/>is<sp/>NULL<sp/>or<sp/>is<sp/>in<sp/>a<sp/>new<sp/>lattice<sp/>cell*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coords-&gt;<ref refid="classLocalCoords_1a5a5ed42ca7ccf274f548134f9d56d9f8" kindref="member" tooltip="Copies a localcoords&amp;#39; values to this one. details Given a pointer to a localcoords, it first prunes it and then creates a copy of the linked list of localcoords in the linked list below this one to give to the input localcoords.">copyCoords</ref>(&amp;test);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coords-&gt;<ref refid="classLocalCoords_1a371080a986073525f2e0572345e438c7" kindref="member" tooltip="Update the last element in the linked list (the one at the lowest level of nested universes) to have ...">updateMostLocal</ref>(&amp;surf_intersection);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coords-&gt;<ref refid="classLocalCoords_1a9a554dc0de187957849d1577cba7a277" kindref="member" tooltip="Translate all of the x,y coordinates for each localcoords object in the linked list.">adjustCoords</ref>(delta_x,<sp/>delta_y);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>new<sp/>cell<sp/>and<sp/>return<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell<sp/>=<sp/><ref refid="classGeometry_1ab09d1ee4b8da5d3e60d5745d2a044185" kindref="member" tooltip="Find the cell that this localcoords object is in.">findCellContainingCoords</ref>(coords);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>cell<sp/>is<sp/>null<sp/>-<sp/>this<sp/>means<sp/>that<sp/>intersection<sp/>point</highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>is<sp/>outside<sp/>the<sp/>bounds<sp/>of<sp/>the<sp/>geometry<sp/>and<sp/>the<sp/>old<sp/>coords</highlight></codeline>
<codeline lineno="875"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>should<sp/>be<sp/>restored<sp/>so<sp/>that<sp/>we<sp/>can<sp/>look<sp/>for<sp/>the<sp/>next</highlight></codeline>
<codeline lineno="876"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>lattice<sp/>cell<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLocalCoords" kindref="compound" tooltip="The localcoords represents a set of local coordinates on some level of nested universes making up the...">LocalCoords</ref>*<sp/>test_curr<sp/>=<sp/>test.<ref refid="classLocalCoords_1a9eea7e15fe849f272854e8db1fe7268a" kindref="member" tooltip="Find and return the last localcoords in the linked list wich represents the local coordinates on the ...">getLowestLevel</ref>();</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLocalCoords" kindref="compound" tooltip="The localcoords represents a set of local coordinates on some level of nested universes making up the...">LocalCoords</ref>*<sp/>coords_curr<sp/>=<sp/>coords-&gt;<ref refid="classLocalCoords_1a9eea7e15fe849f272854e8db1fe7268a" kindref="member" tooltip="Find and return the last localcoords in the linked list wich represents the local coordinates on the ...">getLowestLevel</ref>();</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(test_curr<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>test_curr-&gt;<ref refid="classLocalCoords_1a305af453a198ae35cc510f903def4088" kindref="member" tooltip="Return the id of the universe within which this localcoords resides.">getUniverse</ref>()<sp/>!=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coords_curr<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>coords_curr-&gt;<ref refid="classLocalCoords_1a305af453a198ae35cc510f903def4088" kindref="member" tooltip="Return the id of the universe within which this localcoords resides.">getUniverse</ref>()<sp/>!=0){</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>the<sp/>next<sp/>cell<sp/>found<sp/>is<sp/>in<sp/>the<sp/>same<sp/>lattice<sp/>cell</highlight></codeline>
<codeline lineno="884"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>as<sp/>the<sp/>previous<sp/>cell<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(coords_curr-&gt;<ref refid="classLocalCoords_1a756dbd3f1b8fa9084f584b593af2b066" kindref="member" tooltip="Return the level (UNIV or LAT) of this localcoords.">getType</ref>()<sp/>==<sp/><ref refid="LocalCoords_8h_1a9b2c6f3fe231906f231afd6ae7293871a40df096e8ca19a820dbd94de79e97b3b" kindref="member">LAT</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_curr-&gt;<ref refid="classLocalCoords_1a756dbd3f1b8fa9084f584b593af2b066" kindref="member" tooltip="Return the level (UNIV or LAT) of this localcoords.">getType</ref>()<sp/>==<sp/><ref refid="LocalCoords_8h_1a9b2c6f3fe231906f231afd6ae7293871a40df096e8ca19a820dbd94de79e97b3b" kindref="member">LAT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(coords_curr-&gt;<ref refid="classLocalCoords_1a98a422016cd0e5e8a791a44784a3f6ac" kindref="member" tooltip="Return the first index of the lattice cell within which this localcoords resides.">getLatticeX</ref>()<sp/>!=<sp/>test_curr-&gt;<ref refid="classLocalCoords_1a98a422016cd0e5e8a791a44784a3f6ac" kindref="member" tooltip="Return the first index of the lattice cell within which this localcoords resides.">getLatticeX</ref>()</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>coords_curr-&gt;<ref refid="classLocalCoords_1a82c184c2b1327bae01e7a607bbdc07f5" kindref="member" tooltip="Return the second index of the lattice cell within which this localcoords resides.">getLatticeY</ref>()<sp/>!=<sp/></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_curr-&gt;<ref refid="classLocalCoords_1a82c184c2b1327bae01e7a607bbdc07f5" kindref="member" tooltip="Return the second index of the lattice cell within which this localcoords resides.">getLatticeY</ref>())<sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_curr<sp/>=<sp/>test_curr-&gt;<ref refid="classLocalCoords_1a41901845738accab675e9a021185fcc5" kindref="member" tooltip="Return a pointer to the localcoord at the next higher nested universe level if one exists...">getPrev</ref>();</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coords_curr<sp/>=<sp/>coords_curr-&gt;<ref refid="classLocalCoords_1a41901845738accab675e9a021185fcc5" kindref="member" tooltip="Return a pointer to the localcoord at the next higher nested universe level if one exists...">getPrev</ref>();</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>cell<sp/>is<sp/>null<sp/>then<sp/>we<sp/>should<sp/>reset<sp/>and<sp/>find<sp/>next<sp/>lattice</highlight></codeline>
<codeline lineno="901"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>cell<sp/>rather<sp/>than<sp/>return<sp/>this<sp/>cell<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cell<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>distance<sp/>is<sp/>not<sp/>INFINITY<sp/>then<sp/>the<sp/>new<sp/>cell<sp/>found<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="906"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>one<sp/>to<sp/>return<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>!=<sp/>std::numeric_limits&lt;double&gt;::infinity())<sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test.prune();</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cell;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>distance<sp/>is<sp/>not<sp/>INFINITY<sp/>then<sp/>the<sp/>new<sp/>cell<sp/>found<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="913"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>one<sp/>to<sp/>return<sp/>and<sp/>we<sp/>should<sp/>move<sp/>to<sp/>a<sp/>new<sp/>lattice<sp/>cell<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test.copyCoords(coords);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test.prune();</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>distance<sp/>returned<sp/>is<sp/>infinity,<sp/>the<sp/>trajectory<sp/>will<sp/>not</highlight></codeline>
<codeline lineno="921"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>intersect<sp/>a<sp/>surface<sp/>in<sp/>the<sp/>cell.<sp/>We<sp/>thus<sp/>need<sp/>to<sp/>readjust<sp/>to</highlight></codeline>
<codeline lineno="922"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>localcoord<sp/>to<sp/>the<sp/>base<sp/>universe<sp/>and<sp/>check<sp/>whether<sp/>we<sp/>need</highlight></codeline>
<codeline lineno="923"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>move<sp/>to<sp/>a<sp/>new<sp/>lattice<sp/>cell<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>==<sp/>std::numeric_limits&lt;double&gt;::infinity())<sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>lowest<sp/>level<sp/>localcoords<sp/>in<sp/>the<sp/>linked<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLocalCoords" kindref="compound" tooltip="The localcoords represents a set of local coordinates on some level of nested universes making up the...">LocalCoords</ref>*<sp/>curr<sp/>=<sp/>coords-&gt;<ref refid="classLocalCoords_1a9eea7e15fe849f272854e8db1fe7268a" kindref="member" tooltip="Find and return the last localcoords in the linked list wich represents the local coordinates on the ...">getLowestLevel</ref>();</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Retrace<sp/>linkedlist<sp/>from<sp/>lowest<sp/>level<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(curr<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>curr-&gt;<ref refid="classLocalCoords_1a305af453a198ae35cc510f903def4088" kindref="member" tooltip="Return the id of the universe within which this localcoords resides.">getUniverse</ref>()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr<sp/>=<sp/>curr-&gt;<ref refid="classLocalCoords_1a41901845738accab675e9a021185fcc5" kindref="member" tooltip="Return a pointer to the localcoord at the next higher nested universe level if one exists...">getPrev</ref>();</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>we<sp/>reach<sp/>a<sp/>localcoord<sp/>in<sp/>a<sp/>lattice,<sp/>delete<sp/>all<sp/>lower</highlight></codeline>
<codeline lineno="934"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>level<sp/>localcoords<sp/>in<sp/>linked<sp/>list<sp/>and<sp/>break<sp/>loop.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curr-&gt;<ref refid="classLocalCoords_1a756dbd3f1b8fa9084f584b593af2b066" kindref="member" tooltip="Return the level (UNIV or LAT) of this localcoords.">getType</ref>()<sp/>==<sp/><ref refid="LocalCoords_8h_1a9b2c6f3fe231906f231afd6ae7293871a40df096e8ca19a820dbd94de79e97b3b" kindref="member">LAT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr-&gt;<ref refid="classLocalCoords_1ab6a1654615643dabd35a19c8ed5f7dad" kindref="member" tooltip="Removes and frees memory for all localcoords beyond this one in the linked list.">prune</ref>();</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>lowest<sp/>level<sp/>universe<sp/>in<sp/>linkedlist<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr<sp/>=<sp/>coords-&gt;<ref refid="classLocalCoords_1a9eea7e15fe849f272854e8db1fe7268a" kindref="member" tooltip="Find and return the last localcoords in the linked list wich represents the local coordinates on the ...">getLowestLevel</ref>();</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Retrace<sp/>through<sp/>the<sp/>lattices<sp/>in<sp/>the<sp/>localcoord<sp/>and<sp/>check<sp/>for</highlight></codeline>
<codeline lineno="945"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>lattice<sp/>cell<sp/>crossings<sp/>in<sp/>each<sp/>one.<sp/>If<sp/>we<sp/>never<sp/>find<sp/>a<sp/>crossing</highlight></codeline>
<codeline lineno="946"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>reach<sp/>universe<sp/>0<sp/>the<sp/>return<sp/>NULL<sp/>since<sp/>this<sp/>means<sp/>we<sp/>have</highlight></codeline>
<codeline lineno="947"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>reached<sp/>the<sp/>edge<sp/>of<sp/>the<sp/>geometry</highlight></codeline>
<codeline lineno="948"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(curr-&gt;<ref refid="classLocalCoords_1a305af453a198ae35cc510f903def4088" kindref="member" tooltip="Return the id of the universe within which this localcoords resides.">getUniverse</ref>()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>lowest<sp/>level<sp/>localcoords<sp/>is<sp/>inside<sp/>a<sp/>lattice,<sp/>find</highlight></codeline>
<codeline lineno="952"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>next<sp/>lattice<sp/>cell<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curr-&gt;<ref refid="classLocalCoords_1a756dbd3f1b8fa9084f584b593af2b066" kindref="member" tooltip="Return the level (UNIV or LAT) of this localcoords.">getType</ref>()<sp/>==<sp/><ref refid="LocalCoords_8h_1a9b2c6f3fe231906f231afd6ae7293871a40df096e8ca19a820dbd94de79e97b3b" kindref="member">LAT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lattice_id<sp/>=<sp/>curr-&gt;<ref refid="classLocalCoords_1a46a2385e59e758d31b282ab97b0285a7" kindref="member" tooltip="Return the id of the lattice within which this localcoords resides.">getLattice</ref>();</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLattice" kindref="compound" tooltip="Represents a repeating 2D lattice array of universes.">Lattice</ref>*<sp/>lattice<sp/>=<sp/>_lattices.at(lattice_id);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell<sp/>=<sp/>lattice-&gt;<ref refid="classLattice_1af5b9506d18a4ebcd2bf4932c0ab6d86a" kindref="member" tooltip="Finds the next cell for a localcoords object along a trajectory defined by some angle (in radians fro...">findNextLatticeCell</ref>(curr,angle,_universes);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>cell<sp/>returned<sp/>is<sp/>NULL,<sp/>the<sp/>localcoords<sp/>are<sp/>outside</highlight></codeline>
<codeline lineno="961"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>of<sp/>the<sp/>current<sp/>lattice,<sp/>so<sp/>move<sp/>to<sp/>a<sp/>higher<sp/>level<sp/>lattice</highlight></codeline>
<codeline lineno="962"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>if<sp/>there<sp/>is<sp/>one<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cell<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Delete<sp/>current<sp/>lattice<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr-&gt;<ref refid="classLocalCoords_1a41901845738accab675e9a021185fcc5" kindref="member" tooltip="Return a pointer to the localcoord at the next higher nested universe level if one exists...">getPrev</ref>()-&gt;<ref refid="classLocalCoords_1ab6a1654615643dabd35a19c8ed5f7dad" kindref="member" tooltip="Removes and frees memory for all localcoords beyond this one in the linked list.">prune</ref>();</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>lowest<sp/>level<sp/>localcoords<sp/>in<sp/>linked<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr<sp/>=<sp/>coords-&gt;<ref refid="classLocalCoords_1a9eea7e15fe849f272854e8db1fe7268a" kindref="member" tooltip="Find and return the last localcoords in the linked list wich represents the local coordinates on the ...">getLowestLevel</ref>();</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Retrace<sp/>linkedlist<sp/>from<sp/>lowest<sp/>level<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(curr<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>curr-&gt;<ref refid="classLocalCoords_1a305af453a198ae35cc510f903def4088" kindref="member" tooltip="Return the id of the universe within which this localcoords resides.">getUniverse</ref>()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr<sp/>=<sp/>curr-&gt;<ref refid="classLocalCoords_1a41901845738accab675e9a021185fcc5" kindref="member" tooltip="Return a pointer to the localcoord at the next higher nested universe level if one exists...">getPrev</ref>();</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>we<sp/>reach<sp/>a<sp/>localcoord<sp/>in<sp/>a<sp/>lattice,<sp/>delete<sp/></highlight></codeline>
<codeline lineno="976"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>all<sp/>lower<sp/>level<sp/>localcoords<sp/>in<sp/>linked<sp/>list<sp/></highlight></codeline>
<codeline lineno="977"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>break<sp/>loop.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curr-&gt;<ref refid="classLocalCoords_1a756dbd3f1b8fa9084f584b593af2b066" kindref="member" tooltip="Return the level (UNIV or LAT) of this localcoords.">getType</ref>()<sp/>==<sp/><ref refid="LocalCoords_8h_1a9b2c6f3fe231906f231afd6ae7293871a40df096e8ca19a820dbd94de79e97b3b" kindref="member">LAT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr-&gt;<ref refid="classLocalCoords_1ab6a1654615643dabd35a19c8ed5f7dad" kindref="member" tooltip="Removes and frees memory for all localcoords beyond this one in the linked list.">prune</ref>();</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>lowest<sp/>level<sp/>universe<sp/>in<sp/>linkedlist<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr<sp/>=<sp/>coords-&gt;<ref refid="classLocalCoords_1a9eea7e15fe849f272854e8db1fe7268a" kindref="member" tooltip="Find and return the last localcoords in the linked list wich represents the local coordinates on the ...">getLowestLevel</ref>();</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>lowest<sp/>level<sp/>universe<sp/>is<sp/>not<sp/>a<sp/>lattice,<sp/>then</highlight></codeline>
<codeline lineno="989"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>return<sp/>the<sp/>current<sp/>cell<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cell;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>no<sp/>cell<sp/>was<sp/>found,<sp/>return<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="999"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1ac6025e6ed8673a109e406733e3c2ca05" kindref="member" tooltip="Find and return the ID of the flat source region that this localcoords object resides within...">Geometry::findFSRId</ref>(<ref refid="classLocalCoords" kindref="compound" tooltip="The localcoords represents a set of local coordinates on some level of nested universes making up the...">LocalCoords</ref>*<sp/>coords)<sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fsr_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classLocalCoords" kindref="compound" tooltip="The localcoords represents a set of local coordinates on some level of nested universes making up the...">LocalCoords</ref>*<sp/>curr<sp/>=<sp/>coords;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(curr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curr-&gt;<ref refid="classLocalCoords_1a756dbd3f1b8fa9084f584b593af2b066" kindref="member" tooltip="Return the level (UNIV or LAT) of this localcoords.">getType</ref>()<sp/>==<sp/><ref refid="LocalCoords_8h_1a9b2c6f3fe231906f231afd6ae7293871a40df096e8ca19a820dbd94de79e97b3b" kindref="member">LAT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLattice" kindref="compound" tooltip="Represents a repeating 2D lattice array of universes.">Lattice</ref>*<sp/>lattice<sp/>=<sp/>_lattices.at(curr-&gt;<ref refid="classLocalCoords_1a46a2385e59e758d31b282ab97b0285a7" kindref="member" tooltip="Return the id of the lattice within which this localcoords resides.">getLattice</ref>());</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsr_id<sp/>+=<sp/>lattice-&gt;<ref refid="classLattice_1a5c290c37b0e29a22764acf7e7e74ba22" kindref="member" tooltip="Return the id of a flat source region base index (smallest FSR region id within a specific lattice ce...">getFSR</ref>(curr-&gt;<ref refid="classLocalCoords_1a98a422016cd0e5e8a791a44784a3f6ac" kindref="member" tooltip="Return the first index of the lattice cell within which this localcoords resides.">getLatticeX</ref>(),<sp/>curr-&gt;<ref refid="classLocalCoords_1a82c184c2b1327bae01e7a607bbdc07f5" kindref="member" tooltip="Return the second index of the lattice cell within which this localcoords resides.">getLatticeY</ref>());</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curr-&gt;<ref refid="classLocalCoords_1a756dbd3f1b8fa9084f584b593af2b066" kindref="member" tooltip="Return the level (UNIV or LAT) of this localcoords.">getType</ref>()<sp/>==<sp/><ref refid="LocalCoords_8h_1a9b2c6f3fe231906f231afd6ae7293871a65a2a55bc0cbbb11fedd1f47574b355d" kindref="member">UNIV</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classUniverse" kindref="compound" tooltip="A universe represents an unbounded space in the 2D xy-plane.">Universe</ref>*<sp/>universe<sp/>=<sp/>_universes.at(curr-&gt;<ref refid="classLocalCoords_1a305af453a198ae35cc510f903def4088" kindref="member" tooltip="Return the id of the universe within which this localcoords resides.">getUniverse</ref>());</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsr_id<sp/>+=<sp/>universe-&gt;<ref refid="classUniverse_1ac4223b9975965ff302bd38666782985f" kindref="member" tooltip="Returns the local ID for the FSR representing a cell in this universe.">getFSR</ref>(curr-&gt;<ref refid="classLocalCoords_1a1ac27e8d751c92e8923eb8b992fa2484" kindref="member" tooltip="Return the id of the cell within which this localcoords resides.">getCell</ref>());</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr<sp/>=<sp/>curr-&gt;<ref refid="classLocalCoords_1a2072734614ca0d7b945fd20ed59f4594" kindref="member" tooltip="Return a pointer to the localcoord at the next lower nested universe level if one exists...">getNext</ref>();</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fsr_id;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1a8a81fa7b3dec100737f1dcc566f4d2ca" kindref="member" tooltip="Subidivides all cells in the geometry into rings and angular sectors.">Geometry::subdivideCells</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;short<sp/>int,<sp/>Universe*&gt;::iterator<sp/>iter;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter<sp/>=<sp/>_universes.begin();<sp/>iter<sp/>!=<sp/>_universes.end();<sp/>++iter)</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*iter).second-&gt;subdivideCells();</highlight></codeline>
<codeline lineno="1034"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1ad951597b0a94c3f4c43db865ae30218d" kindref="member" tooltip="Compute the number of flat source regions and nitialize an array of FSRs and FSR maps.">Geometry::initializeFlatSourceRegions</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>pointers<sp/>from<sp/>fill<sp/>cells<sp/>to<sp/>universes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>initializeCellFillPointers();</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Subdivide<sp/>cells<sp/>into<sp/>sectors<sp/>and<sp/>regions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classGeometry_1a8a81fa7b3dec100737f1dcc566f4d2ca" kindref="member" tooltip="Subidivides all cells in the geometry into rings and angular sectors.">subdivideCells</ref>();</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Generate<sp/>flat<sp/>source<sp/>regions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classUniverse" kindref="compound" tooltip="A universe represents an unbounded space in the 2D xy-plane.">Universe</ref><sp/>*univ<sp/>=<sp/>_universes.at(0);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>_num_FSRs<sp/>=<sp/>univ-&gt;<ref refid="classUniverse_1af76741be6456d3542a302024fd4c52e4" kindref="member" tooltip="Compute the FSR maps for this universe and return the number of FSRs inside the universe.">computeFSRMaps</ref>();</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a50d1448013c6f17125caee18aa418af7" kindref="member">NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>flat<sp/>source<sp/>regions:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>_num_FSRs);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>memory<sp/>for<sp/>maps<sp/>between<sp/>flat<sp/>source<sp/>regions<sp/>ids<sp/>and<sp/>cell<sp/>or</highlight></codeline>
<codeline lineno="1055"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>material<sp/>ids<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>_FSRs_to_cells<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[_num_FSRs];</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>_FSRs_to_materials<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[_num_FSRs];</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Load<sp/>maps<sp/>with<sp/>cell<sp/>and<sp/>material<sp/>ids<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r=0;<sp/>r<sp/>&lt;<sp/>_num_FSRs;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCellBasic" kindref="compound" tooltip="Represents a cell filled with a material.">CellBasic</ref>*<sp/>curr=</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classCellBasic" kindref="compound" tooltip="Represents a cell filled with a material.">CellBasic</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classGeometry_1acd933591916fa3f4f9d26ffca1ecd56a" kindref="member" tooltip="Find the cell for an fsr_id at a certain universe level.">findCell</ref>(_universes.at(0),<sp/>r));</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_FSRs_to_cells[r]<sp/>=<sp/>curr-&gt;<ref refid="classCell_1a5ee7d2b6a1ed18804d207f937e3defaf" kindref="member" tooltip="Return the cell&amp;#39;s user-specified ID.">getId</ref>();</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_FSRs_to_materials[r]<sp/>=<sp/><ref refid="classGeometry_1adb4ac26586b662e0bf1c5a78e52b5d1c" kindref="member" tooltip="Return a pointer to a material in the geometry.">getMaterial</ref>(curr-&gt;<ref refid="classCellBasic_1a72c5170a7a99499874bf96eea3da4148" kindref="member" tooltip="Return the ID of the material filling the cellbasic.">getMaterial</ref>())-&gt;getUid();</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1a21a092d997179d6bea6c66f592faa6de" kindref="member" tooltip="This method creates segments within flat source regions in the geometry for a given track...">Geometry::segmentize</ref>(<ref refid="classTrack" kindref="compound" tooltip="A track represents a characteristic line across the geometry.">Track</ref>*<sp/>track)<sp/>{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Track<sp/>starting<sp/>point<sp/>coordinates<sp/>and<sp/>azimuthal<sp/>angle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0<sp/>=<sp/>track-&gt;<ref refid="classTrack_1a14cbba36e759b0191961e05debcc527c" kindref="member" tooltip="Returns a pointer to the track&amp;#39;s start point.">getStart</ref>()-&gt;<ref refid="classPoint_1af52a20a376f8f31e87658837565d3812" kindref="member" tooltip="Returns this point&amp;#39;s x-coordinate.">getX</ref>();</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y0<sp/>=<sp/>track-&gt;<ref refid="classTrack_1a14cbba36e759b0191961e05debcc527c" kindref="member" tooltip="Returns a pointer to the track&amp;#39;s start point.">getStart</ref>()-&gt;<ref refid="classPoint_1aac5008459bf0e0053ce744a69187bae7" kindref="member" tooltip="Returns this point&amp;#39;s y-coordinate.">getY</ref>();</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phi<sp/>=<sp/>track-&gt;<ref refid="classTrack_1adc334d5a90c1204770ab180b2f39bc56" kindref="member" tooltip="Return the track&amp;#39;s azimuthal angle (with respect to the x-axis).">getPhi</ref>();</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Length<sp/>of<sp/>each<sp/>segment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>segment_length;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMaterial" kindref="compound" tooltip="The material class represents a unique material and its relevant nuclear data (ie, multigroup cross-sections) for neutron transport.">Material</ref>*<sp/>segment_material;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fsr_id;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>sigma_t;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_num_segments;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_segments;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>a<sp/>LocalCoords<sp/>for<sp/>the<sp/>start<sp/>and<sp/>end<sp/>of<sp/>each<sp/>segment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classLocalCoords" kindref="compound" tooltip="The localcoords represents a set of local coordinates on some level of nested universes making up the...">LocalCoords</ref><sp/>segment_start(x0,<sp/>y0);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classLocalCoords" kindref="compound" tooltip="The localcoords represents a set of local coordinates on some level of nested universes making up the...">LocalCoords</ref><sp/>segment_end(x0,<sp/>y0);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>segment_start.setUniverse(0);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>segment_end.setUniverse(0);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>cell<sp/>for<sp/>the<sp/>track<sp/>starting<sp/>point<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCell" kindref="compound" tooltip="Represents a cell inside of a universe.">Cell</ref>*<sp/>curr<sp/>=<sp/>findFirstCell(&amp;segment_end,<sp/>phi);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCell" kindref="compound" tooltip="Represents a cell inside of a universe.">Cell</ref>*<sp/>prev;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>starting<sp/>point<sp/>was<sp/>outside<sp/>the<sp/>bounds<sp/>of<sp/>the<sp/>geometry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curr<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>find<sp/>a<sp/>cell<sp/>containing<sp/>the<sp/>start<sp/>point<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;of<sp/>this<sp/>track:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>track-&gt;<ref refid="classTrack_1abc465cc8bc4d568c7031667cb831825e" kindref="member" tooltip="Convert this track&amp;#39;s attributes to a character array.">toString</ref>().c_str());</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>While<sp/>the<sp/>segment<sp/>end<sp/>localcoords<sp/>is<sp/>still<sp/>within<sp/>the<sp/>geometry,<sp/>move</highlight></codeline>
<codeline lineno="1108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>it<sp/>to<sp/>the<sp/>next<sp/>cell,<sp/>create<sp/>a<sp/>new<sp/>segment,<sp/>and<sp/>add<sp/>it<sp/>to<sp/>the<sp/>geometry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(curr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segment_end.copyCoords(&amp;segment_start);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>next<sp/>cell<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>curr;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr<sp/>=<sp/>findNextCell(&amp;segment_end,<sp/>phi);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Checks<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>new<sp/>segment<sp/>does<sp/>not<sp/>have<sp/>the<sp/>same<sp/>start</highlight></codeline>
<codeline lineno="1118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>end<sp/>points<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(segment_start.getX()<sp/>==<sp/>segment_end.getX()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segment_start.getY()<sp/>==<sp/>segment_end.getY())<sp/>{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a2fd6f336d08340583bd620a7f5694c90" kindref="member">ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Created<sp/>a<sp/>segment<sp/>with<sp/>the<sp/>same<sp/>start<sp/>and<sp/>end<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;point:<sp/>x<sp/>=<sp/>%f,<sp/>y<sp/>=<sp/>%f&quot;</highlight><highlight class="normal">,<sp/>segment_start.getX(),</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segment_start.getY());</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>segment<sp/>length<sp/>between<sp/>the<sp/>segment&apos;s<sp/>start<sp/>and<sp/>end<sp/>points<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segment_length<sp/>=<sp/>FP_PRECISION(segment_end.getPoint()</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;distanceToPoint(segment_start.getPoint()));</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/>segment_material<sp/>=<sp/>_materials.at(static_cast&lt;CellBasic*&gt;(prev)</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<ref refid="classGeometry_1adb4ac26586b662e0bf1c5a78e52b5d1c" kindref="member" tooltip="Return a pointer to a material in the geometry.">getMaterial</ref>());</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/>sigma_t<sp/>=<sp/>segment_material-&gt;<ref refid="classMaterial_1a79a0abbbfb65002dd7e59e6e1d871faa" kindref="member" tooltip="Return the array of the material&amp;#39;s total cross-sections.">getSigmaT</ref>();</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>fsr_id<sp/>=<sp/><ref refid="classGeometry_1ac6025e6ed8673a109e406733e3c2ca05" kindref="member" tooltip="Find and return the ID of the flat source region that this localcoords object resides within...">findFSRId</ref>(&amp;segment_start);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>number<sp/>of<sp/>segments<sp/>to<sp/>cut<sp/>this<sp/>segment<sp/>into<sp/>to<sp/>ensure</highlight></codeline>
<codeline lineno="1136"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>that<sp/>it&apos;s<sp/>length<sp/>is<sp/>small<sp/>enough<sp/>for<sp/>the<sp/>exponential<sp/>hashtable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>min_num_segments<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=0;<sp/>e<sp/>&lt;<sp/>_num_groups;<sp/>e++)<sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_segments<sp/>=<sp/>ceil(segment_length<sp/>*<sp/>sigma_t[e]<sp/>/<sp/>10.0);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_segments<sp/>&gt;<sp/>min_num_segments)</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_num_segments<sp/>=<sp/>num_segments;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;Cut<sp/>up&quot;<sp/>segment<sp/>such<sp/>that<sp/>it<sp/>does<sp/>not<sp/>exceed<sp/>the<sp/>size<sp/>of<sp/></highlight></codeline>
<codeline lineno="1145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>exponential<sp/>prefactor<sp/>table<sp/>in<sp/>the<sp/>solver<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>min_num_segments;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>new<sp/>segment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsegment" kindref="compound" tooltip="A segment represents a line segment within a single flat source region along a track.">segment</ref>*<sp/>new_segment<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structsegment" kindref="compound" tooltip="A segment represents a line segment within a single flat source region along a track.">segment</ref>;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_segment-&gt;<ref refid="structsegment_1a0f8836fedfacd554b9fd650e7e89a4c0" kindref="member">_material</ref><sp/>=<sp/>segment_material;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_segment-&gt;<ref refid="structsegment_1a50c5a635c531d34ad3435ebcc3b6f593" kindref="member">_length</ref><sp/>=<sp/>segment_length<sp/>/<sp/></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP_PRECISION(min_num_segments);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>max<sp/>and<sp/>min<sp/>segment<sp/>lengths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(segment_length<sp/>&gt;<sp/>_max_seg_length)</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_max_seg_length<sp/>=<sp/>segment_length;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(segment_length<sp/>&lt;<sp/>_min_seg_length)</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_min_seg_length<sp/>=<sp/>segment_length;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a0593585da9181e972974c1274d8f2b4f" kindref="member">DEBUG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;segment<sp/>start<sp/>x<sp/>=<sp/>%f,<sp/>y<sp/>=<sp/>%f,<sp/>segment<sp/>end<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;x<sp/>=<sp/>%f,<sp/>y<sp/>=<sp/>%f&quot;</highlight><highlight class="normal">,<sp/>segment_start.getX(),<sp/></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segment_start.getY(),<sp/>segment_end.getX(),<sp/></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segment_end.getY());</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_segment-&gt;<ref refid="structsegment_1ad4185c78e4df6c12a07392dfee367706" kindref="member">_region_id</ref><sp/>=<sp/>fsr_id;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>the<sp/>segment<sp/>to<sp/>the<sp/>track<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>track-&gt;<ref refid="classTrack_1a08af057318f555da880a391718837ea0" kindref="member" tooltip="Adds a segment pointer to this track&amp;#39;s list of segments.">addSegment</ref>(new_segment);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a0593585da9181e972974c1274d8f2b4f" kindref="member">DEBUG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Created<sp/>%d<sp/>segments<sp/>for<sp/>track:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>track-&gt;<ref refid="classTrack_1a034893295ac06eed35aac0c7ed172419" kindref="member" tooltip="Return the number of segments along this track.">getNumSegments</ref>(),<sp/>track-&gt;<ref refid="classTrack_1abc465cc8bc4d568c7031667cb831825e" kindref="member" tooltip="Convert this track&amp;#39;s attributes to a character array.">toString</ref>().c_str());</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>segment_start.prune();</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>segment_end.prune();</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a0593585da9181e972974c1274d8f2b4f" kindref="member">DEBUG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;max<sp/>segment<sp/>length:<sp/>%f&quot;</highlight><highlight class="normal">,<sp/>_max_seg_length);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf(<ref refid="log_8h_1a5096002e05063d13577205e0bc5f0564a0593585da9181e972974c1274d8f2b4f" kindref="member">DEBUG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;min<sp/>segment<sp/>length:<sp/>%f&quot;</highlight><highlight class="normal">,<sp/>_min_seg_length);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1a6bd18eecf69745a7471acf5c64fe269f" kindref="member" tooltip="This method is called from the Solver after fixed source iteration to compute the powers (fission rat...">Geometry::computePinPowers</ref>(FP_PRECISION*<sp/>FSRs_to_powers,</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/>FSRs_to_pin_powers)<sp/>{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>base<sp/>universe<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classUniverse" kindref="compound" tooltip="A universe represents an unbounded space in the 2D xy-plane.">Universe</ref>*<sp/>univ<sp/>=<sp/>_universes.at(0);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>file<sp/>prefix<sp/>for<sp/>the<sp/>output<sp/>files<sp/>to<sp/>store<sp/>all<sp/>the<sp/>pin<sp/>powers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>file_prefix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PinPowers/universe0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>call<sp/>to<sp/>recursive<sp/>function<sp/>to<sp/>compute<sp/>powers<sp/>at<sp/>each</highlight></codeline>
<codeline lineno="1205"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>level<sp/>of<sp/>lattice<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classGeometry_1a2d418e75a8080e4219c8f1b024a6da8e" kindref="member" tooltip="This is a recursive function which computes the powers of all of the FSRs inside a given universe...">computePinPowersInUniverse</ref>(univ,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)file_prefix.c_str(),<sp/>0,<sp/></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSRs_to_powers,</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSRs_to_pin_powers);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal">FP_PRECISION<sp/><ref refid="classGeometry_1a2d418e75a8080e4219c8f1b024a6da8e" kindref="member" tooltip="This is a recursive function which computes the powers of all of the FSRs inside a given universe...">Geometry::computePinPowersInUniverse</ref>(<ref refid="classUniverse" kindref="compound" tooltip="A universe represents an unbounded space in the 2D xy-plane.">Universe</ref>*<sp/>univ,<sp/></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>output_file_prefix,</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FSR_id,<sp/></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/>FSRs_to_powers,<sp/></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP_PRECISION*<sp/>FSRs_to_pin_powers)<sp/>{</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Power<sp/>starts<sp/>at<sp/>0<sp/>and<sp/>is<sp/>incremented<sp/>for<sp/>each<sp/>FSR<sp/>in<sp/>this<sp/>universe<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>power<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_zero_power;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>universe<sp/>is<sp/>a<sp/>SIMPLE<sp/>type<sp/>universe<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(univ-&gt;<ref refid="classUniverse_1a6cbde58618cfcec5f72780b2911ab97b" kindref="member" tooltip="Return the universe type (SIMPLE or LATTICE).">getType</ref>()<sp/>==<sp/><ref refid="Universe_8h_1a123911615dcd5c50bea706d32683a02aa1a6b6e9893ec9e5d9710335b4c74d3f6" kindref="member">SIMPLE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;short<sp/>int,<sp/>Cell*&gt;<sp/>cells<sp/>=<sp/>univ-&gt;<ref refid="classUniverse_1a2c23d7adc8ea99834f4cdd0e4a26e45a" kindref="member" tooltip="Return the vector of cell pointers in this universe.">getCells</ref>();</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;short<sp/>int,<sp/>short<sp/>int&gt;<sp/>_region_map;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;short<sp/>int&gt;<sp/>fsr_ids;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCell" kindref="compound" tooltip="Represents a cell inside of a universe.">Cell</ref>*<sp/>curr;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>each<sp/>of<sp/>the<sp/>cells<sp/>inside<sp/>the<sp/>lattice,<sp/>check<sp/>if<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="1245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>material<sp/>or<sp/>fill<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;short<sp/>int,<sp/>Cell*&gt;::iterator<sp/>iter;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter<sp/>=<sp/>cells.begin();<sp/>iter<sp/>!=<sp/>cells.end();<sp/>++iter)<sp/>{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr<sp/>=<sp/>iter-&gt;second;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>current<sp/>cell<sp/>is<sp/>a<sp/>MATERIAL<sp/>type<sp/>cell,<sp/>pull<sp/>its</highlight></codeline>
<codeline lineno="1251"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>FSR<sp/>id<sp/>from<sp/>the<sp/>fsr<sp/>map<sp/>and<sp/>increment<sp/>the<sp/>power<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="1252"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>power<sp/>for<sp/>that<sp/>FSR</highlight></codeline>
<codeline lineno="1253"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curr-&gt;<ref refid="classCell_1af0421cc4cbb034947b2b7ec18c6df7d0" kindref="member" tooltip="Return the cell type (FILL or MATERIAL).">getType</ref>()<sp/>==<sp/><ref refid="Cell_8h_1a274ceed3b07859c48505f65b1fe42328a23f8f5e62324af5f4d8f899cee8fb70d" kindref="member">MATERIAL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fsr_id<sp/>=<sp/>univ-&gt;<ref refid="classUniverse_1ac4223b9975965ff302bd38666782985f" kindref="member" tooltip="Returns the local ID for the FSR representing a cell in this universe.">getFSR</ref>(curr-&gt;<ref refid="classCell_1a5ee7d2b6a1ed18804d207f937e3defaf" kindref="member" tooltip="Return the cell&amp;#39;s user-specified ID.">getId</ref>())<sp/>+<sp/>FSR_id;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsr_ids.push_back(fsr_id);</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>power<sp/>+=<sp/>FSRs_to_powers[fsr_id];</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>current<sp/>cell<sp/>is<sp/>a<sp/>FILL<sp/>type<sp/>cell,<sp/>pull<sp/>its</highlight></codeline>
<codeline lineno="1261"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>FSR<sp/>id<sp/>from<sp/>the<sp/>fsr<sp/>map</highlight></codeline>
<codeline lineno="1262"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCellFill" kindref="compound" tooltip="Represents a cell filled with a universe.">CellFill</ref>*<sp/>fill_cell<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classCellFill" kindref="compound" tooltip="Represents a cell filled with a universe.">CellFill</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(curr);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classUniverse" kindref="compound" tooltip="A universe represents an unbounded space in the 2D xy-plane.">Universe</ref>*<sp/>universe_fill<sp/>=<sp/>fill_cell-&gt;<ref refid="classCellFill_1af5debd1e98494583d628641cb5321a8c" kindref="member" tooltip="Return a pointer to the universe filling this cell.">getUniverseFill</ref>();</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fsr_id<sp/>=<sp/>univ-&gt;<ref refid="classUniverse_1ac4223b9975965ff302bd38666782985f" kindref="member" tooltip="Returns the local ID for the FSR representing a cell in this universe.">getFSR</ref>(curr-&gt;<ref refid="classCell_1a5ee7d2b6a1ed18804d207f937e3defaf" kindref="member" tooltip="Return the cell&amp;#39;s user-specified ID.">getId</ref>())<sp/>+<sp/>FSR_id;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>power<sp/>+=<sp/><ref refid="classGeometry_1a2d418e75a8080e4219c8f1b024a6da8e" kindref="member" tooltip="This is a recursive function which computes the powers of all of the FSRs inside a given universe...">computePinPowersInUniverse</ref>(universe_fill,<sp/></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_file_prefix,<sp/></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsr_id,<sp/>FSRs_to_powers,<sp/></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSRs_to_pin_powers);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>all<sp/>of<sp/>the<sp/>FSR<sp/>ids<sp/>stored<sp/>for<sp/>MATERIAL<sp/>type<sp/>cells</highlight></codeline>
<codeline lineno="1276"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>save<sp/>their<sp/>pin<sp/>powers<sp/>in<sp/>the<sp/>FSRs_to_pin_powers<sp/>map<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>(int)fsr_ids.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fsr_id<sp/>=<sp/>fsr_ids.at(i);</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSRs_to_pin_powers[fsr_id]<sp/>=<sp/>power;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>universe<sp/>is<sp/>a<sp/>LATTICE<sp/>type<sp/>universe<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLattice" kindref="compound" tooltip="Represents a repeating 2D lattice array of universes.">Lattice</ref>*<sp/>lattice<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classLattice" kindref="compound" tooltip="Represents a repeating 2D lattice array of universes.">Lattice</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(univ);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classUniverse" kindref="compound" tooltip="A universe represents an unbounded space in the 2D xy-plane.">Universe</ref>*<sp/>curr;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_x<sp/>=<sp/>lattice-&gt;<ref refid="classLattice_1aa72ae9812e91b1a4a907dfc1107c0393" kindref="member" tooltip="Return the number of lattice cells along the x-axis.">getNumX</ref>();</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_y<sp/>=<sp/>lattice-&gt;<ref refid="classLattice_1a9f978534c7ac76cc8b98e815e271e978" kindref="member" tooltip="Return the number of lattice cells along the y-axis.">getNumY</ref>();</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fsr_id;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP_PRECISION<sp/>cell_power<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>an<sp/>output<sp/>file<sp/>to<sp/>write<sp/>this<sp/>lattice&apos;s<sp/>pin<sp/>powers<sp/>to<sp/>within</highlight></codeline>
<codeline lineno="1293"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>a<sp/>new<sp/>directory<sp/>called<sp/>PinPowers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mkdir(</highlight><highlight class="stringliteral">&quot;PinPowers&quot;</highlight><highlight class="normal">,<sp/>S_IRWXU);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>output_file_name;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_file_name<sp/>&lt;&lt;<sp/>output_file_prefix<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;_lattice&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>lattice-&gt;<ref refid="classUniverse_1a4f7c4329c04e78b6a62f8977dfe3d115" kindref="member">getId</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;_power.txt&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE*<sp/>output_file<sp/>=<sp/>fopen(output_file_name.str().c_str(),<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>non_zero_power<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>all<sp/>lattice<sp/>cells<sp/>in<sp/>this<sp/>lattice<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>num_y-1;<sp/>i<sp/>&gt;<sp/>-1;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>num_x;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>current<sp/>lattice<sp/>cell<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr<sp/>=<sp/>lattice-&gt;<ref refid="classLattice_1a0b1b5aa06a73064c65d08332c13f973f" kindref="member" tooltip="Returns a pointer to the universe within a specific lattice cell.">getUniverse</ref>(j,<sp/>i);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>FSR<sp/>id<sp/>prefix<sp/>for<sp/>this<sp/>lattice<sp/>cell<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsr_id<sp/>=<sp/>lattice-&gt;<ref refid="classLattice_1a5c290c37b0e29a22764acf7e7e74ba22" kindref="member" tooltip="Return the id of a flat source region base index (smallest FSR region id within a specific lattice ce...">getFSR</ref>(j,<sp/>i)<sp/>+<sp/>FSR_id;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>an<sp/>output<sp/>filename<sp/>for<sp/>this<sp/>cell&apos;s<sp/>power<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>file_prefix;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_prefix<sp/>&lt;&lt;<sp/>output_file_prefix<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;_lattice&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lattice-&gt;<ref refid="classUniverse_1a4f7c4329c04e78b6a62f8977dfe3d115" kindref="member">getId</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;_x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;_y&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>this<sp/>lattice<sp/>cell&apos;s<sp/>power<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_power<sp/>=<sp/><ref refid="classGeometry_1a2d418e75a8080e4219c8f1b024a6da8e" kindref="member" tooltip="This is a recursive function which computes the powers of all of the FSRs inside a given universe...">computePinPowersInUniverse</ref>(curr,</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)file_prefix.str().c_str(),</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsr_id,<sp/>FSRs_to_powers,<sp/></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSRs_to_pin_powers);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>this<sp/>lattice<sp/>cell&apos;s<sp/>power<sp/>to<sp/>the<sp/>output<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output_file,<sp/></highlight><highlight class="stringliteral">&quot;%f,<sp/>&quot;</highlight><highlight class="normal">,<sp/>cell_power);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>power<sp/>+=<sp/>cell_power;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>a<sp/>nonzero<sp/>power<sp/>has<sp/>been<sp/>computed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(power<sp/>&gt;<sp/>0.0)</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>non_zero_power<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Move<sp/>to<sp/>the<sp/>next<sp/>line<sp/>in<sp/>the<sp/>output<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output_file,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(output_file);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Delete<sp/>this<sp/>output<sp/>file<sp/>if<sp/>none<sp/>of<sp/>the<sp/>powers<sp/>were<sp/>nonzero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!non_zero_power)</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">remove</highlight><highlight class="normal">(output_file_name.str().c_str());</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>power;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal">std::string<sp/><ref refid="classGeometry_1ae247a0c9686286fa941142e803d289f1" kindref="member" tooltip="Converts this geometry&amp;#39;s attributes to a character array.">Geometry::toString</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>string;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;short<sp/>int,<sp/>Material*&gt;::iterator<sp/>iter1;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;short<sp/>int,<sp/>Surface*&gt;::iterator<sp/>iter2;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;short<sp/>int,<sp/>Cell*&gt;::iterator<sp/>iter3;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;short<sp/>int,<sp/>Universe*&gt;::iterator<sp/>iter4;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;short<sp/>int,<sp/>Lattice*&gt;::iterator<sp/>iter5;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Geometry:<sp/>width<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classGeometry_1a8a7afceb0905b411d296c57fb0f8f3ba" kindref="member" tooltip="Returns the total width (x extent) of the geometry in cm.">getWidth</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>height<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1a8895b7f5b91d85926f316ac09ade9e5f" kindref="member" tooltip="Returns the total height (y extent) of the geometry in cm.">getHeight</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Bounding<sp/>Box:<sp/>((&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>_x_min<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_y_min<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;),<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>_x_max<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>_y_max<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\tMaterials:\n\t\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter1<sp/>=<sp/>_materials.begin();<sp/>iter1<sp/>!=<sp/>_materials.end();<sp/>++iter1)</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iter1-&gt;second-&gt;toString()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n\t\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\tSurfaces:\n\t\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter2<sp/>=<sp/>_surfaces.begin();<sp/>iter2<sp/>!=<sp/>_surfaces.end();<sp/>++iter2)</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iter2-&gt;second-&gt;toString()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\t\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\tCells:\n\t\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter3<sp/>=<sp/>_cells.begin();<sp/>iter3<sp/>!=<sp/>_cells.end();<sp/>++iter3)</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iter3-&gt;second-&gt;toString()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\t\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\tUniverses:\n\t\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter4<sp/>=<sp/>_universes.begin();<sp/>iter4<sp/>!=<sp/>_universes.end();<sp/>++iter4)</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iter4-&gt;second-&gt;toString()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\t\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\tLattices:\n\t\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter5<sp/>=<sp/>_lattices.begin();<sp/>iter5<sp/>!=<sp/>_lattices.end();<sp/>++iter5)</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iter5-&gt;second-&gt;toString()<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\t\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>formatted_string<sp/>=<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.str();</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/>formatted_string.erase(formatted_string.end()-3);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>formatted_string;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1a51d5ba4a579b470d1321f365517436db" kindref="member" tooltip="Prints a string representation of all of the geometry&amp;#39;s objects to the console.">Geometry::printString</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/><sp/>RESULT<sp/>]<sp/><sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="classGeometry_1ae247a0c9686286fa941142e803d289f1" kindref="member" tooltip="Converts this geometry&amp;#39;s attributes to a character array.">toString</ref>().c_str());</highlight></codeline>
<codeline lineno="1399"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/wbinventor/NSE-CRPG-Codes/OpenMOC/src/Geometry.cpp"/>
  </compounddef>
</doxygen>
